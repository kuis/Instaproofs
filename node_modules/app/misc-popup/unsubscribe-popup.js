/*==========================================================================*\
 A popup with a contact form
 \*==========================================================================*/
"use strict";
var MiscPopup = require('./misc-popup');
var BaseView = require('app/base/base-view');
var UnsubscribeMixin = require('./unsubscribe-mixin');

var app = require('app');
var xhr = require('xhr');
var assign = require('lodash.assign');

module.exports = MiscPopup.extend(UnsubscribeMixin, {
  template: require('app/templates')['misc-popup'].unsubscribe,

  props: assign({}, MiscPopup.prototype.props, {
    saving: ['boolean', true, false]
  }),

  bindings: assign({}, MiscPopup.prototype.bindings, {
    'model.name': {
      type: 'text',
      selector: '.event-name'
    },
    'data.bulk': {
      type: 'booleanAttribute',
      name: 'checked',
      selector: 'input[name="bulk"]'
    },
    'data.discount': {
      type: 'booleanAttribute',
      name: 'checked',
      selector: 'input[name="discount"]'
    },
    'data.event': {
      type: 'booleanAttribute',
      name: 'checked',
      selector: 'input[name="event"]'
    },
    'data.repeat': {
      type: 'booleanAttribute',
      name: 'checked',
      selector: 'input[name="repeat"]'
    },
    'saving': {
      type: 'booleanClass',
      name: 'loading',
      selector: '.button.save',
    }
  }),

  initialize: function (ops) {
    MiscPopup.prototype.initialize.apply(this, arguments);

    var self = this;

    this.eid = ops.eid;
    this.email = ops.email;
    this.prefId = ops.prefId;

    if (!this.model.name || !this.model.complete) {
      this.model.fetchByOrigin();
    }

    this.listenTo(this.model, 'change:name', function () {
      this.getEmailSubscriptions(this.eid, this.prefId, this.email).then(function (response) {

        if (response.data.status === 200) {
          self.data = response.data.data;
        }
        else {
          // Set error message
        }
      }, function (error) {
        // Set error message

      });
    });

  },

  save: function () {
    var self = this;

    if (this.saving) {
      return;
    }

    this.saving = true;
    this.updateEmailSubscriptions(this.eid, this.prefId, this.email, this.data).then(function (response) {

      if (response.data.status === 200) {
        self.sent = true;
      }
      else {
        self.alert('Failed to save subscription preferences. ' +
                'Please check your internet connection and try again.');
      }
      self.saving = false;
    }, function (error) {
      self.alert('There was an error in updating subscription preferences. ' + error);

      self.saving = false;
    });

  }
  
});
