/*==========================================================================*\
  A popup with a contact form
\*==========================================================================*/
"use strict";
var MiscPopup = require('./misc-popup');
var UnsubscribeMixin = require('./unsubscribe-mixin');

var app = require('app');
var xhr = require('xhr');

module.exports = MiscPopup.extend(UnsubscribeMixin, {
  template: require('app/templates')['misc-popup'].unsubscribe,

  props: {
    subscribeOptions: ['object', true]
  },

  bindings: {
    'model.name': {
      type: 'text',
      selector: '.event-name'
    },
    'subscribeOptions.bulk': {
      type: 'booleanAttribute',
      name: 'checked',
      selector: 'input[name="bulk"]'
    },
    'subscribeOptions.discount': {
      type: 'booleanAttribute',
      name: 'checked',
      selector: 'input[name="discount"]'
    },
    'subscribeOptions.event': {
      type: 'booleanAttribute',
      name: 'checked',
      selector: 'input[name="event"]'
    },
    'subscribeOptions.repeat': {
      type: 'booleanAttribute',
      name: 'checked',
      selector: 'input[name="repeat"]'
    }
  },

  events: {

  },

  initialize: function (ops) {
    MiscPopup.prototype.initialize.apply(this, arguments);

    var self = this;

    this.eid = ops.eid;
    this.email = ops.email;
    this.prefId = ops.prefId;

    if (!this.model.name || !this.model.complete) {
      this.model.fetchByOrigin();
    }

    this.listenTo(this.model, 'change:name', function () {
      this.getEmailSubscriptions(this.eid, this.prefId, this.email).then(function (response) {

        if (response.data.status === 200) {
          self.subscribeOptions = response.data.data;
        }
        else {
          // Set error message
        }
      }, function (error) {
        // Set error message

      });
    });

  }
});
