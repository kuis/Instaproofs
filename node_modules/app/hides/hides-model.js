/*==========================================================================*\
  A model farvorite photos for an event
\*==========================================================================*/
"use strict";

var BaseModel = require('app/base/base-model');
var BaseCollection = require('app/base/base-collection');

var app = require('app');
var debounce = require('lodash.debounce');

var Photo = BaseModel.extend({
  idAttribute: 'pid',
  props: {
    pid: 'number',
    cat_id: 'number',
  },
});

var PhotosCollection = BaseCollection.extend({
  mainIndex: 'pid',
  model: Photo,
});

module.exports = BaseModel.extend({
  // extraProperties: 'ignore',
  props: {
    id: 'number',
    eid: 'number',
    mtime: ['number', true, 0], // last modification time
  },
  
  collections: {
    photos: PhotosCollection,
  },
  
  session: {
    isHidesModel: ['boolean', true, true],
    event: 'state',
  },
  
  derived: {},
  
  initialize: function (data) {
    this.save = debounce(this.save, 1000);
    this.event = data.event;
    
    this.listenTo(this.photos, 'add', function (model) {
      // this.save();
      this.trigger('add:'+ model.pid);
    });
    this.listenTo(this.photos, 'remove', function (model) {
      // this.save();
      this.trigger('remove:'+ model.pid);
    });
    
    this.listenTo(this.event, 'hide-toggle', this.onHideToggle);
    
    this.listenTo(app, 'storage:hides'+this.eid, this.storageCallback);
    
    if (this.event.complete) this.readStorage();
    else this.listenTo(this.event, 'change:complete', this.readStorage);
  },
  
  
  onHideToggle: function (pid, cid) {
    console.log('hide toggle', pid);
    var item = this.photos.get(pid);
    if (item) {
      this.photos.remove(item);
    } 
    else {
      this.photos.add({
        pid: pid,
        cat_id: cid,
      });
    }
    
    this.save();
  },
  
  
  readStorage: function (){
    var storedData = app.storage['hides'+this.eid];
    if (storedData) this.set(JSON.parse(storedData), { silent: true });
  },
  
  storageCallback: function (newData) {
    newData = JSON.parse(newData);
    if (newData.mtime > this.mtime) {
      this.set(newData);
    }
  },
  
  store: function () {
    this.mtime = Date.now();
    app.storage['hides'+this.eid] = JSON.stringify(this.toJSON());
  },
  
  url: function () {
    var keychain = app.keychain.events.get(this.eid);
    
    var query = '?url='+ app.url +
        // '&eid='+ this.eid +
        // '&email=johnny3k@gmail.com'+
        (keychain && keychain.email ? 
        '&email='+ encodeURIComponent(keychain.email) : '') +
        (keychain && keychain.password ? 
        '&password='+ encodeURIComponent(keychain.password) : '');
        
    return app.apiUrl +'images/hide/'+ this.event.id + query;
  },
  
  save: function () {
    this.store();
    
    var keychain = app.keychain.events.get(this.eid);
    if (!keychain || !keychain.email) return;
    
    var self = this;
    
    this.sync('create', this, {
      url: this.url(),
      success: function (resp) {
        if (+resp.status !== 200) return;
        self.id = 1;
        self.store();
      },
    });
  },
  
});
