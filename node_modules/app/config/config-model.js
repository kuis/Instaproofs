/*==========================================================================*\
  App config
\*==========================================================================*/
"use strict";

var app = require('app');
var BaseModel = require('app/base/base-model');

module.exports = BaseModel.extend({
  extraProperties: 'ignore',
  
  children: {
    photographer: require('./photographer-model'),
  },
    
  url: app.apiUrl +'bootstrap?url='+ app.url,
  
  props: {
    // grid|list|login: what the visitors see when they visit the homepage
    style: ['string', true, 'grid'],
    
    // date|name|type : Determines how the events are sorted by default
    sort: ['string', true, 'date'], 
    
    // current|future|all : Determines which events are displayed by default
    filter: ['string', true, 'current'], 
    
    // Boolean value that indicates whether the search area should be displayed
    display_search: ['boolean', true, false],
    
    // Boolean value that indicates whether the "Home" link should be displayed 
    display_home: ['boolean', true, false], 
    
    // Boolean value that indicates whether the "Home" link should be displayed
    display_custom: ['boolean', true, false], 
    
    // The text that should be displayed for the custom link
    display_custom_label: ['string', false, ''],
    
    // The URL that clicking the custom link should take the user to 
    display_custom_url: ['string', false, ''], 
    
    // no min_purchase amount on full-digital orders 
    ignore_min_on_digital_orders: ['boolean', true, false],
    
    // whether clicking the logo should take visitor to the 
    // photographer's personal website
    link_to_company: ['boolean', true, false], 
    
    logo_url: ['string', true, ''],
    
    // indicates whether the products should be shown above (1) 
    // or below (0) the image categories within the event
    products_on_top: ['boolean', true, false], 
    
    // whether product names should be shown over the images in thumbnail view
    product_names: ['boolean', true, true],
    
    // none|view|custom|view_custom : Determines whether the visitor can 
    // select a crop for their ordered prints 
    custom_crop: ['string', true, ''],
    
    // whether the storefront is in vacation mode. When in vacation mode, 
    // visitors can view the homepage as normal, but when an event is 
    // tried to be entered the user is shown a vacation message, is asked 
    // for their email address, and cannot view the images within the event 
    vacation: ['boolean', true, false], 
    
    // The message to display when the storefront is in vacation mode and a 
    // person tries to enter an event
    vacation_message: ['string', true, ''], 
    
    // whether visitors can see the "Email Photo" option with the share links
    email_photo: ['boolean', true, false], 
    
    // Numeric value used to determine which sharing links 
    // (Facebook, Twitter, Digg, etc.) should be displayed with the images
    share_options: ['number', true, 0],
    
    // Displayed on the purchase page with options 
    // that have add-ons available for them 
    addon_label: ['string', true, ''],
    
    // The minimum order size allowed before the "Checkout" 
    // option should be displayed 
    min_order: ['number', true, 0], 
    
    // Determines whether American Express card 
    // will be accepted on large orders (<$2000)
    allow_amex: ['boolean', true, false], 
    
    // Message to display if a person enters an event that contains no images
    empty_message: ['string', true, ''], 
    
    // Message to display if a person enters an event that has expired
    expired_message: ['string', true, ''], 
    
    // Message to display on event's login form
    login_message: ['string', true, ''], 
    
    // Message displayed on the receipt after an order is placed
    receipt_message: ['string', true, ''], 
    
    // Description used in the <head> portion of the website
    meta_description: ['string', true, ''], 
    
    // Text to display in place of "Sales Tax" on the checkout and receipt pages
    tax_label: ['string', true, ''],

    // Determine whether or not to display the opt-in checkbox on the login screen
    display_opt_in: ['boolean', true, true], 
    
    shipping_method: {
      type: 'string',
      require: true,
      values: ['prints_ordered', 'items_ordered', 'print_total', 
               'order_total', 'print_percent', 'order_percent'], 
    },
    
    faq: 'object',
    social: 'object',
    no_images_url: ['string', true, 'img/no-image.png'],

    // Deteremines whether the image names should be displayed by default
    display_photo_names: ['boolean', true, false]
  },
  
  derived: {
    crop_enabled: {
      deps: ['custom_crop'],
      fn: function () {
        return this.custom_crop !== 'hidden';
      },
    },
    show_crop: {
      deps: ['custom_crop'],
      fn: function () {
        return this.custom_crop.indexOf('view') > -1;
      },
    },
    edit_crop: {
      deps: ['custom_crop'],
      fn: function () {
        return this.custom_crop.indexOf('edit') > -1;
      },
    },
    custom_url_label: {
      deps: ['display_custom_label', 'display_custom_url'],
      fn: function () {
        if (this.display_custom_label) return this.display_custom_label;
        return this.display_custom_url.trim().replace(/^\w+:\/\//i, '');
      },
    },
    logo_link: {
      deps: ['link_to_company', 'logo_url'],
      fn: function () {
        if (this.link_to_company && this.photographer.website_url) {
          return this.photographer.website_url;
        } 
        else {
          return '#events';
        }
      },
    },
    socialEnabled: {
      deps: ['social'],
      fn: function () {
        if (this.social.sharing_facebook.enabled ||
            this.social.sharing_googleplus.enabled ||
            this.social.sharing_pinterest.enabled ||
            this.social.sharing_stumbleupon.enabled ||
            this.social.sharing_twitter.enabled) {
          return true;
        }
        return false;
      },
    }
  },
  
  initialize: function () {
    this.listenTo(this, 'sync', function () {
      app.state.bootstrapped = true;
    });
  },
  
  fetch: function () {
    // var storageTime = +app.storage.bootstrapStorageTime;
    // var now = Date.now();
    // if (storageTime && storageTime >= now - 10 * 24 * 60 * 60000) {
    //   var data = app.storage.bootstrapData;
    //   if (!data) return BaseModel.prototype.fetch.apply(this, arguments);
    //   data = JSON.parse(data);
    //   data = this.parse(data);
    //   this.set(data);
    //   app.state.bootstrapped = true;
    // }
    // else {
      return BaseModel.prototype.fetch.apply(this, arguments);
    // }
  },
  
  parse: function (res) {
    var i, j;
    var data = res.data;
    
    if (!data.config) {
      console.error("no config in bootstrap");
      console.log(data);
      console.trace();
    }
    // data.config.custom_crop = 'view_edit';
    
    // for (i = 0; i < data.purchase_products.length; i++) {
    //   for (j = 0; j < data.purchase_products[i].options.length; j++) {
    //     data.purchase_products[i].options[j].available_qty = 5;
    //   }
    // }
    
    if (!res.savedLocally) { // cache into local storage
      // save data into local storage
      app.storage.bootstrapStorageTime = Date.now();
      res.savedLocally = true;
      app.storage.bootstrapData = JSON.stringify(res);
    }
    
    if (data.photographer) {
      // app.photographer.set(data.photographer);
      data.config.photographer = data.photographer;
    }
    
    if (data.sizes) {
      for (i = 0; i < data.sizes.length; i++) {
        if (data.sizes[i].img_url === null) {
          data.sizes[i].img_url = '';
        }
      }
      app.sizes.set(data.sizes);
    }
    
    if (data.colors) app.colors.set(data.colors);
    if (data.pricing_templates) {
      data.pricing_templates = this.parsePricing(data.pricing_templates);
      app.pricing.set(data.pricing_templates);
    }
    
    if (data.config.site_notice) {
      app.notices.set(data.config.site_notice);
    }
    
    if (data.purchase_addons) {
      for (i = 0; i < data.purchase_addons.length; i++) {
        if (data.purchase_addons[i].description === null) {
          data.purchase_addons[i].description = '';
        }
      }
      app.addons.set(data.purchase_addons);
      app.addons.globalAddons = true;
    }
    
    if (data.shipping) {
      data.config.shipping_method = data.shipping.method;
      app.shipping.set(data.shipping.variants);
    }
    
    if (data.purchase_products) {
      // for (i = 0; i < data.purchase_products.length; i++) {
      //   if (data.purchase_products[i].img_url === 'http://images9.instaproofs'+
      //       '.com/8/product/original_large_100187176.jpg') {
      //     data.purchase_products[i].img_url = 'img/pics/products/album.jpg';
      //   }
      //   if (data.purchase_products[i].img_url === 'http://images9.instaproofs'+
      //       '.com/8/product/original_large_648401.jpg') {
      //     data.purchase_products[i].img_url = 'img/pics/products/gift.jpg';
      //   }
      // }
      app.products.set(data.purchase_products);
    }

    // remove no_images_url if it is empty
    if (!data.config.no_images_url) {
      delete data.config.no_images_url;
    }
    
    return data.config;
  },
  
  parsePricing: function (tpl) {
    var i, j, k, n, size, variant, bp1, bp2;
    for (i = 0; i < tpl.length; i++) {
      
      // ==== TEMPORARY TEST DATA
      // if (tpl[i].bulk_pricing_type === 'none') {
      //   tpl[i].bulk_pricing_type = tpl[i].pricing_id === 8 ? 'compound' : 'fixed';
      // }
      // ==== END OF TEMPORARY TEST DATA
      
      if (tpl[i].bulk_pricing_type !== 'none') {
        for (j = 0; j < tpl[i].sizes.length; j++) {
          size = tpl[i].sizes[j];
          for (k = 0; k < size.variants.length; k++) {
            variant = size.variants[k];
            
            
            // ==== TEMPORARY TEST DATA
            // if (!variant.bulk_pricing.length && size.size_id !== 63126 &&
            //     size.size_id !== 88 && size.size_id !== 79061 &&
            //     size.size_id !== 42440 && size.size_id !== 1350) {
            //   bp1 = Math.floor(variant.price * 0.8 / 100) * 100;
            //   bp2 = Math.floor(variant.price * 0.7 / 100) * 100;
            //   if (bp1 === bp2) bp2 = bp1 - 50;
            //   if (bp2 < 0) bp2 = 20;
            //   variant.bulk_pricing = [{
            //     "qty": 2,
            //     "price": bp1,
            //   },
            //   {
            //     "qty": 5,
            //     "price": bp2,
            //   }];
            // }
            // ==== END OF TEMPORARY TEST DATA
            
            
            for (n = 0; n < variant.bulk_pricing.length; n++) {
              if (variant.bulk_pricing[n+1]) {
                variant.bulk_pricing[n].maxQty = 
                                              variant.bulk_pricing[n+1].qty - 1;
              }
            }
          }
        }
      }
      else { // bulk_pricing_type is `none`
        for (j = 0; j < tpl[i].sizes.length; j++) {
          size = tpl[i].sizes[j];
          for (k = 0; k < size.variants.length; k++) {
            size.variants[k].bulk_pricing = [];
          }
        }
      }
    }
    return tpl;
  },
  
});
