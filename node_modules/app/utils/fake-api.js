"use strict";

// var console = require('app/utils/console-mock');

var _ = require('lodash');
var moment = require('moment');
var sinon = require('sinon');
var URI = require('URIjs');
var now = moment();
var uid = 0;

var headers = { "Content-Type": "application/json" };

var server = module.exports = sinon.fakeServer.create();
server.autoRespond = true;
server.autoRespondAfter = 750;

var performance = window.performance = window.performance || {};
var performanceNow = performance.now ? 'now' : performance.webkitNow ? 
    'webkitNow' : performance.mozNow ? 'mozNow' : performance.msNow ? 
    'msNow' : performance.oNow ? 'oNow' : null;
if (!performanceNow) {
  console.log('no performance timing');
  var time = function () {};
}
else {
  var time = function () { 
    return performance[performanceNow](); 
  };
}

function hundreads(num) {
  return Math.round(num * 100) / 100;
}

// server.respondWith(function (req, query) {
//   console.log('rq', req);
// });

function getBootstrap(query) {
  if (!query || !query.bootstrap) return {};
  var res = {};
  res.config = {
    // grid|list|login: what the visitors see when they visit the homepage
    style: 'grid',
    
    // date|name|type : Determines how the events are sorted by default
    sort: 'date', 
    
    // current|future|all : Determines which events are displayed by default
    filter: 'all', 
    
    // Boolean value that indicates whether the search area should be displayed
    display_search: true,
    
    // Boolean value that indicates whether the "Home" link should be displayed 
    display_home: false, 
    
    // Boolean value that indicates whether the "Home" link should be displayed
    display_custom: false, 
    
    // The text that should be displayed for the custom link
    display_custom_label: '',
    
    // The URL that clicking the custom link should take the user to 
    display_custom_url: '', 
    
    // whether clicking the logo should take visitor to the 
    // photographer's personal website
    link_to_company: false, 
    
    // indicates whether the products should be shown above (1) 
    // or below (0) the image categories within the event
    products_on_top: false, 
    
    // whether product names should be shown over the images in thumbnail view
    product_names: true,
    
    // none|view|custom|view_custom : Determines whether the visitor can 
    // select a crop for their ordered prints 
    custom_crop: 'none',
    
    // whether the storefront is in vacation mode. When in vacation mode, 
    // visitors can view the homepage as normal, but when an event is 
    // tried to be entered the user is shown a vacation message, is asked 
    // for their email address, and cannot view the images within the event 
    vacation: false, 
    
    // The message to display when the storefront is in vacation mode and a 
    // person tries to enter an event
    vacation_message: '', 
    
    // whether visitors can see the "Email Photo" option with the share links
    email_photo: false, 
    
    // Numeric value used to determine which sharing links 
    // (Facebook, Twitter, Digg, etc.) should be displayed with the images
    share_options: 0,
    
    // Displayed on the purchase page with options 
    // that have add-ons available for them 
    addon_label: '',
    
    // The minimum order size allowed before the "Checkout" 
    // option should be displayed 
    min_order: 1, 
    
    // Determines whether American Express card 
    // will be accepted on large orders (<$2000)
    allow_amex: true, 
    
    // Message to display if a person enters an event that contains no images
    empty_message: '', 
    
    // Message to display if a person enters an event that has expired
    expired_message: '', 
    
    // Message displayed on the receipt after an order is placed
    receipt_message: '', 
    
    // Description used in the <head> portion of the website
    meta_description: '', 
    
    // Text to display in place of "Sales Tax" on the checkout and receipt pages
    tax_label: '', 
  };
  
  // for (var i in res.config) {
  //   if (!res.config[i]) delete res.config[i];
  // }
  
  res.photographer = {
    company_name: 'Brand Name Photography', // The name of the company
    
    // contact person (generally the photographer)
    // first_name: '',
    // last_name: '',
    
    email: 'info@nstaproofs.com', // The photographer's email address
    phone: '(435) 258-6197', // The photographer's phone number
    storefront_url: 'http://www.instaproofs.com', // photographer's storefront
    facebook_url: 'http://www.facebook.com', // The company's facebook URL
    twitter_url: 'http://www.twitter.com', // The company's twitter URL
    linkedin_url: 'http://www.linkedin.com', // The company's linkedin URL
    instagram_url: 'http://www.instagram.com', // The company's instagram URL
    website_url: 'http://www.instaproofs.com', // The company's website URL
    address: 'PO BOX 14',
    city: 'St. George', // The city the company is located in
    state: 'Utah', // The state the company is located in
    zip: '84771',
    country: 'USA',
  };
  
  return res;
}

// Event List Request ========================================================
server.respondWith(/.*\/api\/events(\?.*)/, function (req, query) {
  // console.log('GET '+ req.url);
  // var _start = time();
  
  query = URI.parseQuery(query);
  var res = getBootstrap(query);
  var models = _.clone(events);
  
  
  // sort models
  if (query.sort === 'name') models.sort(comparators.name);
  else if (query.sort === 'type') models.sort(comparators.type);
  
  
  // filter models
  if (query.filter === 'showcased') {
    models = models.filter(function (model) {
      return model.showcase;
    });
  }
  else if (query.filter === 'upcoming') {
    models = models.filter(function (model) {
      return moment(model.date) > now;
    });
  }
  else if (query.filter === 'current') {
    models = models.filter(function (model) {
      return moment(model.date) <= now;
    });
  }
  
  res.complete = models.length <= +query.offset + (+query.limit);
  // console.log(+query.offset, +query.offset + (+query.limit));
  res.total_count = models.length;
  res.data = models.slice(+query.offset, +query.offset + (+query.limit));
  
  res = JSON.stringify(res);
  // var m = encodeURIComponent(res).match(/%[89ABab]/g);
  // console.log('unicode chars: '+ (m ? m.length : 0));
  var kb = hundreads(res.length / 1024) + ' KB';
  // console.log('response size: ' + kb);
  
  // console.log('response prepaired in '+ hundreads(time() - _start) +'ms');
  // _start = time();
  req.respond(200, headers, res);
  // console.log('response handled in '+ hundreads(time() - _start) +'ms');
});

// Single Event Request ======================================================
server.respondWith(/.*\/api\/events\/(\d+)(\?.*)?/, function (req, id, query) {
  // console.log('GET '+ req.url);
  // var _start = time();
  query = URI.parseQuery(query);
  var res = getBootstrap(query);
  var event = _.clone(_.findWhere(events, { id: +id }));
  
  for (var i = 0; i < event.categories.length; i++) {
    event.categories[i].prod_list = photos['cat'+ event.categories[i].id];
  }
  
  res.data = event;
  res = JSON.stringify(res);
  // console.log('response size: '+ hundreads(res.length / 1024) +' KB');
  // console.log('response prepaired in '+ hundreads(time() - _start) +'ms');
  // _start = time();
  req.respond(200, headers, res);
  // console.log('response handled in '+ hundreads(time() - _start) +'ms');
});

// var EventsCollection = require('app/models/events');
// var comparators = EventsCollection.prototype.comparators;
var comparators = {
  date: function (a, b) {
    return Date.parse(b.date) - Date.parse(a.date);
  },
  name: function (a, b) {
    var aName = a.name.toUpperCase();
    var bName = b.name.toUpperCase();
    if (aName === bName) return Date.parse(b.date) - Date.parse(a.date);
    if (aName > bName) return 1;
    if (aName < bName) return -1;
    return 0;
  },
  type: function (a, b) {
    var aType = a.type.toUpperCase();
    var bType = b.type.toUpperCase();
    if (aType === bType) return Date.parse(b.date) - Date.parse(a.date);
    else {
      if (aType > bType) return 1;
      if (aType < bType) return -1;
      return 0;
    }
  },
};
var eventID = 1;
var catID = 1;
var photoID = 1;

var events = [
  {
    id: eventID++,
    name: 'Neal & Emily', 
    img: 'img1.jpg', 
    date: '2014-11-20', 
    exp_date: '2015-03-20', 
    city: 'New York', 
    state: 'NY', 
    country: 'US',
    type: 'Wedding',
    type_id: 1, 
    password: false, 
    email: false, 
    show: true,
    display_image: true, 
    alias: '', 
    future: false, 
    showcase: true,
  },
  {
    id: eventID++,
    name: 'Anna', 
    img: 'img14.jpg', 
    date: '2014-11-04', 
    exp_date: '2015-03-20', 
    city: 'New York', 
    state: 'NY', 
    country: 'US',
    type: 'Bridal shower',
    type_id: 2, 
    password: false, 
    email: false, 
    show: true,
    display_image: true, 
    alias: '', 
    future: false, 
    showcase: true,
  },
  {
    id: eventID++,
    name: 'Owen', 
    img: 'img19.jpg', 
    date: '2014-11-03', 
    exp_date: '2015-03-20', 
    city: 'New York', 
    state: 'NY', 
    country: 'US',
    type: 'Birthday',
    type_id: 3, 
    password: false, 
    email: false, 
    show: true,
    display_image: true, 
    alias: '', 
    future: false, 
    showcase: true,
  },
  {
    id: eventID++,
    name: 'Jenson & Scarlet', 
    img: 'img2.jpg', 
    date: '2014-11-01', 
    exp_date: '2015-03-20', 
    city: 'New York', 
    state: 'NY', 
    country: 'US',
    type: 'Wedding',
    type_id: 1, 
    password: false, 
    email: false, 
    show: true,
    display_image: true, 
    alias: '', 
    future: false, 
    showcase: true,
  },
  {
    id: eventID++,
    name: 'Paul & Tiffany', 
    img: 'img3.jpg', 
    date: '2014-11-01', 
    exp_date: '2015-03-20', 
    city: 'New York', 
    state: 'NY', 
    country: 'US',
    type: 'Wedding',
    type_id: 1, 
    password: false, 
    email: false, 
    show: true,
    display_image: true, 
    alias: '', 
    future: false, 
    showcase: true,
  },
  {
    id: eventID++,
    name: 'Michael & Desiree',
    img: 'img4.jpg', 
    date: '2014-09-25', 
    exp_date: '2015-03-20', 
    city: 'New York', 
    state: 'NY', 
    country: 'US',
    type: 'Wedding',
    type_id: 1, 
    password: false, 
    email: false, 
    show: true,
    display_image: true, 
    alias: '', 
    future: false, 
    showcase: false,
  },
  {
    id: eventID++,
    name: 'Lorem ipsum dolor sit amet, consectetur adipisicing '+
          'elit sed do ANDY & LAURA',
    img: 'img5.jpg', 
    date: '2014-08-25', 
    exp_date: '2015-03-20', 
    city: 'New York', 
    state: 'NY', 
    country: 'US',
    type: 'Wedding',
    type_id: 1, 
    password: false, 
    email: false, 
    show: true,
    display_image: true, 
    alias: '', 
    future: false, 
    showcase: false,
  },
  {
    id: eventID++,
    name: 'Andy & Veronica', 
    img: 'img6.jpg', 
    date: '2014-08-24', 
    exp_date: '2015-01-10', 
    city: 'New York', 
    state: 'NY', 
    country: 'US',
    type: 'Wedding',
    type_id: 1, 
    password: false, 
    email: false, 
    show: true,
    display_image: true, 
    alias: '', 
    future: false, 
    showcase: false,
  },
  {
    id: eventID++,
    name: 'Chad & Emma', 
    img: 'img15.jpg', 
    date: '2014-08-23', 
    exp_date: '2015-01-10', 
    city: 'New York', 
    state: 'NY', 
    country: 'US',
    type: 'marriage proposal',
    type_id: 4, 
    password: true, 
    email: true, 
    show: true,
    display_image: true, 
    alias: '', 
    future: false, 
    showcase: true,
  },
  {
    id: eventID++,
    name: 'Lewis & Jane',
    img: 'img7.jpg', 
    date: '2014-08-18', 
    exp_date: '2015-01-10', 
    city: 'New York', 
    state: 'NY', 
    country: 'US',
    type: 'Wedding',
    type_id: 1, 
    password: true, 
    email: true, 
    show: true,
    display_image: true, 
    alias: '', 
    future: false, 
    showcase: false,
  },
  {
    id: eventID++,
    name: 'Mark & Erica',
    img: 'img16.jpg', 
    date: '2014-08-04', 
    exp_date: '2015-01-10', 
    city: 'New York', 
    state: 'NY', 
    country: 'US',
    type: 'marriage proposal',
    type_id: 4, 
    password: false, 
    email: false, 
    show: true,
    display_image: true, 
    alias: '', 
    future: false, 
    showcase: false,
  },
  {
    id: eventID++,
    name: 'Anthony & Sophie', 
    img: 'img8.jpg', 
    date: '2014-08-03', 
    exp_date: '2015-01-10', 
    city: 'New York', 
    state: 'NY', 
    country: 'US',
    type: 'Wedding',
    type_id: 1, 
    password: false, 
    email: false, 
    show: true,
    display_image: true, 
    alias: '', 
    future: false, 
    showcase: false,
  },
  {
    id: eventID++,
    name: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do '+
          'eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut '+
          'enim ad minim veniam, quis nostrud exercitation.',
    img: 'img9.jpg', 
    date: '2014-08-10', 
    exp_date: '2015-03-20', 
    city: 'New York', 
    state: 'NY', 
    country: 'US',
    type: 'Wedding',
    type_id: 1, 
    password: false, 
    email: false, 
    show: true,
    display_image: true, 
    alias: '', 
    future: false, 
    showcase: false,
  },
  {
    id: eventID++,
    name: 'Patricik & Jackie', 
    img: 'img10.jpg', 
    date: '2014-08-24', 
    exp_date: '2015-01-10', 
    city: 'New York', 
    state: 'NY', 
    country: 'US',
    type: 'Wedding',
    type_id: 1, 
    password: false, 
    email: false, 
    show: true,
    display_image: true, 
    alias: '', 
    future: false, 
    showcase: false,
  },
  {
    id: eventID++,
    name: 'Chad & Desiree', 
    img: 'img17.jpg', 
    date: '2014-08-23', 
    exp_date: '2015-01-10', 
    city: 'New York', 
    state: 'NY', 
    country: 'US',
    type: 'marriage proposal',
    type_id: 4, 
    password: false, 
    email: false, 
    show: true,
    display_image: true, 
    alias: '', 
    future: false, 
    showcase: true,
  },
  
  {
    id: eventID++,
    name: 'John & Jessica', 
    img: 'img18.jpg', 
    date: '2013-12-20', 
    exp_date: '2015-01-10', 
    city: 'New York', 
    state: 'NY', 
    country: 'US',
    type: 'marriage proposal',
    type_id: 4, 
    password: false, 
    email: false, 
    show: true,
    display_image: true, 
    alias: '', 
    future: false, 
    showcase: false,
  },
  {
    id: eventID++,
    name: 'Tyler & Kim', 
    img: 'img12.jpg', 
    date: '2013-12-04', 
    exp_date: '2015-01-10', 
    city: 'New York', 
    state: 'NY', 
    country: 'US',
    type: 'Wedding',
    type_id: 1, 
    password: false, 
    email: false, 
    show: true,
    display_image: true, 
    alias: '', 
    future: false, 
    showcase: false,
  },
];
var photos = {};

var len = +events.length;
var clone;
var names1 = ['John', 'Tyler', 'Andy', 'Anthony', 'Chad', 'Jenson', 
              'Lewis', 'Mark', 'Max', 'Bob', 'Bill', 'Josh', 'Mike'];
var names2 = ['Anna', 'Vera', 'Sophie', 'Lara', 'Faith', 'Elisabeth', 'Jane', 
              'Jessica', 'Kate', 'Jenna', 'Emma', 'Angelina', 'Lucy', 'Mira'];

var names1I = 0;
var names2I = 0;
for (var i = 0; i < 3; i++) {
  for (var n = 0; n < len; n++) {
    // if (/Birthday|Bridal Shower/i.test(events[n].type)) continue;
    clone = _.clone(events[n]);
    clone.id = eventID++;
    clone.date = '2013-'+ (11-i < 10 ? '0'+ (11-i) : 11-i) +'-05';
    clone.password = clone.password ? i === 1 : false;
    clone.email = clone.password;
    // clone.img = 'img' + rand(20, 1) + '.jpg';
    // console.log((names1.length + names1I) % names1.length, (names2.length + names2I) % names2.length);
    clone.name = 
        names1[(names1.length + names1I++) % names1.length] +' & '+ 
        names2[(names2.length + names2I++) % names2.length];
    events.push(clone);
  }
}


// events.sort(comparators.date);

events.forEach(function (event, index) {
  for (var x in event) {
    if (!event[x]) {
      delete event[x];
    }
  }
  var i, n, m;
  event.img_path = '/img/pics/events/1/';
  var catTitles = ['Bride & Groom', 'Family Formals', 'Rose Ceremony',
      'Declaration of Intent',
      'Lighting of the Unity Candle', 'Exchange of Vows', 
      'Bridal Processional', 'Exchange of Rings', 'Recessional'];
  var photoTitles = ['Bride & Groom', 'Family Formals', 'Rose Ceremony',
      'Declaration of Intent',
      'Lighting of the Unity Candle', 'Exchange of Vows', 
      'Bridal Processional', 'Exchange of Rings', 
      'A pretty long title of a photo to see how it goes here'];
  var tracks = [
    // '/audio/Sketch-7.mp3',
    '/audio/01_Sleepwalker.mp3',
    '/audio/05_Morning_Talk_Supersymmetry.mp3',
    '/audio/06_Some_Other_Place.mp3',
    '/audio/07_Song_On_The_Beach.mp3',
    '/audio/13_Dimensions.mp3',
    // '/audio/between_the_lines.mp3',
    '/audio/days_to_come.mp3',
    '/audio/going_brown_again.mp3',
    // '/audio/so-it-goes.mp3',
    '/audio/steel_for_pappa.mp3',
    '/audio/tomorrow_untrodden.mp3',
    '/audio/track1.mp3',
  ];   
  
  // var catsNum = rand(catTitles.length, 2);
  var catsNum = index % (catTitles.length-1) + 2;
  event.categories = [];
  for (i = 0; i < catsNum; i++) {
    // var photosStart = rand(71, 1);
    var photosStart = (71 + event.id * catID * 2) % 71 + 1;
    // var photosEnd = rand(40, 71);
    // var photosEnd = rand(40, 350)
    var photosNum = (40 + event.id * i * 3) % 250;
    if (photosNum < 20) photosNum = 20;
    var photosEnd = photosStart + photosNum;
    // if (photosEnd - photosStart < 20) photosEnd = photosStart + 20;
    // photosStart = 1;
    // photosEnd = 71;
    event.categories[i] = {
      id: catID++,
      name: catTitles[i],
      img_count: photosEnd - photosStart + 1,
      music: event.id % 3 === 2 ? tracks[event.id % tracks.length] :
             event.id % 3 !== 0 ? tracks[catID % tracks.length] : '',
      // prod_list: [],
      // img_path: '/img/pics/events/1/',
    };
    
    photos['cat'+ event.categories[i].id] = [];
    // for (x = 0; x < 10; x++) 
    for (n = photosStart; n <= photosEnd; n++) {
      m = (70 + n) % 71 + 1;
      photos['cat'+ event.categories[i].id].push({
      // event.categories[i].prod_list.push({
        id: photoID++,
        // name: 'Image ' +m+ (m % 3 === 0 ? ': '+ photoTitles[(m / 3) % photoTitles.length] : ''),
        name: m % 3 === 0 ? photoTitles[(m / 3) % photoTitles.length] : '',
        // desc: "Image Description shouldn't be much longer than this",
        // displayed: true,
        // fav_id: 0,
        // can_hide: false,
        // hidden: false,
        download: m % 4 === 0,
        // product: false,
        orig_width: /^(1|3|4|5|13|16|17|18|19|20|42)$/.test(m) ? 1280 : 941,
        orig_height: /^(1|3|4|5|13|16|17|18|19|20|42)$/.test(m) ? 941 : 1280,
        // orig_width: /^(1|3|4|5|13|16|17|18|19|20|42)$/.test(m) ? 2560 : 1882,
        // orig_height: /^(1|3|4|5|13|16|17|18|19|20|42)$/.test(m) ? 1882 : 2560,
        // orig_width: /^(1|3|4|5|13|16|17|18|19|20|42)$/.test(m) ? 640 : 470,
        // orig_height: /^(1|3|4|5|13|16|17|18|19|20|42)$/.test(m) ? 470 : 640,
        // file_name: 'img'+ m +'.jpg'+ (m === 1 ? 'noop' : '') +'?'+ (uid++),
        file_name: 'img'+ m +'.jpg?'+ (uid++),
        // featured: /^(1|3|5|16|20|42|47|48|54|62|50|70)$/.test(n),
      });
    }
  }
});
