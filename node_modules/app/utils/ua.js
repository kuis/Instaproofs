/*==========================================================================*\
  UA detection
\*==========================================================================*/
"use strict"; 

var userAgent = window.navigator.userAgent;

var ua = module.exports = {
  ios: /iPad|iPhone|iPod/i.test(userAgent),
  ie8: !!window.ie8, // set from an IE conditional comment
  ie9: !!window.ie9, // set from an IE conditional comment
  android: /android/i.test(userAgent),
  chrome: /Chrome|CriOS/.test(userAgent),
  ie: /MSIE|Trident|IEMobile/i.test(userAgent),
  mobileIE: userAgent.indexOf('IEMobile') > -1,
  ff: /Firefox|Gecko\/\d+/i.test(userAgent),
};
// console.log('ua', userAgent);

ua.standalone = (ua.ios || ua.android) && 
    (!!window.navigator.standalone || 
    (ua.android && ua.chrome && 
    (screen.height - document.documentElement.clientHeight < 40)));

// a lot of iOS browsers are undestiguishable from safari,
// but we do our best to filter out the ones that are 
ua.mobileSafari = ua.ios && /Safari/i.test(userAgent) && !ua.chrome 
    && !/Mercury|YaBrowser|Opera/i.test(userAgent);

    
// Define mobile browsers as small screens with multi-touch support
// These browsers may not be fully usable without touch
// so best cover less than more 
ua.mobile = ua.ios || ua.android || ua.mobileIE ||
                screen.height <= 1024 && screen.width <= 1024 && 
                (('ontouchstart' in window) || navigator.msMaxTouchPoints >= 2);
ua.desktop = !ua.mobile;

var version = userAgent.match(/(OS|Android) (\d+)/);
version = version && version[2] ? +version[2] : 0;

var docClass = [];
docClass.push(ua.mobile ? 'mobile-ua' : 'desktop-ua');

if (ua.ios) docClass.push('ios');
if (ua.ios && version === 7) { ua.ios7 = true; docClass.push('ios7'); }
if (ua.ios && version === 8) { ua.ios8 = true; docClass.push('ios8'); }
if (ua.android) docClass.push('android');
if (ua.chrome) docClass.push('chrome');
if (ua.mobileSafari) docClass.push('safari');
if (ua.standalone) docClass.push('standalone');
if (ua.ff) docClass.push('firefox');

ua.className = docClass.join(' ');






/*==========================================================================*\
  get prefixed CSS propertiy names
\*==========================================================================*/

  
var style = document.documentElement.style;
var prefixes = ['ms', 'Ms', 'Webkit', 'webkit', 'Moz', 'moz', 'o', 'O'];
function getSupportedPropertyName(property) {
  if (property in style) return property;
  property = property.charAt(0).toUpperCase() + property.substr(1);
  for (var i = 0; i < prefixes.length; i++) {
    if ( (prefixes[i] + property) in style) {
      return prefixes[i] + property;
    }
  }
  return null;
}
function getSupportedEventName(names) {
  var capitalized;
  for (var i = 0; i < names.length; i++) {
    if ( ('on' + names[i]) in document.documentElement) {
      return names[i];
    }
    capitalized = names[i].charAt(0).toUpperCase() + names[i].substr(1);
    if ( ('on' + capitalized) in document.documentElement) {
      return capitalized;
    }
  }
  return null;
}
 
ua.css = {};
ua.events = {};

ua.css.animation = getSupportedPropertyName('animation');
ua.css.transform = getSupportedPropertyName('transform');
ua.css.transition = getSupportedPropertyName('transition');
ua.css.transitionDuration = getSupportedPropertyName('transitionDuration');
ua.css.transitionEasing = getSupportedPropertyName('transitionTimingFunction');

ua.events.transitionEnd = getSupportedEventName(
                                ['transitionend', 'transitionEnd', 'webkitTransitionEnd', 
                                'oTransitionEnd', 'otransitionend']);

ua.events.animationEnd = getSupportedEventName(
                                ['animationend', 'animationEnd', 'webkitAnimationEnd', 
                                'oAnimationEnd', 'oanimation']);

var transEndEventNames = {
  'WebkitTransition' : 'webkitTransitionEnd',
  'webkitTransition' : 'webkitTransitionEnd',
  'MozTransition'    : 'transitionend',
  'mozTransition'    : 'transitionend',
  'OTransition'      : 'oTransitionEnd otransitionend',
  'msTransition'     : 'MSTransitionEnd',
  'transition'       : 'transitionend'
};
if (!ua.events.transitionEnd && ua.css.transition &&
    transEndEventNames[ua.css.transition]) {
  ua.events.transitionEnd = transEndEventNames[ua.css.transition];
} 

var animEndEventNames = {
  'WebkitAnimation' : 'webkitAnimationEnd',
  'webkitAnimation' : 'webkitAnimationEnd',
  'MozAnimation'    : 'animationend',
  'mozAnimation'    : 'animationend',
  'OAnimation'      : 'oAnimationEnd',
  'msAnimation'     : 'MSAnimationEnd',
  'animation'       : 'animationend'
};
if (!ua.events.animationEnd && ua.css.animation &&
    animEndEventNames[ua.css.animation]) {
  ua.events.animationEnd = animEndEventNames[ua.css.animation];
} 

if (ua.ie8 || ua.ie9) {
  ua.css.transform = null;
  ua.css.transition = null;
}

// console.log('transform: ' + ua.css.transform);
// console.log('transition: ' + ua.css.transition);
// console.log('transitionDuration: ' + ua.css.transitionDuration);
// console.log('transitionEasing: ' + ua.css.transitionEasing);
// console.log('transitionEnd: ' + ua.events.transitionEnd);
if (!ua.css.transition || !ua.css.transitionDuration ||
    !ua.css.transitionEasing || !ua.events.transitionEnd) {
  ua.css.transition = ua.css.transitionDuration =
  ua.css.transitionEasing = ua.events.transitionEnd = null;
}



// keyframe animation ======================================================
var wp = window.performance;
var now = wp && (wp.now || wp.webkitNow || wp.msNow || wp.mozNow || wp.oNow);
ua.performanceNow = !!now;
ua.now = now && now.bind(wp) || Date.now;

ua.raf = window.requestAnimationFrame || 
    window.webkitRequestAnimationFrame || 
    window.oRequestAnimationFrame || 
    window.msRequestAnimationFrame || 
    (window.mozCancelRequestAnimationFrame && window.mozRequestAnimationFrame);
ua.caf = window.cancelAnimationFrame || 
    window.webkitCancelAnimationFrame ||
    window.webkitCancelRequestAnimationFrame || 
    window.mozCancelRequestAnimationFrame ||
    window.cancelRequestAnimationFrame;
if (!ua.raf || !ua.caf) {
  ua.raf = function (fn) {
    return window.setTimeout(fn, 16);
  };
  ua.caf = window.clearTimeout;
}
else {
  ua.raf = ua.raf.bind(window);
  ua.caf = ua.caf.bind(window);
}


/*==========================================================================*\
  Fullscreen
\*==========================================================================*/
var html = document.documentElement;
ua.requestFullscreen = html.requestFullscreen || html.webkitRequestFullscreen ||
    html.webkitRequestFullScreen || html.mozRequestFullscreen ||
    html.mozRequestFullScreen || html.msRequestFullscreen ||
    html.msRequestFullScreen || html.oRequestFullscreen ||
    html.oRequestFullScreen;
if (ua.requestFullscreen) ua.requestFullscreen = ua.requestFullscreen.bind(html);
ua.exitFullscreen = html.exitFullscreen || html.exitFullscreen ||
    html.webkitExitFullScreen || html.webkitExitFullscreen ||
    html.mozExitFullScreen || html.mozExitFullscreen ||
    html.msExitFullScreen || html.msExitFullscreen ||
    html.oExitFullScreen || html.oExitFullscreen;
if (ua.exitFullscreen) {
  ua.exitFullscreen = ua.exitFullscreen.bind(html);
}
else {
  ua.exitFullscreen = 
    document.exitFullscreen || document.exitFullscreen ||
    document.webkitExitFullScreen || document.webkitExitFullscreen ||
    document.mozExitFullScreen || document.mozExitFullscreen ||
    document.mozCancelFullScreen || document.mozCancelFullscreen ||
    document.msExitFullScreen || document.msExitFullscreen ||
    document.oExitFullScreen || document.oExitFullscreen;
  if (ua.exitFullscreen) ua.exitFullscreen = ua.exitFullscreen.bind(document);
}
