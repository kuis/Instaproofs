/*==========================================================================*\
  Simple switching of Ampersand views within a container
  
  Simple usage example:
    var pageSwitcher = new ViewSwitcher(containerEl);
    pageSwitcher.set(newPageView);
  
  Default switcher will simply replace the views synchronously.
  Custom switcher can be set either through constructor:
    var pageSwitcher = new ViewSwitcher(el, function (done, newView, oldView) {
      ...
      done();
    });
  
  ... or through .extend:
    var PageSwitcher = ViewSwitcher.extend({
      switcher: function (done, newView, oldView) { ... done(); }
    });
    
  First argument passed to the switcher is a callback that must be called 
  when your switcher is done.
  
  Your custom switcher will also receive a second argument passed to .set():
    var PageSwitcher = ViewSwitcher.extend({
      switcher: function (done, newView, oldView, options) { 
        ... 
        done();
      }
    });
    var pageSwitcher = new PageSwitcher(el);
    pageSwitcher.set(newPageView, options);
    
\*==========================================================================*/
"use strict";

var Class = require('class.extend');
var Events = require('backbone-events-standalone');
var app = require('app');
var schedule = require('app/utils/schedule');

module.exports = Class.extend(Events.mixin({
  
  // the constructor =========================================================
  init: function ViewSwitcher(el, switcher) {
    this.el = el;
    this.previous = [];
    if (typeof switcher === 'function') this.switcher = switcher;
    this._onAfterSwitch = this._onAfterSwitch.bind(this);
  },
  
  
  // set a new active view and switch ========================================
  set: function (view, options) {
    if (this.current === view) return;
    if (!view) return this.clear();
    
    // if (this.previous) this.previous.remove('high');
    // this.previous = this.current;
    this.previous.unshift(this.current);
    
    this.current = view;
    view.once('remove', this._onViewRemove, this);
    
    this._switch(options);
  },
  
  
  // clear the container =====================================================
  clear: function () {
    if (this.current) this.current.remove();
    // if (this.previous) this.previous.remove();
    if (this.previous.length) for (var i = 0; i < this.previous.length; i++) {
      this.previous[i].remove();
    } 
    this.current = null;
    this.previous = [];
    this.trigger('clear');
  },
  
  
  // a custom switcher that can be overwritten either from constructor =======
  // or through .extend()
  switcher: function (done) { done(); },
  
  
  // do the switch ===========================================================
  _switch: function (options) {
    if (!this.current.rendered) this.current.render({ containerEl: this.el });
    schedule(function () {
      this.el.appendChild(this.current.el);
    }, 'high', this);
    
    var self = this;
    setTimeout(function () {
      self.switcher(self._onAfterSwitch, self.current, 
                    self.previous[0], options);
    }, 112);
  },
  
  
  // remove the old view and fire an event ===================================
  _onAfterSwitch: function () {
    var prev = this.previous[0];
    for (var i = 0; i < this.previous.length; i++) {
      if (this.previous[i]) {
        this.previous[i].remove(app.state.noTransitions && 'high');
      }
    }
    this.previous = [];
    this.trigger('switch', this.current, prev);
  },
     
     
  // clear links to removed views ============================================
  _onViewRemove: function (view) {
    if (this.current === view) {
      this.current = null;
    }
    var prevIndex = this.previous.indexOf(view);
    if (prevIndex > -1) {
      this.previous.splice(prevIndex, 1);
    }
    // if (this.previous === view) {
    //   this.previous = null;
    // }
  },
}));
