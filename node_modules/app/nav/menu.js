/*==========================================================================*\
  Dropdown menu for the header navbar
\*==========================================================================*/
"use strict";

var app = require('app');
var BaseView = require('app/base/base-view');
var FaqPopup = require('app/misc-popup/faq-popup');
var ContactPopup = require('app/misc-popup/contact-popup');
var OrderStatusPopup = require('app/misc-popup/order-status-popup');

window.toggleScheme = function () {
  app.state.darkMode = !app.state.darkMode;
  app.storage.darkMode = app.state.darkMode ? '1' : '';
  return 'Switched to '+ (app.state.darkMode ? 'dark' : 'light') + 
         ' color scheme';
};
window.toggleTransitions = function () {
  app.state.noTransitions = !app.state.noTransitions;
  app.storage.noTransitions = app.state.noTransitions ? '1' : '';
  window.location.reload();
  return 'Page transitions are '+ (app.state.noTransitions ? 'off' : 'on');
};

module.exports = BaseView.extend({
  dictionary: 'nav',
  // autoRender: true,
  template: require('app/templates').nav.menu,

  props: {
    isHome: ['boolean', true, false]
  },

  derived: {
    displayHome: {
      deps: ['isHome'],
      fn: function () {
        return app.config.display_home && !this.isHome;
      },
    }
  },
  
  events: {
    // 'click .color-scheme': 'toggleScheme',
    // 'click .transitions': 'toggleTransitions',
    'click .home': 'showHome',
    'click .faq': 'showFaq',
    'click .contact': 'showContacts',
    'click .order-status': 'showOrderStatus',
  },
  
  bindings: {
    // 'model.darkMode': {
    //   type: function (el, val) {
    //     el.textContent = val ? 'Switch to light color scheme'
    //                          : 'Switch to dark color scheme';
    //   },
    //   selector: '.color-scheme',
    // },
    // 'model.noTransitions': {
    //   type: function (el, val) {
    //     el.textContent = val ? 'Turn on page transitions'
    //                          : 'Turn off page transitions';
    //   },
    //   selector: '.transitions',
    // },
    displayHome: {
      type: 'booleanClass',
      selector: '.home',
      name: 'hidden',
      invert: true
    }
  },
  
  initialize: function () {
    BaseView.prototype.initialize.apply(this, arguments);

    var self = this;
    
    if (app.state.bootstrapped) {
      this.render();
    }
    else {
      this.renderWithTemplate('');
      app.state.on('change:bootstrapped', function () {
        self.render();
      });
    }

    self.isHome = app.state.isHome;
    app.state.on('change:isHome', function (state, val) {
      self.isHome = val;
    });
  },

  showHome: function (e) {
    this.parent.menuDisplayed = false;
    app.router.redirectTo('events');
  },
  showPopup: function (popup, e) {
    if (e && e.preventDefault) e.preventDefault();
    document.body.insertBefore(popup.el, document.getElementById('popup'));
    this.parent.menuDisplayed = false;
    return false;
  },
  showFaq: function (e) { return this.showPopup(new FaqPopup(), e); },
  showContacts: function (e) { return this.showPopup(new ContactPopup(), e); },
  showOrderStatus: function (e) { 
    return this.showPopup(new OrderStatusPopup(), e);
  },
  
  
});

