/*==========================================================================*\
  Fixed header navbar
\*==========================================================================*/
"use strict";

var BaseView = require('app/base/base-view');
var MenuView = require('./menu');
var SiteNoticesView = require('app/notice/nav-notices');
var ViewSwitcher = require('app/util/view-switcher/view-switcher');

var app = require('app');
var debounce = require('lodash.debounce');

module.exports = BaseView.extend({
  dictionary: 'nav',
  // autoRender: true,
  template: require('app/templates').nav.nav,
  
  events: {
    // 'click a': 'onLinkClick',
    'click a.menu': 'toggleMenu',
    'click a.search': 'toggleSearch',
    'click a.warning': 'toggleNotices',
    'click .search-bar .cancel': 'quitSearch',
    
    'keyup .search-bar input': 'onSearchChange',
    'paste .search-bar input': 'onSearchChange',
    'change .search-bar input': 'onSearchChange',
  },
  
  props: {
    menuDisplayed: ['boolean', true, false],
    searchDisplayed: ['boolean', true, false],
    noLogo: ['boolean', true, false],
    searchString: ['string', true, ''],
    searchLoading: ['boolean', true, false],
  },
  
  bindings: {
    searchString: {
      type: function (el, val) {
        app.state.eventsSearchString = val.length >= 3 ? val : '';
      },
    },
    menuDisplayed: {
      type: 'booleanClass',
      name: 'menu-displayed',
    },
    searchDisplayed: {
      type: 'booleanClass',
      name: 'search-displayed',
    },
    searchLoading: {
      type: 'booleanClass',
      name: 'search-loading',
    },
    noLogo: {
      type: 'booleanClass',
      name: 'no-logo',
    },
  },
  
  initialize: function () {
    BaseView.prototype.initialize.apply(this, arguments);
    
    this.onSearchChange = debounce(this.onSearchChange, 500);
    
    // this.renderWithTemplate();
    this.el.innerHTML = this.template();
    this.cacheElements({
      searchInput: '.search-bar input',
    });
    this.viewSwitcher = new ViewSwitcher(this.query('.contents'), 
        function (done, newView, oldView) {
      setTimeout(function () {
        done();
      }, 300);
      newView.el.classList.remove('hidden');
      if (oldView) oldView.el.classList.add('hidden');
    });
    
    this.siteNotices = new SiteNoticesView({
      model: app.state,
      parent: this,
    });
    this.query('.body').appendChild(this.siteNotices.el);
    
    this.readAfter(100, function () {
      var self = this;
      app.view.el.addEventListener('click', function (e) {
        if (self.menuDisplayed && !e.target.closest('.nav-menu') && 
            !e.target.closest('nav .menu')) {
          self.menuDisplayed = false;
        }
        if (self.searchDisplayed && !e.target.closest('#nav .search') && 
            !e.target.closest('nav .search-bar') && 
            !e.target.closest('nav .search-bar .cancel')) {
          self.quitSearch();
        }
      }, false);
    });
    
    if (!app.state.bootstrapped) {
      this.listenToOnce(app.state, 'change:bootstrapped', function () {
        this.query('.logo').href = app.config.logo_link;
        this.query('.logo img').src = app.config.logo_url;
      });
    }
    
    
    
    // this.after(100, function () {
    //   this.query('.logo').addEventListener('click', function (e) {
    //     app.state.darkMode = !app.state.darkMode;
    //     app.storage.darkMode = app.state.darkMode ? '1' : '';
    //     e.preventDefault();
    //     return false;
    //   }, false);
    //   // this.query('.cart').addEventListener('click', function (e) {
    //   //   app.state.noTransitions = !app.state.noTransitions;
    //   //   app.storage.noTransitions = app.state.noTransitions ? '1' : '';
    //   //   e.preventDefault();
    //   //   window.location.reload();
    //   //   return false;
    //   // }, false);
    // });
  },
  
  setContents: function (newView) { // set nav contents view
    this.viewSwitcher.set(newView);
  },
  
  onLinkClick: function (e) {
    e.stopPropagation();
    
    if (e.target.closest('.menu')) {
      this.toggleMenu();
    }
  },
  
  onSearchChange: function (e) {
    if (e && e.keyCode === 27) return this.quitSearch();
    var str = this.searchInput.value;
    this.searchString = str.length >= 3 ? str : '';
  },
  
  initMenu: function () {
    this.menu = new MenuView({
      model: app.state,
      parent: this,
    });
    this.query('.body').appendChild(this.menu.el);
  },
  
  toggleMenu: function (e) {
    if (e && e.preventDefault) {
      e.stopPropagation();
      e.preventDefault();
    }
    if (!this.menu) {
      this.initMenu();
      this.after(50, this.toggleMenu);
      return;
    }
    this.menuDisplayed = !this.menuDisplayed;
    if (this.menuDisplayed) {
      if (app.state.noticesDisplayed) app.view.hideNotices();
      if (this.searchDisplayed) this.quitSearch();
    }
  },
  toggleNotices: function (e) {
    if (e && e.preventDefault) {
      e.stopPropagation();
      e.preventDefault();
    }
    if (app.state.noticesDisplayed) app.view.hideNotices();
    else {
      app.state.noticesDisplayed = true;
      if (this.menuDisplayed) this.toggleMenu();
      if (this.searchDisplayed) this.quitSearch();
    }
  },
  toggleSearch: function (e) {
    if (e && e.preventDefault) {
      e.stopPropagation();
      e.preventDefault();
    }
    if (this.searchDisplayed) {
      this.searchInput.value = '';
      this.searchInput.blur();
    }
    this.searchDisplayed = !this.searchDisplayed;
    if (this.searchDisplayed) {
      this.searchInput.focus();
      if (this.menuDisplayed) this.toggleMenu();
      if (app.state.noticesDisplayed) app.view.hideNotices();
    }
  },
  quitSearch: function (e) {
    if (e && e.preventDefault) {
      e.stopPropagation();
      e.preventDefault();
    }
    if (this.searchDisplayed) this.toggleSearch();
    this.searchString = '';
    this.searchLoading = false;
  },
});

