/*==========================================================================*\
  Base view to be extended by all others
\*==========================================================================*/
"use strict";

var $ = require('jquery');
var dom = require('app/utils/dom');
var schedule = require('app/utils/schedule');
var ua = require('app/utils/ua');

module.exports = require('ampersand-view').extend({
  extraProperties: 'allow',
  
  $: function (selector) {
    return $(selector, this.el);
  },
  
  initialize: function () {
    this.schedules = [];
  },
  
  
  // rewrite remove to simply remove the element without taking the view apart
  remove: function (priority) {
    if (this.el && this.el.parentNode) {
      if (priority === 'now') this.el.parentNode.removeChild(this.el);
      else {
        this.scheduleWrite(function () {
          if (this.el.parentNode) this.el.parentNode.removeChild(this.el);
        }, priority);
      }
    }
    // this.trigger('remove', this);
    return this;
  },
  
  
  // setTimeout with callback bound to this view =============================
  after: function (ms, fn) {
    return setTimeout(fn.bind(this), ms);
  },
  
  
  // request animation frame with callback bound to this view ================
  raf: function (fn) {
    return ua.raf(fn.bind(this));
  },
  
  
  // run a function on next frame ============================================
  schedule: function (fn, priority) {
    var id = schedule(fn, priority, this);
    // this.schedules.push(id);
    return id;
  },
  
  // cancel scheduled run ====================================================
  unschedule: function (id) {
    schedule.unschedule(id);
    return this;
  },
  
  
  // schedule a DOM read before the next frame draw and scheduled writes ===== 
  scheduleRead: function (fn) {
    var id = dom.scheduleRead(fn, this);
    // this.schedules.push(id);
    return id;
  },
  
  
  // schedule DOM write before the next frame draw and after all scheduled reads
  scheduleWrite: function (fn, priority) {
    var id = dom.scheduleWrite(fn, priority, this);
    // this.schedules.push(id);
    return id;
  },
});
