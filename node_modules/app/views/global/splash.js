/*==========================================================================*\
  Splash Screen
\*==========================================================================*/
"use strict";

var app = require('app');
var ua = require('app/utils/ua');
var Parent = require('app/views/base-view');

module.exports = Parent.extend({
  
  rafID: null,
  lastFrameTime: null,
  frameRates: null,
  
  initialize: function () {
    Parent.prototype.initialize.apply(this, arguments);
    
    var self = this;
    this.frameRates = [];
    this.onAppReady = this.onAppReady.bind(this);
    this.onTransitionEnd = this.onTransitionEnd.bind(this);
    this.measureFPS = this.measureFPS.bind(this);
    
    app.state.splashState = 'locked';
    app.ready(function () {
      self.scheduleWrite(self.onAppReady);
    });
  },
  
  
  events: {
    'click': 'hide',
    'mousewheel': 'hide',
    'wheel': 'hide',
    'scroll': 'hide',
    'touchstart': 'touchstart',
    'touchmove': 'touchmove',
    'touchend': 'touchend',
  },
  
  hide: function (e) {
    if (!app.isReady || this.unlocked) return;
    // if (!this.rafID) this.rafID = ua.raf(this.measureFPS);
    this.unlocked = true;
    if (ua.desktop) this.scheduleWrite(function () {
      app.state.splashState = 'unlocked';
    }, 'high');
    else app.state.splashState = 'unlocked';
    setTimeout(this.onTransitionEnd, 1000); // a fallback just in case 
    
    if (e && e.preventDefault) e.preventDefault();
    if (e && e.stopPropagation) e.stopPropagation();
    return false;
  },
  
  onAppReady: function () {
    if (app.currentPage.pageType.substr(0, 5) === 'event') {
      var event = app.currentPage.model;
      this.query('.label').innerHTML = 
          '<h1>'+ event.name +'</h1>'+
          '<div class="date">'+ event.date.format("MMMM Do, YYYY") +'</div>'+
          '<div class="type">'+ event.type +'</div>'+
          '<div class="arrow"></div>';
    }
    else {
      this.query('.prompt').innerHTML = ua.mobile
          ? '<div><span>Slide Up</span></div>'
          : '<div><span>Scroll Down</span></div>';
    }
    
    this.el.classList.add('loaded');
  },
  
  
  onTransitionEnd: function (e) {
    if (!this.unlocked || (e && e.target && e.target.id !== 'splash')) return;
    if (!app.state.splashState) return;
    this.remove();
    app.state.splashState = '';
    
    // avoid a webkit bug with disappearing scrollbar
    if (!app.state.noTransitions) {
      app.currentPage.el.style[ua.css.transform] = 'translateY(0)';
    }
  },
  
  measureFPS: function (time) {
    time = typeof time === 'number' ? time : ua.now();
    var rate;
    if (app.state.splashState) this.rafID = ua.raf(this.measureFPS);
    else {
      var sum = 0;
      var min = 0;
      this.frameRates = this.frameRates.slice(2, -1);
      for (var i = 0; i < this.frameRates.length; i++) {
        sum += this.frameRates[i];
        if (this.frameRates[i] > min) min = this.frameRates[i];
      }
      rate = sum / this.frameRates.length;
      console.log('Average FPS: '+ (Math.round(1000 / rate * 100) / 100));
      console.log('Minimum FPS: '+ (Math.round(1000 / min * 100) / 100));
      return;
    }
    if (!this.lastFrameTime) {
      this.lastFrameTime = time;
      return;
    }
    rate = time - this.lastFrameTime;
    this.lastFrameTime = time;
    if (rate < 80) this.frameRates.push(rate);
    console.log('FPS: '+ (Math.round(100 * 1000 / rate) / 100));
  },
  
  touchstart: function (e) {
    if (app.isReady && !this.unlocked) {
      this.gesture = {
        startY: e.touches[0].clientY,
        y: e.touches[0].clientY,
        winHeight: document.documentElement.clientHeight,
      };
      this.el.style[ua.css.transition] = 'none';
      app.currentPage.el.style[ua.css.transition] = 'none';
    }
    e.preventDefault();
  },
  touchmove: function (e) {
    if (this.unlocked) return e.preventDefault();
    var dy = e.touches[0].clientY - this.gesture.startY;
    this.gesture.direction = e.touches[0].clientY - this.gesture.y;
    this.gesture.y = e.touches[0].clientY;
    if (dy > 0) dy = 0;
    this.el.style[ua.css.transform] = 'translate3d(0,'+ dy +'px,0)';
    // app.currentPage.el.style.opacity = 
    //     0.5 + Math.abs(0.5 * dy / this.gesture.winHeight);
    if (app.state.noTransitions) {
      app.currentPage.el.style.opacity = Math.abs(dy / this.gesture.winHeight);
    }
    else {
      app.currentPage.el.style[ua.css.transform] = 
          'scale('+ (0.5 + Math.abs(0.5 * dy / this.gesture.winHeight)) +')';
    }
    
    // app.currentPage.el.style[ua.css.transform] = 
    //     'translate3d(0,'+ (200 + 200 * dy / this.gesture.winHeight) +'px,0)';
    e.preventDefault();
  },
  touchend: function (e) {
    if (this.unlocked) return e.preventDefault();
    var g = this.gesture;
    // this.el.removeAttribute('style');
    this.el.style[ua.css.transform] = null;
    this.el.style[ua.css.transition] = null;
    app.currentPage.el.removeAttribute('style');
    if (g.direction < 0) {
      this.el.style[ua.css.transitionDuration] = 
          ((g.winHeight - Math.abs(g.y - g.startY)) / g.winHeight * 400) +'ms';
      this.hide();
    }
    else {
      this.el.style[ua.css.transitionDuration] = 
          (Math.abs(g.y - g.startY) / g.winHeight * 400) +'ms';
    }
    e.preventDefault();
  },
  
});

module.exports.prototype.events[ua.events.transitionEnd] = 'onTransitionEnd';
