/*==========================================================================*\
  A purchase option in the buy form
\*==========================================================================*/
"use strict";

var ua = require('app/utils/ua');
var BaseModel = require('app/views/base-view');
var Parent = require('./option');
var popup = require('app/views/global/popup');
var Crop = require('./crop');

module.exports = Parent.extend({
  template: require('app/templates').lightbox['buy-form'].option,
  
  popupId: null, // ID of this view's currently displayed description popup
  
  props: {
    isProductSize: ['boolean', true, true],
    cartProduct: 'state',
    
    active: ['boolean', true, false],
    hasAddons: ['boolean', true, false],
    qty: ['number', true, 0],
    // photo: 'object',
    
    // currently selected option (e.g. for displaying crop)
    selected: ['boolean', true, false], 
    
    // whether Plus and Minus buttons are displayed in mobile view 
    qtyInputMode: ['boolean', true, false],
    
    // whether buy form should span all of viewport without margins 
    buyFormFullscreen: ['boolean', true, true],
    
    crop: 'state', // crop state for this option
    cropIconWidth: ['number', true, 0], // width of a crop miniature
  },
  
  bindings: {
    // 'photo': function () {
    //   this.selected = this.photo.currentCrop === this.crop;
    // },
    
    'cartProduct.spotsLeft': {
      type: function () {
        
      },
    },
    
    buyFormFullscreen: {
      type: function (el, val) {
        el.readOnly = !!val;
        el.disabled = !!val;
      },
      selector: '.qty input',
    },
    'crop.changed': {
      type: 'booleanClass',
      name: 'custom-crop',
    },
    active: {
      type: 'booleanClass',
      name: 'active',
    },
    hasAddons: {
      type: 'booleanClass',
      name: 'has-addons',
    },
    price: {
      type: function (el, val) {
        el.innerHTML = this.model.formatMoney(val);
      },
      selector: '.head .price.final',
    },
    selected: {
      type: 'booleanClass',
      name: 'selected',
    },
    singlePrice: {
      type: function (el, val) {
        el.innerHTML = this.model.formatMoney(val);
      },
      selector: '.head .price.single',
    },
    qty: {
      type: 'value',
      selector: '.qty input',
    },
    qtyInputMode: {
      type: 'booleanClass',
      name: 'qty-input-mode',
    },
  },
  
  initialize: function (options) {
    BaseModel.prototype.initialize.apply(this, arguments);
    this.cartProduct = options.cartProduct;
    this.photo = options.photo;
    this.buyForm = options.buyForm;
    
    var photo = this.cartProduct.photos.get(this.photo.model.id);
    if (photo && photo.options.get(this.model.id)) {
      this.active = true;
    }
    
    this.listenTo(this.photo, 'change:currentCrop', function () {
      this.selected = this.photo.currentCrop === this.crop;
    });
    this.listenTo(this.photo, 'change:buyFormFullscreen', function () {
      this.buyFormFullscreen = this.photo.buyFormFullscreen;
      if (!this.buyFormFullscreen) this.qtyInputMode = false;
    });
    this.buyFormFullscreen = this.photo.buyFormFullscreen;
    
    if (this.model.size.width && this.model.size.height) {
      this.crop = new Crop({
        option: this,
        photo: this.photo,
      });
      
      
      if (this.cartProduct) {
        var cartPhoto = this.cartProduct.photos.get(this.photo.model.id);
        if (cartPhoto) {
          var size = cartPhoto.options.get(this.model.size.id);
          if (size) {
            var cropVals = size.crop;
            if (typeof cropVals.top === 'number') {
              this.crop.setValues(cropVals);
            }
          }
          
        }
      }
      
      this.listenTo(this.crop, 'change', function () {
        this.onCropChange();
      });
    }
    
    this.listenTo(this, 'change:active', this.updateCounts);
    
    if (options && options.cropOnly === this.model.size.id) {
      this.after(1, function () {
        this.toggleCropping();
      });
    }
  },
  
  events: {
    'click .plus': 'plus',
    'click .minus': 'minus',
    'click .head': 'onHeadClick',
    'click .info': 'showDescription',
    'click .crop': 'toggleCropping',
    
    
    'mouseenter .crop': 'showCrop',
    'mouseleave .crop': 'onCropMouseLeave',
    // 'mouseover .crop': 'showCrop',
  },
  
  updateCounts: function () {
    var left = this.cartProduct.spotsLeft[this.model.id];
    var inCart = false;
    var cartPhoto = this.cartProduct.photos.get(this.photo.model.id);
    if (cartPhoto) {
      if (cartPhoto.options.get(this.model.id)) inCart = true;
    }
    if (this.active && !inCart) left -= 1;
    else if (!this.active && inCart) left += 1;
    
    var capacity = this.cartProduct.capacity[this.model.id];
    var selected = capacity - left;
    
    this.el.classList.toggle('fulfilled', !left);
    this.el.classList.toggle('over-capacity', left < 0);
    this.query('.spots-left').innerHTML = 
        this.lz('%d/%d selected', selected, capacity);
  },
});
