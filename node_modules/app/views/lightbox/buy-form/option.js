/*==========================================================================*\
  A purchase option in the buy form
\*==========================================================================*/
"use strict";

var ua = require('app/utils/ua');
var Parent = require('app/views/base-view');
var AddonView = require('./addon');
var popup = require('app/views/global/popup');
var Crop = require('./crop');

module.exports = Parent.extend({
  template: require('app/templates').lightbox['buy-form'].option,
  
  popupId: null, // ID of this view's currently displayed description popup
  
  props: {
    isProductSize: ['boolean', true, false],
     
    displayed: ['boolean', true, true],
    active: ['boolean', true, false],
    hasAddons: ['boolean', true, false],
    singlePrice: ['number', true, 0],
    price: ['number', true, 0],
    qty: ['number', true, 0],
    // photo: 'object',
    
    // currently selected option (e.g. for displaying crop)
    selected: ['boolean', true, false], 
    
    // whether Plus and Minus buttons are displayed in mobile view 
    qtyInputMode: ['boolean', true, false],
    
    // whether buy form should span all of viewport without margins 
    buyFormFullscreen: ['boolean', true, true],
    
    crop: 'state', // crop state for this option
    cropIconWidth: ['number', true, 0], // width of a crop miniature
  },
  
  bindings: {
    // 'photo': function () {
    //   this.selected = this.photo.currentCrop === this.crop;
    // },
    
    displayed: {
      type: 'booleanClass',
      name: 'displayed',
    },
    buyFormFullscreen: {
      type: function (el, val) {
        el.readOnly = !!val;
        el.disabled = !!val;
      },
      selector: '.qty input',
    },
    'crop.changed': {
      type: 'booleanClass',
      name: 'custom-crop',
    },
    active: {
      type: 'booleanClass',
      name: 'active',
    },
    hasAddons: {
      type: 'booleanClass',
      name: 'has-addons',
    },
    price: {
      type: function (el, val) {
        el.innerHTML = this.model.formatMoney(val);
      },
      selector: '.head .price.final',
    },
    selected: {
      type: 'booleanClass',
      name: 'selected',
    },
    singlePrice: {
      type: function (el, val) {
        el.innerHTML = this.model.formatMoney(val);
      },
      selector: '.head .price.single',
    },
    qty: {
      type: 'value',
      selector: '.qty input',
    },
    qtyInputMode: {
      type: 'booleanClass',
      name: 'qty-input-mode',
    },
  },
  
  initialize: function (options) {
    Parent.prototype.initialize.apply(this, arguments);
    this.photo = options.photo;
    this.buyForm = options.buyForm;
    
    this.hasAddons = !!this.model.addons.length;
    this.singlePrice = this.model.price;
    this.listenTo(this, 'change:active', this.updateFolding);
    this.listenTo(this.photo, 'change:currentCrop', function () {
      this.selected = this.photo.currentCrop === this.crop;
    });
    this.listenTo(this.photo, 'change:buyFormFullscreen', function () {
      this.buyFormFullscreen = this.photo.buyFormFullscreen;
      if (!this.buyFormFullscreen) this.qtyInputMode = false;
    });
    this.buyFormFullscreen = this.photo.buyFormFullscreen;
    
    if (this.model.size.width && this.model.size.height) {
      this.crop = new Crop({
        option: this,
        photo: this.photo,
      });
      
      this.listenTo(this.crop, 'change', function () {
        this.onCropChange();
      });
    }
    
    if (options && options.cropOnly === this.model.size.id) {
      this.after(100, function () {
        this.toggleCropping();
      });
    }
  },
  
  events: {
    'click .plus': 'plus',
    'click .minus': 'minus',
    'click .head': 'onHeadClick',
    // 'click .checkbox': 'onCheckboxClick',
    'click .qty input': 'onQtyClick',
    'focus .qty input': 'focusQty',
    'keyup .qty input': 'onQtyKeyup',
    'change .qty input': 'updatePrice',
    'click .info': 'showDescription',
    'click .crop': 'toggleCropping',
    
    
    'mouseenter .crop': 'showCrop',
    'mouseleave .crop': 'onCropMouseLeave',
    // 'mouseover .crop': 'showCrop',
  },
  
  toggleCropping: function () {
    // if (!this.active) return;
    var photo = this.photo;
    if (photo.croppingMode && photo.currentCrop === this.crop) {
      photo.exitCropping();
    }
    else {
      photo.enterCropping(this.crop);
    }
  },
  onCropChange: function () {
    var crop = this.crop;
    
    var top = Math.ceil(32 * crop.top / 100);
    var right = Math.ceil(this.cropIconWidth * crop.right / 100);
    var bottom = Math.ceil(32 * crop.bottom / 100);
    var left = Math.ceil(this.cropIconWidth * crop.left / 100);
    
    this.cropCoverTop.style[ua.css.transform] = 
        'translate3d('+ left +'px,'+ top +'px,0)';
    this.cropCoverRight.style[ua.css.transform] = 
        'translate3d('+ (-right) +'px,'+ top +'px,0)';
    this.cropCoverBottom.style[ua.css.transform] = 
        'translate3d('+ (-right) +'px,'+ (-bottom) +'px,0)';
    this.cropCoverLeft.style[ua.css.transform] = 
        'translate3d('+ left +'px,'+ (-bottom) +'px,0)';
  },
  // enterCropping: function () {
  //   if (!this.active) return;
  //   var photo = this.photo;
  //   photo.enterCropping(this.crop);
  //   // this.parent.parent.parent.applyCrop();
  // },
  // exitCropping: function () {
  //   var photo = this.photo;
  //   photo.exitCropping();
  // },
  showCrop: function () {
    // if (!this.active) return;
    // var photo = this.parent.parent.parent;
    this.photo.glimpseCropping(this.crop);
  },
  onCropMouseLeave: function () {
    if (this.photo.croppingMode) this.photo.applyCrop();
    else this.photo.exitCropping();
  },
  
  onQtyClick: function () {
    if (this.buyFormFullscreen) {
      this.qtyInputMode = !this.qtyInputMode;
    }
    else {
      this.focusQty();
    }
  },
  onQtyKeyup: function (e) {
    if (e.keyCode === 10 || e.keyCode === 13) {
      this.qtyInput.blur();
      e.preventDefault();
    }
    this.qtyInput.value = this.qtyInput.value.replace(/[^\d]/g, '')
                                             .replace(/^0+/, '');
    if (!this.qtyInput.value) {
      this.qtyInput.value = '0';
      this.qtyInput.select();
    }
    this.updatePrice();
  },
  focusQty: function () {
    this.qtyInput.focus();
    this.qtyInput.select();
    var self = this;
    setTimeout(function () {
      self.qtyInput.focus();
      self.qtyInput.select();
      setTimeout(function () {
        if (self.qtyInput.scrollIntoView) {
          self.qtyInput.scrollIntoView(false);
        }
      });
    }, 100);
  },
  plus: function (e) {
    // var old = Math.round(+this.qtyInput.value || 0);
    var multi = 1;
    if (e && e.altKey) multi *= 10;
    if (e && e.shiftKey) multi *= 5;
    // this.qtyInput.value = old + 1 * multi;
    this.qty += 1 * multi;
    this.updatePrice();
  },
  minus: function (e) {
    // var old = Math.round(+this.qtyInput.value || 0);
    var multi = 1;
    if (e && e.altKey) multi *= 10;
    if (e && e.shiftKey) multi *= 5;
    // var newVal = old - 1 * multi;
    // this.qtyInput.value = newVal < 0 ? 0 : newVal;
    
    this.qty -= this.qty - 1 * multi < 0 ? 0 : 1 * multi;
    this.updatePrice();
  },
  
  onHeadClick: function (e) {
    if (this.isProductSize) return;
    if (!this.model.size.no_qty && !this.isProductSize) return;
    if (e.target.closest('.crop, .info')) return;
    this.active = !this.active;
    this.updatePrice();
  },
  // onCheckboxClick: function () {
  //   if (!this.model.size.no_qty) return;
  //   this.active = !this.active;
  //   this.updatePrice();
  // },
  
  render: function () {
    if (this.parent && this.parent.collection || this.isProductSize) {
      this.renderWithTemplate(this);
      this.cacheElements({
        qtyInput: '.qty input',
        finalPrice: '.price.final',
        addons: '.addons',
        info: '.info',
        
        cropIcon: '.crop',
        cropCoverTop: '.crop-cover.top',
        cropCoverRight: '.crop-cover.right',
        cropCoverBottom: '.crop-cover.bottom',
        cropCoverLeft: '.crop-cover.left',
      });
      
      if (this.model.addons) {
        this.addonsView = this.renderCollection(this.model.addons, AddonView, 
                                                this.addons);
      }
      
      if (this.crop) {
        this.cacheElements({
          cropIcon: '.crop',
          cropCoverTop: '.crop-cover.top',
          cropCoverRight: '.crop-cover.right',
          cropCoverBottom: '.crop-cover.bottom',
          cropCoverLeft: '.crop-cover.left',
        });
        
        this.cropIconWidth = Math.round(this.photo.model.ratio * 32);
        this.cropIcon.style.width = this.cropIconWidth + 'px';
        
        this.onCropChange();
        
        // var self = this;
        // this.cropIcon.addEventListener('mouseenter', function () {
        //   self.showCrop();
        // }, false);
        // this.cropIcon.addEventListener('mouseleave', function () {
        //   self.onCropMouseLeave();
        // }, false);
      }
      
      if (this.isProductSize) {
        this.parent.updateCounts();
      }
    }
  },
  
  select: function () {
    this.selected = true;
    var photo = this.photo;
    
    photo.enterCropping(this.crop);
  },
  deselect: function () {
    this.selected = false;
  },
  
  showDescription: function (e) {
    // if (e && e.preventDefault) {
    //   e.preventDefault();
    //   e.stopPropagation();
    // }
    if (e && e.target && e.target.closest('.purchase-addon')) return;
    if (popup.displayedId && popup.displayedId === this.popupId) return;
    this.popupId = popup.show({
      title: this.model.size.long_name,
      content: this.model.size.description,
      image: this.model.size.img_url ? {
        src: this.model.size.img_url,
        width: this.model.size.img_width,
        height: this.model.size.img_height,
      } : null,
      targetEl: this.info,
    });
  },
  
  updateFolding: function () { // fold or unfold the option
    this.buyForm.updatePositions();
  },
  
  updatePrice: function () {
    var singlePrice = this.model.price;
    var price;
    var qty;
    
    
    // if (!this.model.size.no_qty && !this.isProductSize) {
    if (!this.model.size.no_qty) {
      qty = Math.round(+this.qtyInput.value || 0);
      if (qty < 0) {
        qty = -qty;
        console.log(qty);
        this.qtyInput.value = qty;
      }
      this.qty = qty;
      this.active = qty > 0;
    }
    else {
      qty = this.active ? 1 : 0;
    }
    
    if (this.addonsView) {
      var addons = this.addonsView.views;
      for (var i = 0; i < addons.length; i++) {
        if (addons[i].active || addons[i].model.options.length) {
          singlePrice += addons[i].price;
        }
      }
    }
    
    price = qty * singlePrice;
    
    if (!this.isProductSize) {
      this.singlePrice = singlePrice;
      this.price = price;
      this.active = !!price;
    }
    
    this.buyForm.updatePrice();
    
    // this.el.classList[!price ? 'remove' : 'add']('active');
  },

});
