/*==========================================================================*\
  A purchase option in the buy form
\*==========================================================================*/
"use strict";

var Parent = require('app/views/base-view');
var AddonView = require('./addon');
var popup = require('app/views/global/popup');

module.exports = Parent.extend({
  template: require('app/templates').lightbox['buy-form'].option,
  
  popupId: null, // ID of this view's currently displayed description popup
  
  props: {
    active: ['boolean', true, false],
    hasAddons: ['boolean', true, false],
    singlePrice: ['number', true, 0],
    price: ['number', true, 0],
    qty: ['number', true, 0],
  },
  
  bindings: {
    active: {
      type: 'booleanClass',
      name: 'active',
    },
    hasAddons: {
      type: 'booleanClass',
      name: 'has-addons',
    },
    price: {
      type: function (el, val) {
        el.innerHTML = this.model.formatMoney(val);
      },
      selector: '.head .price.final',
    },
    singlePrice: {
      type: function (el, val) {
        el.innerHTML = this.model.formatMoney(val);
      },
      selector: '.head .price.single',
    },
    qty: {
      type: 'value',
      selector: '.qty input',
    },
  },
  
  initialize: function () {
    Parent.prototype.initialize.apply(this, arguments);
    this.hasAddons = !!this.model.addons.length;
    this.singlePrice = this.model.price;
    this.listenTo(this, 'change:active', this.updateFolding);
  },
  
  events: {
    'click .plus': 'plus',
    'click .minus': 'minus',
    'click .head': 'onHeadClick',
    'click .head input': 'focusQty',
    'click .info': 'showDescription',
  },
  
  focusQty: function () {
    this.qtyInput.focus();
    this.qtyInput.select();
  },
  plus: function (e) {
    // var old = Math.round(+this.qtyInput.value || 0);
    var multi = 1;
    if (e && e.altKey) multi *= 10;
    if (e && e.shiftKey) multi *= 5;
    // this.qtyInput.value = old + 1 * multi;
    this.qty += 1 * multi;
    this.updatePrice();
  },
  minus: function (e) {
    // var old = Math.round(+this.qtyInput.value || 0);
    var multi = 1;
    if (e && e.altKey) multi *= 10;
    if (e && e.shiftKey) multi *= 5;
    // var newVal = old - 1 * multi;
    // this.qtyInput.value = newVal < 0 ? 0 : newVal;
    
    this.qty -= this.qty - 1 * multi < 0 ? 0 : 1 * multi;
    this.updatePrice();
  },
  
  onHeadClick: function () {
    if (!this.model.no_qty) return;
    this.active = !this.active;
    this.updatePrice();
  },
  
  render: function () {
    if (this.parent.collection) {
      this.renderWithTemplate();
      this.cacheElements({
        qtyInput: '.qty input',
        finalPrice: '.price.final',
        addons: '.addons',
        info: '.info',
      });
      this.addonsView = this.renderCollection(this.model.addons, AddonView, 
                                              this.addons);
    }
  },
  
  showDescription: function () {
    if (popup.displayedId && popup.displayedId === this.popupId) return;
    this.popupId = popup.show({
      title: this.model.full_name,
      content: this.model.description,
      image: this.model.img_url ? {
        src: this.model.img_url,
        width: this.model.img_width,
        height: this.model.img_height,
      } : null,
      targetEl: this.info,
    });
  },
  
  updateFolding: function () { // fold or unfold the option
    this.parent.parent.updatePositions();
  },
  
  updatePrice: function () {
    var singlePrice = this.model.price;
    var price;
    var qty;
    
    
    if (!this.model.no_qty) {
      // qty = Math.round(+this.qtyInput.value || 0);
      qty = this.qty;
      this.active = qty > 0;
    }
    else {
      qty = this.active ? 1 : 0;
    }
    
    if (this.addonsView) {
      var addons = this.addonsView.views;
      for (var i = 0; i < addons.length; i++) {
        if (addons[i].active || addons[i].model.options.length) {
          singlePrice += addons[i].price;
        }
      }
    }
    
    price = qty * singlePrice;
    
    this.singlePrice = singlePrice;
    this.price = price;
    this.active = !!price;
    
    this.parent.parent.updatePrice();
    
    // this.el.classList[!price ? 'remove' : 'add']('active');
  },

});
