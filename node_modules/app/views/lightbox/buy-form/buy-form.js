/*==========================================================================*\
  Buy Image Form
\*==========================================================================*/
"use strict";

var app = require('app');
var ua = require('app/utils/ua');
var Parent = require('app/views/base-view');
var OptionView = require('./option');
var _ = require('underscore');

var rowHeight = 44;

module.exports = Parent.extend({
  template: require('app/templates').lightbox['buy-form']['buy-form'],
  
  props: {
    totalPrice: ['number', true, 0],
    saveAsDefault: ['boolean', true, false],
  },
  
  bindings: {
    totalPrice: {
      type: function (el, val) {
        this.el.classList[val ? 'remove' : 'add']('empty');
        el.innerHTML = this.model.formatMoney(val);
      },
      selector: '.total-price',
    },
    saveAsDefault: {
      type: 'booleanClass',
      name: 'save-as-default',
    },
  },
  
  initialize: function () {
    Parent.prototype.initialize.apply(this, arguments);
    this.render();
    this.cacheElements({
      options: '.options',
    });
    
    var data = app.cart[this.model.id] || app.defaultOptions;
    if (data) this.prefill(data);
    if (app.cart[this.model.id]) {
      this.query('.button.save').innerHTML = 'Save';
    }
    
  },
  
  events: {
    'click .make-default': 'toggleSaveAsDefault',
    'click .button.cancel': 'hide',
    'click .button.remove': 'removeFromCart',
    'click .button.save': 'save',
  },
  
  render: function () {
    this.renderWithTemplate(this);
    this.optionsView = this.renderCollection(app.purchaseOptions, OptionView, 
                                             this.query('.options'));
  },
  
  prefill: function (data) {
    var option, addons, item;
    for (var i = 0; i < this.optionsView.views.length; i++) {
      option = this.optionsView.views[i];
      item = data[option.model.id];
      if (!item) continue;
      
      option.active = true;
      option.qty = item.qty;
      
      if (option.addonsView) {
        addons = option.addonsView.views;
        for (var j = 0; j < addons.length; j++) {
          if (!item.addons[addons[j].model.id]) continue;
          
          if (!addons[j].model.options.length) {
            addons[j].active = true;
          }
          else {
            addons[j].selected_id = item.addons[addons[j].model.id];
          }
          addons[j].updatePrice();
        }
      }
      
      option.updatePrice();
    }
  },
  
  toggleSaveAsDefault: function () {
    this.saveAsDefault = !this.saveAsDefault;
  },
  
  updatePositions: function () {
    var height = 24;
    var option;
    for (var i = 0; i < this.optionsView.views.length; i++) {
      option = this.optionsView.views[i];
      option.el.style[ua.css.transform] = 'translateY('+ height +'px)';
      height += rowHeight + 
          (option.active && option.hasAddons ? option.addons.offsetHeight : 0);
    }
    this.options.style.height = height +'px';
  },
  
  updatePrice: function () {
    var option;
    var total = 0;
    for (var i = 0; i < this.optionsView.views.length; i++) {
      option = this.optionsView.views[i];
      total += option.price;
    }
    this.totalPrice = total;
  },
  
  hide: function () {
    this.parent.hideBuyForm();
  },
  
  removeFromCart: function () {
    delete app.cart[this.model.id];
    this.parent.inCart = false;
    this.hide();
  },
  
  save: function () {
    if (!this.totalPrice) return;
    app.cart[this.model.id] = {};
    var cart = app.cart[this.model.id];
    var option, addons;
    for (var i = 0; i < this.optionsView.views.length; i++) {
      option = this.optionsView.views[i];
      if (!option.price) continue;
      cart[option.model.id] = {
        qty: option.qty,
        addons: {},
      };
      if (option.addonsView) {
        addons = option.addonsView.views;
        for (var j = 0; j < addons.length; j++) {
          if (addons[j].active || addons[j].model.options.length) {
            if (addons[j].price) {
              cart[option.model.id].addons[addons[j].model.id] = 
                addons[j].model.options.length ? addons[j].selected_id : true;
            }
          }
        }
      }
    }
    
    if (this.saveAsDefault) {
      app.defaultOptions = _.clone(cart);
    }
    
    this.parent.inCart = true;
    this.query('.button.save').innerHTML = 'Save';
    
    this.hide();
  },
});
