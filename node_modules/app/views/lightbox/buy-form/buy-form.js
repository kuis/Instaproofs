/*==========================================================================*\
  Buy Image Form
\*==========================================================================*/
"use strict";

var app = require('app');
var ua = require('app/utils/ua');
var Parent = require('app/views/base-view');
var CartPhoto = require('app/models/cart/cart-photo-model');
var CartPhotoOption = require('app/models/cart/cart-option-model');
var CartPhotoAddon = require('app/models/cart/cart-addon-model');
var OptionView = require('./option');
var _ = require('underscore');

var ProductView = require('./product-sizes');
var ProductPopup = require('app/views/event/product-popup');
var ProductsPopup = require('./products-popup');
var ProductsCollection = require('app/models/product/products-collection');

var popup = require('app/views/global/popup');

var rowHeight = 44;

module.exports = Parent.extend({
  template: require('app/templates').lightbox['buy-form']['buy-form'],
  
  props: {
    empty: ['boolean', true, true],
    totalPrice: ['number', true, 0],
    saveAsDefault: ['boolean', true, false],
    usableProducts: 'any',
  },
  
  bindings: {
    cropOnly: {
      type: 'booleanClass',
      name: 'crop-only',
    },
    empty: {
      type: 'booleanClass',
      name: 'empty',
    },
    totalPrice: {
      type: function (el, val) {
        // this.empty = !val;
        // this.el.classList[val ? 'remove' : 'add']('empty');
        el.innerHTML = this.model.formatMoney(val);
      },
      selector: '.total-price',
    },
    saveAsDefault: {
      type: 'booleanClass',
      name: 'save-as-default',
    },
    usableProducts: {
      type: 'booleanClass',
      name: 'usable-products',
    },
  },
  
  initialize: function (ops) {
    Parent.prototype.initialize.apply(this, arguments);
    
    if (ops && ops.cropOnly) { 
      this.cropOnly = ops.cropOnly; 
    }
    
    var i;
    var products = [];
    var product;
    if (!this.productsPopupView) {
      for (i = 0; i < this.model.event.products.length; i++) {
        product = app.products.get(this.model.event.products[i]);
        if (product.includesPrints) products.push(product);
      }
    }
    if (products.length) this.usableProducts = new ProductsCollection(products);
    
    this.render();
    this.cacheElements({
      options: '.options',
    });
    
    var cart = this.model.event.cart;
    var cartPhoto = cart.photos.get(this.model.id, 'pid');
    // var cartPhoto = app.cart.photos.get(this.model.id, 'pid');
    // var data = (cartPhoto && cartPhoto.options) || app.defaultOptions;
    var data = (cartPhoto && cartPhoto.options);
    if (data) this.prefill(data);
    this.updatePrice();
    if (cartPhoto) {
      this.query('.button.save').innerHTML = 'Save';
    }
    
  },
  
  events: {
    'click .make-default': 'toggleSaveAsDefault',
    'click .button.cancel': 'hide',
    'click .button.remove': 'removeFromCart',
    'click .button.save': 'save',
    'click .button.add': 'save',
    'click .button.add-product': 'showProductsPopup',
  },
  
  addProduct: function () {
    var popup = new ProductPopup({
      model: app.products.get(100187176),
      eventId: this.model.event.id,
    });
    
    document.body.insertBefore(popup.el, document.getElementById('popup'));
  },
  
  showProductsPopup: function () {
    if (!this.productsPopupView) {
      this.productsPopupView = new ProductsPopup({
        collection: this.usableProducts,
        model: this.model,
        parent: this,
      });
    }
    
    if (popup.displayedId && popup.displayedId === this.popupId) return;
    this.popupId = popup.show({
      targetEl: this.query('.button.add-product'),
      content: this.productsPopupView.el,
    });
  },
  
  render: function () {
    this.renderWithTemplate(this);
    
    this.productsView = this.renderCollection(this.model.event.cart.products,
        ProductView, this.query('.products-prints'), {
      filter: function (model) {
        // return model.product.includesPrints && !model.fulfilled;
        return model.product.includesPrints;
      },
      viewOptions: {
        photo: this.parent,
        buyForm: this,
        cropOnly: this.cropOnly,
      },
    });

    this.optionsView = this.renderCollection(
        this.model.buyOptions, OptionView, this.query('.options'), {
      viewOptions: {
        photo: this.parent,
        buyForm: this,
        // cropOnly: this.cropOnly,
      },
    });
  },
  
  prefill: function (data) {
    var i, j, option, addons, item;
    for (i = 0; i < this.optionsView.views.length; i++) {
      option = this.optionsView.views[i];
      // item = data[option.model.size.id];
      item = data.get(option.model.size.id, 'size_id');
      if (!item) continue;
      
      option.active = true;
      option.qty = item.qty;
      
      if (option.crop && item.crop && typeof item.crop.top === 'number') {
        option.crop.setValues(item.crop);
      }
      
      if (option.addonsView) {
        addons = option.addonsView.views;
        var cartAddon;
        for (j = 0; j < addons.length; j++) {
          cartAddon = item.addons.get(addons[j].model.id);
          if (!cartAddon) continue;
          
          if (addons[j].model.options.length <= 1) {
            addons[j].active = true;
          }
          else {
            addons[j].selected_id = cartAddon.oid;
          }
          addons[j].updatePrice();
        }
      }
      option.updatePrice();
    }
    
    // for (i = 0; i < this.productsView.views.length; i++) {
    //   product = this.productsView.views[i];
      
    // }
    this.updatePrice();
    
    if (this.parent.inCart) {
      this.query('.button.save').innerHTML = this.lz('Save');
    }
  },
  
  toggleSaveAsDefault: function () {
    this.saveAsDefault = !this.saveAsDefault;
  },
  
  updatePositions: function () {
    // var height = 24;
    var height = 0;
    // var itemHeight = this.parent.buyFormFullscreen ? rowHeight * 2 : rowHeight;
    var itemHeight = rowHeight;
    var option;
    for (var i = 0; i < this.optionsView.views.length; i++) {
      option = this.optionsView.views[i];
      option.el.style[ua.css.transform] = 'translateY('+ height +'px)';
      height += itemHeight + 
          (option.active && option.hasAddons ? option.addons.offsetHeight : 0);
    }
    this.options.style.height = height +'px';
  },
  
  updatePrice: function () {
    var option;
    var total = 0;
    for (var i = 0; i < this.optionsView.views.length; i++) {
      option = this.optionsView.views[i];
      total += option.price;
    }
    this.totalPrice = total;
    
    var formEmpty = !this.totalPrice && !this.query('.product-size.active');
    this.empty = !this.model.in_cart && formEmpty;
  },
  
  hide: function () {
    this.parent.hideBuyForm();
  },
  
  removeFromCart: function () {
    var cart = this.model.event.cart;
    var cartPhoto = cart.photos.get(this.model.id, 'pid');
    cart.photos.remove([cartPhoto]);
    for (var i = 0; i < cart.products.length; i++) {
      cart.products.at(i).photos.remove(this.model.id);
    }
    cart.save();
    // this.parent.inCart = false;
    this.hide();
  },
  
  save: function () {
    if (this.empty) return;
    // app.cart[this.model.id] = {
    //   photo: this.model.toJSON(),
    // };
    // var cart = app.cart[this.model.id];
    
    var i, j;
    var cart = this.model.event.cart;
    
    var cartPhoto = cart.photos.get(this.model.id, 'pid');
    var cartOption;
    var cartAddon;
    var newPhoto = false;
    if (!cartPhoto) {
      newPhoto = true;
      cartPhoto = new CartPhoto({ 
        eid: this.model.eid,
        cat_id: this.model.cat_id,
        pid: this.model.id,
        color_id: this.model.current_color_id,
      });
    }
    var option, addons;
    var cartOptions = [];
    for (i = 0; i < this.optionsView.views.length; i++) {
      option = this.optionsView.views[i];
      if (!option.active) continue;
      cartOption = {
        size_id: option.model.size.id,
        qty: option.qty,
        addons: [],
        crop: option.crop && option.crop.changed ? option.crop.getValues() : {},
      };
      
      // if (option.crop && option.crop.changed) {
      //   cartOption.crop = option.crop.getValues();
      // } 
      
      if (option.addonsView) {
        addons = option.addonsView.views;
        var cartAddons = [];
        var oid;
        for (j = 0; j < addons.length; j++) {
          // if (addons[j].active || addons[j].model.options.length > 1) {
          if (addons[j].active || addons[j].selected_id) {
            // if (addons[j].price) {
            oid = addons[j].model.options.length ? addons[j].selected_id : true;
            if (addons[j].active && addons[j].model.options.length === 1) {
              oid = addons[j].model.options.at(0).id;
            }
            // cartAddons.push(new CartPhotoAddon({
            cartAddons.push({
              id: addons[j].model.id,
              oid: oid,
            });
            // }
          }
        }
        // cartOption.addons.set(cartAddons);
        cartOption.addons = cartAddons;
      }
      
      cartOptions.push(cartOption);
    }
    
    cartPhoto.options.set(cartOptions);
    
    if (newPhoto && this.totalPrice) {
      cart.photos.add(cartPhoto);
    }
    
    
    var productView, product, options;
    for (i = 0; i < this.productsView.views.length; i++) {
      productView = this.productsView.views[i];
      product = cart.products.get(productView.model);
      if (!product) continue;
      options = [];
      for (j = 0; j < productView.options.views.length; j++) {
        option = productView.options.views[j];
        if (option.active) {
          options.push({
            size_id: option.model.id,
            qty: 1,
            crop: option.crop && option.crop.changed 
                  ? option.crop.getValues() : {},
          });
        }
      }
      if (!options.length) cart.products.remove(product);
      else {
        product.photos.add({
          pid: this.model.id,
          cat_id: this.model.cat_id,
          color_id: this.model.current_color_id,
          options: options,
        }, {
          merge: true,
        });
      }
    }
    
    
    if (this.saveAsDefault) {
      app.defaultOptions = _.clone(cartPhoto.options);
      app.storage.defaultOptions = JSON.stringify(cartPhoto.options);
    }
    
    this.parent.inCart = true;
    this.query('.button.save').innerHTML = 'Save';
    
    this.hide();
    // app.storage.cart = JSON.stringify(cart);
    // cart.store();
    cart.save();
  },
});
