/*==========================================================================*\
  Main view for the lightbox photo viewer
\*==========================================================================*/
"use strict";

var app = require('app');
var fullscreen = require('app/utils/fullscreen');
var keyboard = require('app/utils/keyboard');
var templates = require('app/templates');
var ua = require('app/utils/ua');
var _ = require('underscore');

var Parent = require('app/views/base-view');
var PhotoView = require('./product-photo');


module.exports = Parent.extend({
  dictionary: 'lightbox',
  template: require('app/templates').lightbox.productLightbox,
  props: {    
    // whether the UI should currently be hidden if in fullscreen
    noUI: ['boolean', true, false], 
    
    // whether we're currently preloading a photo
    preloading: ['boolean', true, false],
    
    // when set, whole lightbox is covered with a div with specified cursor
    cursor: ['string', true, ''],
  },
  backTo: null, // page to go back to when closing 
  displayed: false, // whether the lightbox is currently displayed  
  
  initialize: function () {
    Parent.prototype.initialize.apply(this, arguments);
    this.render();
    document.body.insertBefore(this.el, document.getElementById('popup'));
    
    _.bindAll(this, 'close');
    
    this.cacheElements({
      slides: '.slides', // container for the slides 
      topRightEl: '.top-right',      
      cover: '#lightbox-cover',
    });
    
    keyboard.bind('esc', this.close);
    
    this.listenTo(app.state, 'resize', this.resize);
    this.listenTo(app.state, 'change:fullscreen', this.resize);
    
    this.el.classList.add('cross-fade');
  },
  
  events: {
    'click .close': 'close',
  },
  
  bindings: {
    cursor: {
      type: function (el, val) {
        if (!ua.desktop || !this.cover) return;
        this.cover.style.display = !!val ? 'block' : 'none';
        this.cover.className = val;
      },
    }
  },
  
  cleanup: function () { // clear the lightbox after hiding
   
    if (this.current) {
      this.current.remove('now');
      this.current.stopListening();
    }
    
    this.current = null; // view of the current photo
  },  
  
  /*==========================================================================*\
    Reset the lightbox to a different list
  \*==========================================================================*/
  reset: function (ops) {
    if (ops.backTo) this.backTo = ops.backTo;
    
    this.cleanup();
    
    this.collection = ops.collection;
    
    this.current = new PhotoView({ 
      model: ops.photo || this.collection.at(0),
      parent: this,
    });
    this.preloading = true;
    
    // preload current slide
    this.preloadMore({ inBackground: true });
   
    this.current.el.classList.add('current');
    this.updateSlides();
  },  
  
  /*==========================================================================*\
    Handle browser resize
  \*==========================================================================*/
  resize: function () {
    if (!this.displayed) return;
    this.current.resize();
    
  },
  
  /*==========================================================================*\
    Showing and hiding
  \*==========================================================================*/
  show: function () {
    if (this.displayed) return;
    this.displayed = true;
    this.el.classList.add('displayed');
    // this.current.showBuyForm();
  },
  hide: function () {
    if (!this.displayed) return;
    app.router.productLightboxMode = false;
    this.displayed = false;    
    
    this.el.classList.remove('displayed');
  },
  close: function () {
    app.navigate(this.backTo);
  },
  
  /*==========================================================================*\
    Updating the DOM
  \*==========================================================================*/
  updateSlides: function () { // keep only slide in dom 
    
    if (this.current && !this.current.el.parentNode) {
      this.slides.appendChild(this.current.el);
    }
  },  
  
  /*==========================================================================*\
    Photos Preloading
  \*==========================================================================*/
  preloadMore: function (options) { // preload a photo if needed
    options = options || {};
    if (!this.displayed && !options.inBackground) return;
    if (this.preloading) {
      return this.updateSlides();
    }
    this.updateSlides();
  }, 
  
});

