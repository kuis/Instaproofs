/*==========================================================================*\
  Lightbox Slidshow Functionality
\*==========================================================================*/
"use strict";
var app = require('app');
var fullscreen = require('app/utils/fullscreen');
var ua = require('app/utils/ua');


module.exports = {
  slideshowPaused: false, // slideshow is paused e.g. due to mouse movement
  slidePending: false, // go to next slide as soon as slideshow is unlocked
  slideshowTimer: null, // slideshow timer 
  slideshowSpeed: ua.mobile ? 3000 : 3000, // time in ms between slide changes 
  
  toggleSlideshow: function () {
    if (this.slideshow) { // stop the show 
      clearTimeout(this.slideshowTimer);
      this.slideshow = false;
      if (this.music) this.toggleMusic();
    }
    else { // start the show
      this.slideshow = true;
      this.slideshowTimer = setTimeout(this.slideshowCallback, 
                                       this.slideshowSpeed);
      
      if (this.music) this.player.play();
      else this.toggleMusic();
    }
  },
  slideshowCallback: function () {
    if (!this.slideshow) {
      this.slidePending = false;
      return;
    }
    if (!this.buyFormDisplayed && this.next[0] && this.next[0].loaded && 
        (ua.mobile || this.mouseRest && !this.mouseOverActions)
        || this.speedSliderX) {
      this.slidePending = false;
      this.forward({ crossFade: true });
      this.lastSlideChangeTime = Date.now();
    }
    else {
      this.slidePending = true;
    }
  },
  speedDown: function (e) { // slideshow speed dial mouse/touch-down
    var x0 = this.speedSliderX 
           = this.slideshowSpeedEl.getBoundingClientRect().left;
    this.setSlideshowSpeed(Math.floor((e.pageX - x0) / 6));
    this.slideshowSpeedEl.classList.add('pressed');
    if (e && e.preventDefault) e.preventDefault();
    return false;
  },
  onMouseUp: function () {
    this.slideshowSpeedEl.classList.remove('pressed');
    this.speedSliderX = null;
    clearTimeout(this.mouseRestTimer);
    this.mouseRestTimer = setTimeout(this.onMouseRest, this.mouseRestSpeed);
  },
  setSlideshowSpeed: function (speed) {
    speed = speed < 1 ? 1 : speed > 15 ? 15 : speed;
    var fillX = speed * 6;
    this.slideshowSpeedFill.style[ua.css.transform] = 'translateX('+fillX+'px)';
    this.slideshowSpeedNob.style[ua.css.transform] = 'translateX('+fillX+'px)';
    this.slideshowSpeedText.innerHTML = speed +' sec.';
    
    this.slideshowSpeed = speed * 1000;
    
    if (this.slideshow) {
      clearTimeout(this.slideshowTimer);
      this.slideshowTimer = setTimeout(this.slideshowCallback, 
                                       this.slideshowSpeed);
    }
  },
  
  onMouseMove: function (e) {
    
    // changing slideshow speed 
    if (ua.desktop && this.speedSliderX) {
      this.setSlideshowSpeed(Math.floor((e.pageX - this.speedSliderX) / 6));
      e.preventDefault();
    }
    
    // if (!app.state.fullscreen) return;
    if (this.mouseRest && 
        (Math.abs(this.mouseRestPosition.x - e.pageX) >= 5 || 
        Math.abs(this.mouseRestPosition.y - e.pageY) >= 5)) {
      this.mouseRestPosition = null;
      this.mouseRest = false;
      this.noUI = false;
      if (Date.now() - this.lastSlideChangeTime < 1200) {
        this.scheduleWrite(function () {
          this.back({ crossFade: true });
        });
      }
    }
    // this.noUI = false;
    // this.el.classList.remove('no-ui');
    this.mouseLastPosition.x = e.pageX;
    this.mouseLastPosition.y = e.pageY;
    this.mouseLastPosition.target = e.target;
    this.disabledArrows = !!e.target.closest('.action.with-popover');
    // if (this.disabledArrows) {
    //   if (e.target.closest('.variant-button')) {
    //     this.current.loadVariants();
    //     this.current.displayVariant(e.target.getAttribute('data-color-id'));
    //   }
    //   else {
    //     this.current.displayVariant(this.current.model.current_color_id);
    //   }
    // }
    clearTimeout(this.mouseRestTimer);
    this.mouseRestTimer = setTimeout(this.onMouseRest, this.mouseRestSpeed);
    
  },
  onMouseRest: function () { // no mouse or touch activity for a while
    clearTimeout(this.mouseRestTimer);
    if (!this.slideshow) return;
    if (ua.mobile) {
      this.mouseRest = true;
      this.noUI = true;
      return;
    }
    
    var target = this.mouseLastPosition.target;
    this.mouseOverActions = this.current.actionsEl.contains(target);
    this.mouseOverTopRight = this.topRightEl.contains(target);
    this.mouseOverSlideshow = this.slideshowControlsEl.contains(target);
    if (!this.speedSliderX) {
      this.mouseRestPosition = {
        x: this.mouseLastPosition.x,
        y: this.mouseLastPosition.y,
      };
      this.mouseRest = this.mouseLastPosition.target || true;
      if (!this.mouseOverActions && !this.mouseOverTopRight &&
          !this.mouseOverSlideshow) this.noUI = true;
      if (this.slidePending) {
        this.slideshowCallback();
      }
    }
  },
  // hideUI: function () {
    
  //   clearTimeout(this.noUITimer);
  //   if (!app.state.fullscreen) return;
  //   this.noUI = true;
  //   this.el.classList.add('no-ui');
  // },
  
  toggleMusic: function () {
    if (!this.hasMusic) {
      this.music = false;
      this.player.pause();
      return;
    }
    if (!this.music) this.player.play();
    else this.player.pause();
    this.music = !this.music;
  },
  
  toggleCategories: function (e) {
    this.el.classList.toggle('show-categories');
    if (e && e.preventDefault) e.preventDefault();
    return false;
  },
  
  onWheel: function (e) {
    e.preventDefault();
    return false;
  },
  toggleFullscreen: function () {
    if (!app.state.fullscreen) this.onMouseRest();
    else if (this.slideshow) this.toggleSlideshow();
    fullscreen.toggle();
  },
};
