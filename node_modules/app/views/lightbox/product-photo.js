/*==========================================================================*\
  A single photo with its UI elements in the lightbox
\*==========================================================================*/
"use strict";

var app = require('app');
var keyboard = require('app/utils/keyboard');
var ua = require('app/utils/ua');
var _ = require('underscore');

var Parent = require('app/views/base-view');
var i18n = require('app/i18n/i18n');
var popup = require('app/views/global/popup');
var BuyForm = require('./buy-form/buy-form');
var ShareView = require('app/views/global/share');

module.exports = Parent.extend(require('bind-transforms')).extend({
  template: require('app/templates').lightbox.productPhoto,
  loaded: false, // whether the main image has been loaded 
  failures: 0, // number of times main image request has failed 
  imageWidth: 0, // dimensions of an image as currently displayed 
  imageHeight: 0,
  
  props: {
    // whether buy form is to be displayed on next to a photo, not on top
    buyFormInline: ['boolean', true, true],
    
    // whether buy form should span all of viewport without margins 
    buyFormFullscreen: ['boolean', true, true],    
    inCart: ['boolean', true, false],    
  },
  
  bindings: {    
    inCart: {
      type: function (el, val) {
        this.el.classList[val ? 'add' : 'remove']('in-cart');
        this.query('.action.cart .tip').innerHTML = 
            this.lz(val ? 'In Cart' : 'Buy Image');
      },
      // type: 'booleanClass',
      // name: 'in-cart',
    },
  },
  
  initialize: function () {
    Parent.prototype.initialize.apply(this, arguments);
    this.onImageTransitionEnd = this.onImageTransitionEnd.bind(this);

    this.load();
    this.render();
    this.cacheElements({
      imagesEl: '.images',
      img: '.img',
      imgTag: 'img',
      actionsEl: '.actions',
      
    });
    this.img.addEventListener(ua.events.transitionEnd, 
                              this.onImageTransitionEnd);
    this.resize();
   
  },
  
  events: {
    'click .action.cart': 'showBuyForm',
    'click div.action.share': 'showShareForm',
  },
  load: function () {
    if (!this.image) {
      this.image = new Image();
      this.image.addEventListener('load', this, false);
      this.image.addEventListener('error', this, false);
    }
    this.image.src = this.model.img_url;
  },
  
  handleEvent: function (e) {
    switch (e.type) {      
      case 'load':
        this.loaded = true;
        this.trigger('load');
        this.el.classList.add('loaded');
        this.parent.preloading = false;
        this.parent.preloadMore();
        
        this.rq = null;
        this.image.removeEventListener('load', this, false);
        this.image.removeEventListener('error', this, false);
        this.image = null;
        break;
      case 'error':
        console.log('failed to load photo: '+ this.model.img_url, e);
        if (this.failures < 5) {
          this.image.src = this.model.img_url + 
              (this.model.img_url.indexOf('?') > -1 ? '&x=' : '?') + Date.now();
        }
        else {
          this.failed = true;
          this.trigger('error');
          this.rq = null;
        }
        this.failures++;
        break;
    }
  },
  
  resize: function (ops) {
    ops = ops || {};
    this.buyFormInline = app.state.width >= 1150;
    this.buyFormFullscreen = app.state.width <= 550;
    
    var pWidth, pHeight;
    var screenRatio = app.state.width / app.state.height;
    if (app.state.fullscreen || ua.mobile) {
      pHeight = app.state.height;
      pWidth = app.state.width;
    }
    else {
      pHeight = app.state.height - 88 - (this.model.name ? 54 : 0);
      pWidth = app.state.width - 108;
    }
    if (this.parent.buyFormDisplayed && this.buyFormInline) {
      pWidth = Math.floor(app.state.width / 2);
      pHeight = app.state.height - 60;
      // pHeight = app.state.fullscreen || ua.mobile ? app.state.height 
      //                                             : app.state.height - 60;
    }
    else if (this.parent.buyFormDisplayed && !this.buyFormInline) {
      pWidth = app.state.width - 60;
      pHeight = app.state.height - 60;
    }
    var spaceRatio = pWidth / pHeight;
    if (this.model.ratio > spaceRatio) {
      this.imageWidth = pWidth;
      this.imageHeight = this.imageWidth / this.model.ratio;
    }
    else {
      this.imageHeight = pHeight;
      this.imageWidth = this.imageHeight * this.model.ratio;
    }
    if (this.imageWidth > this.model.width ||
        this.imageHeight > this.model.height) {
      this.imageWidth = this.model.width;
      this.imageHeight = this.model.height;
    }
    if (!ops.notReally) {
      this.imgTag.style.top = 0;
      this.imgTag.style.left = 0;
    }
    
    // fill the screen if close enough 
    if (!this.parent.buyFormDisplayed && (app.state.fullscreen || ua.mobile)) {
      if (screenRatio > this.model.ratio && 
          app.state.width - this.imageWidth < 88) {
        this.imageWidth = app.state.width;
        this.imageHeight = Math.ceil(this.imageWidth / this.model.ratio);
        if (!ops.notReally) {
          this.imgTag.style.top = Math.ceil((
              app.state.height - this.imageHeight) / 2) +'px';
        }
      }
      else if (screenRatio < this.model.ratio && 
               app.state.height - this.imageHeight < 108) {
        this.imageHeight = app.state.height;
        this.imageWidth = Math.ceil(this.imageHeight * this.model.ratio);
        if (!ops.notReally) {
          this.imgTag.style.left = Math.ceil(
              (app.state.width - this.imageWidth) / 2) +'px';
        }
      }
    }
    
    if (this.buyForm && this.parent.buyFormDisplayed) {
      var formWidth = app.state.width - (this.buyFormFullscreen ? 0 : 60);
      var formLeft = this.buyFormFullscreen ? 0 : 30;
      if (this.buyFormInline) {
        formWidth -= this.imageWidth + 30;
      }
      else {
        formLeft = 0;
        formWidth = app.state.width;
        // if (formWidth > 650) {
        //   formLeft += Math.round((formWidth - 650) / 2);
        //   formWidth = 650;
        // }
      }
      
      if (this.parent.buyFormDisplayed && this.buyFormInline) {
        this.imagesRight = 30;
      }
      else {
        this.imagesRight = app.state.fullscreen || ua.mobile ? 0 : 54;
      }
      
      if (formWidth > 650 && this.buyFormInline) {
        var excessSpace = formWidth - 650;
        formWidth = 650;
        formLeft += Math.ceil(excessSpace / 2);
        this.imagesRight += Math.floor(excessSpace / 2);
      }
      this.buyForm.el.style.width = formWidth +'px';
      this.buyForm.el.style.left = formLeft +'px';
    }
    else {
      this.imagesRight = app.state.fullscreen || ua.mobile ? 0 : 54;
    }
    
    if (!ops.notReally) {
      this.img.style.width = this.imageWidth +'px';
      this.img.style.height = this.imageHeight +'px';
      this.imgTag.style.width = this.imageWidth +'px';
      this.imgTag.style.height = this.imageHeight +'px';
      this.imagesEl.style.right = this.imagesRight +'px';
      
      if (this.currentCrop) this.applyCrop();
      
      var focus = this.query('input:focus');
      if (focus) focus.scrollIntoView();
    }
    
    if (!ops.notReally || this.buyFormInline) {      
      this.el.classList.toggle('buy-form-fullscreen', this.buyFormFullscreen);
      this.el.classList.toggle('buy-form-inline', this.buyFormInline);
    }
  },
  
  remove: function () {
    Parent.prototype.remove.apply(this);
    this.imgTag.removeAttribute('src');
    this.el.innerHTML = '';
    this.stopListening();
    if (this.rq) this.rq.abort();
    if (this.image) {
      this.image.removeEventListener('load', this, false);
      this.image.removeEventListener('error', this, false);
      this.image.removeAttribute('src');
      this.image = null;
    }
  },
  
  showBuyForm: function () {
    if (!this.buyForm) {
      this.buyForm = new BuyForm({
        model: this.model,
        parent: this,
        // el: this.query('.buy-form'),
      });
      this.el.appendChild(this.buyForm.el);
      
      this.buyForm.updatePositions();
    }
    else {
      this.buyForm.saveAsDefault = false;
    }
    
    this.buyForm.el.classList.remove('hidden');
    this.parent.buyFormDisplayed = true;
    
    this.resize({ notReally: true });
    if (this.buyFormInline) {
      var imgRect = this.img.getBoundingClientRect();
      var newLeft = app.state.width - this.imagesRight - this.imageWidth;
      var newTop = (app.state.height - this.imageHeight) / 2;
      
      var scaleX = this.imageWidth / imgRect.width;
      var scaleY = this.imageHeight / imgRect.height;
      
      this.img.classList.remove('no-transition');
      this.img.style[ua.css.transform] = 
          'translate('+ (newLeft - imgRect.left) +'px, '+ 
          (newTop - imgRect.top) +'px) scale('+scaleX+', '+scaleY+')';
    }
  },
  
  hideBuyForm: function () {
    if (!this.parent.buyFormDisplayed) return;
    
    this.parent.buyFormDisplayed = false;
    
    this.resize({ notReally: true });
    if (this.buyFormInline) {
      var imgRect = this.img.getBoundingClientRect();
      var titleOffset = !app.state.fullscreen && !ua.mobile && this.model.name
          ? 54 : 0;
      var newLeft = (app.state.width - this.imageWidth) / 2;
      var newTop = (app.state.height - this.imageHeight - titleOffset) / 2;
      // var newTop = (app.state.height - this.imageHeight) / 2;
      
      var scaleX = this.imageWidth / imgRect.width;
      var scaleY = this.imageHeight / imgRect.height;
      
      this.img.classList.remove('no-transition');
      this.img.style[ua.css.transform] = 
          'translate('+ (newLeft - imgRect.left) +'px, '+ 
          (newTop - imgRect.top) +'px) scale('+scaleX+', '+scaleY+')';
    }
    else {
      setTimeout(this.onImageTransitionEnd, 300);
    }
  },

  showShareForm: function (e) {
    if (e && e.preventDefault) e.preventDefault();
    
    if (!this.shareView) {
      this.shareView = new ShareView({
        parent: this,
      });
    }
    
    if (popup.displayedId && popup.displayedId === this.popupId) return;
    this.popupId = popup.show({
      targetEl: e.target,
      content: this.shareView.el,
      minWidth: 1,
    });
  },  
  
  onImageTransitionEnd: function () {
    this.imagesEl.classList[this.parent.buyFormDisplayed ? 'add' : 'remove'](
        'pushed-right');
    if (!this.parent.buyFormDisplayed) this.buyForm.el.classList.add('hidden');
    this.img.classList.add('no-transition');
    this.img.style[ua.css.transform] = 'none';
    this.resize();
    
    if (!this.parent.buyFormDisplayed && !this.inCart) {
      this.buyForm.remove();
      this.buyForm.stopListening();
      this.buyForm = null;
    }
  },
});
