/*==========================================================================*\
  A single photo with its UI elements in the lightbox
\*==========================================================================*/
"use strict";

var app = require('app');
var keyboard = require('app/utils/keyboard');
var ua = require('app/utils/ua');
var _ = require('underscore');

var Parent = require('app/views/base-view');
var i18n = require('app/i18n/i18n');
var popup = require('app/views/global/popup');
var ShareView = require('app/views/global/share');

module.exports = Parent.extend(require('bind-transforms')).extend({
  template: require('app/templates').lightbox.productPhoto,
  loaded: false, // whether the main image has been loaded 
  failures: 0, // number of times main image request has failed 
  imageWidth: 0, // dimensions of an image as currently displayed 
  imageHeight: 0,
  
  props: {
    // whether buy form is to be displayed on next to a photo, not on top
    buyFormInline: ['boolean', true, true],
    
    // whether buy form should span all of viewport without margins 
    buyFormFullscreen: ['boolean', true, true],    
    inCart: ['boolean', true, false],    
  },
  
  bindings: {    
    inCart: {
      type: function (el, val) {
        this.el.classList[val ? 'add' : 'remove']('in-cart');
      },
      // type: 'booleanClass',
      // name: 'in-cart',
    },
  },
  
  initialize: function () {
    Parent.prototype.initialize.apply(this, arguments);

    this.load();
    this.render();
    this.cacheElements({
      imagesEl: '.images',
      img: '.img',
      imgTag: 'img',
      actionsEl: '.actions',
      
    });
    
    this.resize();
   
  },
  
  events: {    
    'click div.action.share': 'showShareForm',
  },
  load: function () {
    if (!this.image) {
      this.image = new Image();
      this.image.addEventListener('load', this, false);
      this.image.addEventListener('error', this, false);
    }
    this.image.src = this.model.img_url;
  },
  
  handleEvent: function (e) {
    switch (e.type) {      
      case 'load':
        this.loaded = true;
        this.trigger('load');
        this.el.classList.add('loaded');
        this.parent.preloading = false;
        this.parent.preloadMore();
        
        this.rq = null;
        this.image.removeEventListener('load', this, false);
        this.image.removeEventListener('error', this, false);
        this.image = null;
        break;
      case 'error':
        console.log('failed to load photo: '+ this.model.img_url, e);
        if (this.failures < 5) {
          this.image.src = this.model.img_url + 
              (this.model.img_url.indexOf('?') > -1 ? '&x=' : '?') + Date.now();
        }
        else {
          this.failed = true;
          this.trigger('error');
          this.rq = null;
        }
        this.failures++;
        break;
    }
  },
  
  resize: function (ops) {
    ops = ops || {};
    
    var rheight = app.state.height;
    var rwidth = app.state.width;
    app.state.height = app.state.height/1.7;
    app.state.width = app.state.width/1.7;

    var pWidth, pHeight;
    var screenRatio = app.state.width / app.state.height;
    if (app.state.fullscreen || ua.mobile) {
      pHeight = app.state.height;
      pWidth = app.state.width;
    }
    else {
      pHeight = app.state.height - 88 - (this.model.name ? 54 : 0);
      pWidth = app.state.width - 108;
    }
    
    var spaceRatio = pWidth / pHeight;
    if (this.model.ratio > spaceRatio) {
      this.imageWidth = pWidth;
      this.imageHeight = this.imageWidth / this.model.ratio;
    }
    else {
      this.imageHeight = pHeight;
      this.imageWidth = this.imageHeight * this.model.ratio;
    }
    if (this.imageWidth > this.model.width ||
        this.imageHeight > this.model.height) {
      this.imageWidth = this.model.width;
      this.imageHeight = this.model.height;
    }
    if (!ops.notReally) {
      this.imgTag.style.top = 0;
      this.imgTag.style.left = 0;
    }
    
    // fill the screen if close enough 
    if (app.state.fullscreen || ua.mobile) {
      if (screenRatio > this.model.ratio && 
          app.state.width - this.imageWidth < 88) {
        this.imageWidth = app.state.width;
        this.imageHeight = Math.ceil(this.imageWidth / this.model.ratio);
        if (!ops.notReally) {
          this.imgTag.style.top = Math.ceil((
              app.state.height - this.imageHeight) / 2) +'px';
        }
      }
      else if (screenRatio < this.model.ratio && 
               app.state.height - this.imageHeight < 108) {
        this.imageHeight = app.state.height;
        this.imageWidth = Math.ceil(this.imageHeight * this.model.ratio);
        if (!ops.notReally) {
          this.imgTag.style.left = Math.ceil(
              (app.state.width - this.imageWidth) / 2) +'px';
        }
      }
    }
    
    if (!ops.notReally) {
      this.img.style.width = this.imageWidth +'px';
      this.img.style.height = this.imageHeight +'px';
      this.imgTag.style.width = this.imageWidth +'px';
      this.imgTag.style.height = this.imageHeight +'px';
      this.imagesEl.style.right = this.imagesRight +'px';
      
      var focus = this.query('input:focus');
      if (focus) focus.scrollIntoView();
    }
    
    app.state.height = rheight;
    app.state.width = rwidth;
  },
  
  remove: function () {
    Parent.prototype.remove.apply(this);
    this.imgTag.removeAttribute('src');
    this.el.innerHTML = '';
    this.stopListening();
    if (this.rq) this.rq.abort();
    if (this.image) {
      this.image.removeEventListener('load', this, false);
      this.image.removeEventListener('error', this, false);
      this.image.removeAttribute('src');
      this.image = null;
    }
  },
  showShareForm: function (e) {
    if (e && e.preventDefault) e.preventDefault();
    
    if (!this.shareView) {
      this.shareView = new ShareView({
        parent: this,
      });
    }
    
    if (popup.displayedId && popup.displayedId === this.popupId) return;
    this.popupId = popup.show({
      targetEl: e.target,
      content: this.shareView.el,
      minWidth: 1,
    });
  },  
  
});
