/*==========================================================================*\
  A single photo with its UI elements in the lightbox
\*==========================================================================*/
"use strict";

var app = require('app');
var ua = require('app/utils/ua');
var $ = require('jquery');
var Parent = require('app/views/base');
var bindTransforms = require('bind-transforms');
var language = require('app/language');
var imgCount = 0;

module.exports = Parent.extend(bindTransforms).extend({
  template: require('app/templates').lightbox.photo,
  loaded: false, // whether the main image has been loaded 
  failures: 0, // number of times main image request has failed 
  language: language,
  imageWidth: 0, // dimensions of an image as currently displayed 
  imageHeight: 0, 
  
  initialize: function () {
    Parent.prototype.initialize.apply(this, arguments);
    this.load();
    // this.image = new Image();
    // this.image.addEventListener('load', this, false);
    // this.image.addEventListener('error', this, false);
    // this.image.src = this.model.url;
    this.render();
    this.cacheElements({
      img: '.img',
      imgTag: 'img',
    });
    // console.log('image '+ imgCount++);
    this.resize();
  },
  
  events: {
    
  },
  
  load: function () {
    // var rq = this.rq = new app.XHR();
    // rq.addEventListener("progress", this, false);
    // rq.addEventListener("load", this, false);
    // rq.addEventListener("error", this, false);
    // rq.open('get', this.model.url, true);
    // rq.send();
    
    if (!this.image) {
      this.image = new Image({language:language});
      this.image.addEventListener('load', this, false);
      this.image.addEventListener('error', this, false);
    }
    // this.image.addEventListener('progress', this, false);
    this.image.src = this.model.url;
    
    // var self = this;
    // self.parent.preloading = true;
    // $.ajax(this.model.url, {
    //   success: function () {
    //     console.log('image request success');
    //     self.loaded = true;
    //     self.trigger('load');
    //     self.el.classList.add('loaded');
    //     // console.log('loaded image');
    //     self.parent.preloading = false;
    //     self.parent.preloadMore();
    //     // self.trigger('complete');
    //   },
    //   complete: function () {
    //     console.log('image request complete', arguments);
    //   },
    // });
  },
  
  handleEvent: function (e) {
    switch (e.type) {
      case 'progress':
        console.log('progress', Math.round(e.loaded / e.total * 100));
      break;
      case 'load':
        this.loaded = true;
        this.trigger('load');
        this.el.classList.add('loaded');
        // console.log('loaded image');
        this.parent.preloading = false;
        this.parent.preloadMore();
        // this.trigger('complete');
        
        this.rq = null;
        this.image.removeEventListener('load', this, false);
        this.image.removeEventListener('error', this, false);
        this.image = null;
        break;
      case 'error':
        console.log('failed to load photo: '+ this.model.url);
        console.log(e);
        if (this.failures < 5) {
          // this.load();
          this.image.src = this.model.url + 
              (this.model.url.indexOf('?') > -1 ? '&x=' : '?') + Date.now();
        }
        else {
          this.failed = true;
          this.trigger('error');
          this.rq = null;
          // this.image.removeEventListener('load', this, false);
          // this.image.removeEventListener('error', this, false);
          // this.image = null;
        }
        this.failures++;
        break;
    }
  },
  
  resize: function () {
    var pWidth, pHeight;
    var screenRatio = app.state.width / app.state.height;
    if (app.state.fullscreen || ua.mobile) {
      pHeight = app.state.height;
      pWidth = app.state.width;
    }
    else {
      pHeight = app.state.height - 88 - (this.model.name ? 54 : 0);
      pWidth = app.state.width - 108;
    }
    var spaceRatio = pWidth / pHeight;
    if (this.model.ratio > spaceRatio) {
      this.imageWidth = pWidth;
      this.imageHeight = this.imageWidth / this.model.ratio;
    }
    else {
      this.imageHeight = pHeight;
      this.imageWidth = this.imageHeight * this.model.ratio;
    }
    if (this.imageWidth > this.model.orig_width ||
        this.imageHeight > this.model.orig_height) {
      this.imageWidth = this.model.orig_width;
      this.imageHeight = this.model.orig_height;
    }
    this.imgTag.style.top = 0;
    this.imgTag.style.left = 0;
    if (app.state.fullscreen || ua.mobile) {
      if (screenRatio > this.model.ratio && 
          app.state.width - this.imageWidth < 88) {
        this.imageWidth = app.state.width;
        this.imageHeight = Math.ceil(this.imageWidth / this.model.ratio);
        this.imgTag.style.top = Math.ceil((app.state.height - this.imageHeight) / 2) + 'px';
      }
      else if (screenRatio < this.model.ratio && 
               app.state.height - this.imageHeight < 108) {
        this.imageHeight = app.state.height;
        this.imageWidth = Math.ceil(this.imageHeight * this.model.ratio);
        this.imgTag.style.left = Math.ceil((app.state.width - this.imageWidth) / 2) + 'px';
      }
    }
    this.img.style.width = this.imageWidth +'px';
    this.img.style.height = this.imageHeight +'px';
    this.imgTag.style.width = this.imageWidth +'px';
    this.imgTag.style.height = this.imageHeight +'px';
  },
  
  remove: function () {
    Parent.prototype.remove.apply(this);
    this.imgTag.removeAttribute('src');
    this.el.innerHTML = '';
    this.stopListening();
    if (this.rq) this.rq.abort();
    if (this.image) {
      this.image.removeEventListener('load', this, false);
      this.image.removeEventListener('error', this, false);
      this.image.removeAttribute('src');
      this.image = null;
    }
  },
});
