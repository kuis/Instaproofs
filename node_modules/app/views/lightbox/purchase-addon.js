/*==========================================================================*\
  A purchase option in the buy form
\*==========================================================================*/
"use strict";

var app = require('app');
var ua = require('app/utils/ua');
var popup = require('app/views/popup');
var Parent = require('app/views/base');
var OptionsView = require('app/views/lightbox/purchase-addon-options');

module.exports = Parent.extend({
  template: require('app/templates').lightbox['purchase-addon'],
  
  popupId: null, // ID of this view's currently displayed popup
  
  props: {
    active: ['boolean', true, false],
    price: ['number', true, 0],
    selected_id: 'number',
  },
  
  bindings: {
    active: {
      type: 'booleanClass',
      name: 'active',
    },
    price: {
      type: function (el, val) {
        el.innerHTML = '+' + this.model.formatMoney(val);
      },
      selector: '.price',
    },
    selected_id: {
      type: function (el, id) {
        if (!id || !this.model.options.length) return;
        var option = this.model.options.get(id);
        this.nameEl.innerHTML = option.name;
        this.price = option.price;
      },
    }
  },
  
  // initialize: function () {
  //   Parent.prototype.initialize.apply(this, arguments);
  // },
  
  events: {
    'click': 'onClick',
  },
  
  onClick: function () {
    if (!this.model.options.length) {
      this.active = !this.active;
      this.updatePrice();
    }
    else {
      this.showOptions();
    }
  },
  
  render: function () {
    // console.trace();
    // if (!this.parent.collection) return;
    this.renderWithTemplate();
    this.cacheElements({
      nameEl: '.name',
      priceEl: '.price',
    });
    
    if (this.model.options.length) {
      this.selected_id = this.model.options.where({ selected: true })[0].id;
    }
    if (this.model) this.updatePrice(true);
  },
  
  showOptions: function () {
    if (!this.optionsView) {
      this.optionsView = new OptionsView({
        collection: this.model.options,
        model: this.model,
        parent: this,
        
      });
    }
    
    if (popup.displayedId && popup.displayedId === this.popupId) return;
    this.popupId = popup.show({
      targetEl: this.el,
      content: this.optionsView.el,
    });
  },
  
  updatePrice: function (noBubbling) {
    if (!this.model.options.length) {
      this.price = this.model.price;
    }
    else {
      this.price = this.model.options.get(this.selected_id).price;
    }
    if (!noBubbling) this.parent.parent.updatePrice();
  },

});
