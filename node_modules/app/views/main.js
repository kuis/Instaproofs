/*==========================================================================*\
  This root view holds all content that goes into <body>
  It's initialized and rendered right away on app load
\*==========================================================================*/
"use strict";

var app = require('app/index');
var Parent = require('app/views/base');

var $ = require('jquery');
var PageSwitcher = require('app/utils/page-switcher');
var fs = require('app/utils/fullscreen');
var ua = require('app/utils/ua'); 
var NavView = require('app/views/nav');
var SplashView = require('app/views/splash');
var language = require('app/language');

require('fastclick')(document.body);

module.exports = Parent.extend({
  
  scrollTop: 0, // currently handled scroll position
  newScrollTop: 0, // about to be handled scroll position
  scrollTimer: null, // timer for toggling scrolling/not-scrolling global class
  scrollRaf: null, // requestAnimationFrame ID for scroll handler
  
  handleEvent: function (e) {
    switch (e.type) {
      case 'scroll': 
        if (!this.scroll.pending) {
          this.scroll.pending = this.scheduleRead(this.readScroll);
        }
        break;
    }
  },
  
  initialize: function () {
    Parent.prototype.initialize.apply(this, arguments);
    
    // this.el.addEventListener('wheel', function (e) {
    //   e.preventDefault();
    //   return false;
    // });
    // this.query('body').addEventListener('wheel', function (e) {
    //   e.preventDefault();
    //   return false;
    // });
    
    // scroll handling data
    this.scroll = {
      top: 0, // last registered or handled scroll position
      lastTop: 0, // previously handled scroll position 
      bottom: 0, // last registered or handled scroll distance to bottom
      max: 0, // maximum amount of scroll possible with current content 
      pending: null, // schedule ID if scroll read or handl is scheduled
      hiddenNav: false, // whether header and footer bars should be hidden
    };
    this.readScroll = this.readScroll.bind(this);
    this.handleScroll = this.handleScroll.bind(this);
    this.removeScrollingClass = this.removeScrollingClass.bind(this);
    
    // var app = window.app;
    $(this.el).addClass(ua.className)
              .toggleClass('fullscreen-available', fs.supported);
    // document.documentElement.className = ua.className;
    
    // init the fixed header
    this.nav = new NavView({ el: this.query('nav'), language: language });
    
    // init and configure our page switcher
    this.pageSwitcher = new PageSwitcher(this.query('main'));
    
    localStorage.removeItem('skipSplash');
    if (app.storage.skipSplash !== '1') {
      this.splashView = new SplashView({ el: this.query('#splash'), language: language });
      localStorage.skipSplash = '';
    }
    
    // this marks the correct nav item selected
    this.listenTo(app.router, 'page', this.handleNewPage);
    
    
    this.model.noTransitions = ua.mobile || !!app.storage.noTransitions;
    if (this.model.noTransitions) {
      window.addEventListener('scroll', this, false);
    }
    
    this.model.darkMode = !!app.storage.darkMode;
    
    
  },
  
  events: {
    'click a[href]': 'onLinkClick',
    'click nav, #footer': 'onNavClick',
    // mousemove: 'onMouseMove',
  },
  
  bindings: {
    'model.pageTransition': { type: 'class' },
    'model.splashState': { type: 'class' },
    'model.hiddenNav': { 
      type: 'booleanClass',
      name: 'hidden-nav',
    },
    'model.noPointerEvents': { 
      type: 'booleanClass',
      name: 'no-pointer-events',
    },
    'model.noTransitions': { 
      type: 'booleanClass',
      yes: 'no-transitions',
      no: 'transitions-enabled',
    },
    'model.darkMode': { 
      type: 'booleanClass',
      yes: 'dark-mode',
      no: 'light-mode',
    },
    
    'model.scrolling': { 
      type: 'booleanClass',
      yes: 'scrolling',
      no: 'not-scrolling',
    },
    
    'model.fullscreen': { 
      type: 'booleanClass',
      name: 'fullscreen',
      // yes: 'fullscreen',
      // no: 'fullscreen',
    },
  },

  handleNewPage: function (view) {
    this.pageSwitcher.set(view);
  },
  
  // onMouseMove: function (e) {
  //   if (!e || !('pageY' in e)) return;
  //   if (this.model.darkMode) return;
  //   var y = e.pageY;
  //   console.log(y);
  //   if (y <= 44) this.model.hiddenNav = false;
  //    // = y > 44;
  // },
  
  readScroll: function () {
    this.scroll.pending = false;
    var top = window.pageYOffset;
    if (top === this.scroll.top) return;
    this.scroll.lastTop = this.scroll.top;
    this.scroll.top = top;
    this.scroll.max = document.body.scrollHeight - this.model.height;
    var bottom = this.scroll.bottom = this.scroll.max - top;
    this.scroll.hiddenNav = top > this.scroll.lastTop && top > 1 && bottom > 1
                            && top + bottom >= 1000;
                    
    var page = app.currentPage;
    
    if (page.onScroll || page.onNearBottom && bottom <= page.nearBottomDistance 
        || this.scroll.hiddenNav !== app.state.hiddenNav) {
      this.scroll.pending = this.scheduleWrite(this.handleScroll, 'high');
    }
    
    this.model.scrolling = true;
    clearTimeout(this.scrollTimer);
    this.scrollTimer = setTimeout(this.removeScrollingClass, 250);
  },
  handleScroll: function () {
    this.scroll.pending = false;
    if (!app.currentPage) return;
    var page = app.currentPage;
    
    if (page.onNearBottom && this.scroll.bottom <= page.nearBottomDistance) {
      page.onNearBottom(this.scroll.bottom, this.scroll.top);
    }
    
    app.state.hiddenNav = this.scroll.hiddenNav;
    if (page.onScroll) page.onScroll(this.scroll.top, this.scroll.lastTop);
    
    page.scroll.top = this.scroll.top;
  },
  removeScrollingClass: function () {
    this.model.scrolling = false;
  },
  
  
  /*==========================================================================*\
    Scroll to top when clicking an empty area on fixed header or footer
  \*==========================================================================*/
  onNavClick: function (e) {
    if (e.target.tagName.toLowerCase() === 'a') return;
    // console.log('scroll to top', e.target.tagName);
    if (!app.state.noTransitions) {
      if (app.currentPage && app.currentPage.scroller) {
        app.currentPage.scroller.scrollTop = 0;
      }
    }
    else {
      document.documentElement.scrollTop = 0;
      document.body.scrollTop = 0;
    }
  },
  
  
  
  /*==========================================================================*\
    Handle internal links 
  \*==========================================================================*/
  onLinkClick: function (e) {
    var link = $(e.target).closest('a')[0];
    if (!link) return;
    if (link.host !== window.location.host) return; // only use local URLs
    if (e.button === 1) return; // ignore middle-clicks 
    if (e.ctrlKey || e.shiftKey || e.altKey || e.metaKey) return; // no mods
    if (link.getAttribute('bypass')) return; // explicitly bypassed links 
    
    e.preventDefault();
    var hashIndex = link.href.indexOf('#');
    app.navigate(hashIndex > -1 ? link.href.substr(hashIndex+1) : '');
    return false;
  },
  
  
});
