/*==========================================================================*\
  A single photo on the grid
\*==========================================================================*/
"use strict";

var app = require('app');
var Parent = require('app/views/base-view');
var bindTransforms = require('bind-transforms');

module.exports = Parent.extend(bindTransforms).extend({
  template: require('app/templates').category.thumb,
  displayed: false, // whether the photo has been or just about to be displayed 

  initialize: function () {
    this.drawImage = this.drawImage.bind(this);
    this.onLoad = this.onLoad.bind(this);
    Parent.prototype.initialize.apply(this, arguments);
    this.render();
    this.cacheElements({
      imageContainer: '.image',
    });
  },
  
  events: {
  },
  
  loadImage: function () {
    if (this.loading || this.loaded) return;
    this.loading = true;
    
    if (!this.image) this.image = document.createElement('img');
    this.image.addEventListener('load', this, false);
    this.image.addEventListener('error', this, false);
    this.image.src = this.model.thumb_url;
    
    this.imageContainer.appendChild(this.image);
  },
  
  handleEvent: function (e) {
    if (!this.loading) return;
    switch (e.type) {
      case 'load':
        this.loaded = true;
        app.loadedImages[this.model.thumb_url] = true;
        this.trigger('load');
        this.drawImage();
       
        this.image.removeEventListener('load', this, false);
        this.image.removeEventListener('error', this, false);
        break;
      case 'error':
        console.log('failed to load photo: '+ this.model.url, arguments);
        if (this.failures < 5) {
          this.load();
          // this.image.src = this.model.url + 
          //     (this.model.url.indexOf('?') > -1 ? '&x=' : '?') + Date.now();
        }
        else {
          this.failed = true;
          this.trigger('error');
          // this.rq = null;
          this.image.removeEventListener('load', this, false);
          this.image.removeEventListener('error', this, false);
          this.image = null;
        }
        this.failures++;
        break;
    }
    
    this.parent.loadingCount--;
    this.parent.loadPhotos();
  },
  
  onLoad: function () {
    app.loadedImages[this.model.thumb_url] = true;
  },
  
  drawImage: function () {
    this.scheduleWrite(function () {
      this.el.classList.add('loaded');
      this.el.firstChild.style.backgroundImage = 
          'url('+this.model.thumb_url+')';
    }, 'high');
  },
});
