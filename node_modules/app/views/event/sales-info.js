/*==========================================================================*\
  A description of current event's sales 
\*==========================================================================*/
"use strict";

var app = require('app');
var moment = require('moment');
var Parent = require('app/views/base-view');

module.exports = Parent.extend({
  template: require('app/templates').event['sales-info'],
  
  props: {
    active: ['boolean', true, false],
    price: ['number', true, 0],
    selected_id: 'number',
  },
  
  bindings: {
    active: {
      type: 'booleanClass',
      name: 'active',
    },
    price: {
      type: function (el, val) {
        el.innerHTML = !this.model.discount 
            ? ('+' + this.model.formatMoney(val))
            : ('-' + this.model.formatMoney(this.model.discountAmount));
      },
      selector: '.price',
    },
    selected_id: {
      type: function (el, id) {
        // if (!id || !this.model.options.length) return;
        if (!this.model.options.length || id === undefined) return;
        var option = id === 0 ? this.model.options.at(0) 
                              : this.model.options.get(id);
        this.nameEl.innerHTML = id ? option.name : this.model.name;
        this.price = option.price;
      },
    },
    'model.discount.expiration': {
      type: function (el, expiration) {
        if (expiration === 0) { // expired
          this.model.collection.remove(this.model);
          this.parent.parent.buyForm.updatePositions();
        }
        if (!expiration) return;
        if (typeof expiration === 'number') {
          var left = moment.duration(expiration);
          
          el.innerHTML = this.lz('Discount ending in %s', 
              this.toDoubleDigit(left.days() * 24 + left.hours()) +':'+ 
              this.toDoubleDigit(left.minutes()) +':'+ 
              this.toDoubleDigit(left.seconds()));
        }
        else {
          el.innerHTML = this.lz('Discount ending %s', 
                                 this.model.discount.expires);
        }
      },
      selector: '.name.discount',
    },
  },
  
  // initialize: function () {
  //   Parent.prototype.initialize.apply(this, arguments);
  //   if (this.model.discount) {
  //     this.listenTo(app.clock, 'change:seconds', this.updateDiscount);
  //   }
  // },
  
  events: {
    'click .main': 'onClick',
    'click .info': 'showDescription',
  },
  
  onClick: function () {
    if (this.model.options.length <= 1) {
      this.active = !this.active;
      this.updatePrice();
    }
    else {
      this.showOptions();
    }
  },
  
  render: function () {
    // console.trace();
    // if (!this.parent.collection) return;
    this.renderWithTemplate();
    this.cacheElements({
      nameEl: '.name',
      priceEl: '.price',
      info: '.info',
    });
    
    if (this.model.options.length > 1) {
      var selected_option = this.model.options.where({ selected: true })[0];
      if (selected_option) {
        this.selected_id = selected_option.id;
      }
    }
    if (this.model) this.updatePrice(true);
  },
  
  showDescription: function (e) {
    if (popup.displayedId && popup.displayedId === this.popupId) return;
    this.popupId = popup.show({
      title: this.model.full_name || this.model.name,
      content: this.model.description,
      image: this.model.img_url ? {
        src: this.model.img_url,
        width: this.model.img_width,
        height: this.model.img_height,
      } : null,
      targetEl: this.info,
    });
  },
  
  showOptions: function () {
    if (!this.optionsView) {
      this.optionsView = new OptionsView({
        collection: this.model.options,
        model: this.model,
        parent: this,
      });
    }
    
    if (popup.displayedId && popup.displayedId === this.popupId) return;
    this.popupId = popup.show({
      targetEl: this.el,
      content: this.optionsView.el,
    });
  },
  
  updatePrice: function (noBubbling) {
    var sizeId = this.parent.parent.model.size_id;
    // var sizeId = this.model.collection.parent.size_id;
    if (this.model.options.length <= 1) {
      if (this.model.options.length) {
        this.price = this.model.options.at(0).getPrice(sizeId);
      }
      else {
        this.price = this.model.price;
      }
    }
    else {
      this.price = this.selected_id ? 
          this.model.options.get(this.selected_id).getPrice(sizeId) : 0;
    }
    if (!noBubbling) this.parent.parent.updatePrice();
  },

});
