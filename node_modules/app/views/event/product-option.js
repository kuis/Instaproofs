/*==========================================================================*\
  A product option in the product popup
\*==========================================================================*/
"use strict";

var ua = require('app/utils/ua');
var Parent = require('app/views/base-view');
var popup = require('app/views/global/popup');

module.exports = Parent.extend({
  template: require('app/templates').event['product-option'],
  
  popupId: null, // ID of this view's currently displayed description popup
  
  props: {
    active: ['boolean', true, false],
    doesUnwrap: ['boolean', true, false],
    singlePrice: ['number', true, 0],
    price: ['number', true, 0],
    qty: ['number', true, 0],
    // photo: 'object',
    
    // currently selected option (e.g. for displaying crop)
    selected: ['boolean', true, false], 
    
    // whether Plus and Minus buttons are displayed in mobile view 
    qtyInputMode: ['boolean', true, false],
    
    // whether buy form should span all of viewport without margins 
    buyFormFullscreen: ['boolean', true, true],
    
    crop: 'state', // crop state for this option
    cropIconWidth: ['number', true, 0], // width of a crop miniature
  },
  
  bindings: {
    // 'photo': function () {
    //   this.selected = this.photo.currentCrop === this.crop;
    // },
    
    buyFormFullscreen: {
      type: function (el, val) {
        el.readOnly = !!val;
        el.disabled = !!val;
      },
      selector: '.qty input',
    },
    'crop.changed': {
      type: 'booleanClass',
      name: 'custom-crop',
    },
    active: {
      type: 'booleanClass',
      name: 'active',
    },
    doesUnwrap: {
      type: 'booleanClass',
      name: 'has-addons',
    },
    price: {
      type: function (el, val) {
        el.innerHTML = this.model.formatMoney(val);
      },
      selector: '.head .price.final',
    },
    selected: {
      type: 'booleanClass',
      name: 'selected',
    },
    singlePrice: {
      type: function (el, val) {
        el.innerHTML = this.model.formatMoney(val);
      },
      selector: '.head .price.single',
    },
    qty: {
      type: 'value',
      selector: '.qty input',
    },
    qtyInputMode: {
      type: 'booleanClass',
      name: 'qty-input-mode',
    },
  },
  
  initialize: function () {
    Parent.prototype.initialize.apply(this, arguments);
    this.doesUnwrap = !!(this.model.description || 
        this.model.allow_notes || this.model.required_size_list.length);
    // this.hasAddons = !!this.model.addons.length;
    this.singlePrice = this.model.price;
    this.listenTo(this, 'change:active', this.updateFolding);
    this.productView = this.parent.parent;
  },
  
  events: {
    'click .plus': 'plus',
    'click .minus': 'minus',
    'click .head': 'onHeadClick',
    'click .checkbox': 'onCheckboxClick',
    'click .qty input': 'onQtyClick',
    'focus .qty input': 'focusQty',
    'keyup .qty input': 'onQtyKeyup',
    'change .qty input': 'updatePrice',
    'click .info': 'showDescription',
    'click .sizes .tip': 'showSizesTip',
  },
  
  onQtyClick: function () {
    if (this.buyFormFullscreen) {
      this.qtyInputMode = !this.qtyInputMode;
    }
    else {
      this.focusQty();
    }
  },
  onQtyKeyup: function (e) {
    if (e.keyCode === 10 || e.keyCode === 13) {
      this.qtyInput.blur();
      e.preventDefault();
    }
    this.qtyInput.value = this.qtyInput.value.replace(/[^\d]/g, '')
                                             .replace(/^0+/, '');
    if (!this.qtyInput.value) {
      this.qtyInput.value = '0';
      this.qtyInput.select();
    }
    this.updatePrice();
  },
  focusQty: function () {
    this.qtyInput.focus();
    this.qtyInput.select();
    var self = this;
    setTimeout(function () {
      self.qtyInput.focus();
      self.qtyInput.select();
      setTimeout(function () {
        if (self.qtyInput.scrollIntoView) {
          self.qtyInput.scrollIntoView(false);
        }
      });
    }, 100);
  },
  plus: function (e) {
    // var old = Math.round(+this.qtyInput.value || 0);
    var multi = 1;
    if (e && e.altKey) multi *= 10;
    if (e && e.shiftKey) multi *= 5;
    // this.qtyInput.value = old + 1 * multi;
    this.qty += 1 * multi;
    this.updatePrice();
  },
  minus: function (e) {
    // var old = Math.round(+this.qtyInput.value || 0);
    var multi = 1;
    if (e && e.altKey) multi *= 10;
    if (e && e.shiftKey) multi *= 5;
    // var newVal = old - 1 * multi;
    // this.qtyInput.value = newVal < 0 ? 0 : newVal;
    
    this.qty -= this.qty - 1 * multi < 0 ? 0 : 1 * multi;
    this.updatePrice();
  },
  
  onHeadClick: function () {
    // if (!this.model.size.no_qty) return;
    // this.active = !this.active;
    // this.updatePrice();
  },
  onCheckboxClick: function () {
    if (!this.model.size.no_qty) return;
    this.active = !this.active;
    this.updatePrice();
  },
  
  render: function () {
    if (this.parent.collection) {
      this.renderWithTemplate();
      this.cacheElements({
        qtyInput: '.qty input',
        finalPrice: '.price.final',
        wrap: '.wrap',
        info: '.info',
        tip: '.sizes .tip',
      });
    }
  },
  
  select: function () {
    this.selected = true;
    var photo = this.parent.parent.parent;
    
    photo.enterCropping(this.crop);
  },
  deselect: function () {
    this.selected = false;
  },
  
  showDescription: function (e) {
    // if (e && e.preventDefault) {
    //   e.preventDefault();
    //   e.stopPropagation();
    // }
    var id = +e.target.closest('tr').getAttribute('data-size-id');
    var size = this.model.required_size_list.get(id).size;
    // if (e && e.target && e.target.closest('.purchase-addon')) return;
    if (popup.displayedId && popup.displayedId === this.popupId) return;
    this.popupId = popup.show({
      title: size.long_name,
      content: size.description,
      image: size.img_url ? {
        src: size.img_url,
        width: size.img_width,
        height: size.img_height,
      } : null,
      targetEl: this.info,
    });
  },
  
  showSizesTip: function () {
    // if (e && e.preventDefault) {
    //   e.preventDefault();
    //   e.stopPropagation();
    // }
    // if (e && e.target && e.target.closest('.purchase-addon')) return;
    if (popup.displayedId && popup.displayedId === this.popupId) return;
    this.popupId = popup.show({
      // title: size.long_name,
      content: this.lz("When you put photos in your cart, "+
          "you will be able to add photos to this product "+
          "instead of (or in addition to) "+
          "buying a photo separately."),
      targetEl: this.tip,
    });
  },
  
  updateFolding: function () { // fold or unfold the option
    this.parent.parent.updatePositions();
  },
  
  updatePrice: function () {
    var singlePrice = this.model.price;
    var price;
    var qty;
    
    
    qty = Math.round(+this.qtyInput.value || 0);
    if (qty < 0) {
      qty = -qty;
      this.qtyInput.value = qty;
    }
    this.qty = qty;
    this.active = qty > 0;
    
    if (this.addonsView) {
      var addons = this.addonsView.views;
      for (var i = 0; i < addons.length; i++) {
        if (addons[i].active || addons[i].model.options.length) {
          singlePrice += addons[i].price;
        }
      }
    }
    
    price = qty * singlePrice;
    
    this.singlePrice = singlePrice;
    this.price = price;
    this.active = !!price;
    
    this.parent.parent.updatePrice();
    
    // this.el.classList[!price ? 'remove' : 'add']('active');
  },

});
