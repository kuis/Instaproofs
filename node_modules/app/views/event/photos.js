/*==========================================================================*\
  Photos Grid
\*==========================================================================*/
"use strict";

var Parent = require('app/views/base');

// width breakpoints: reaching a breakpoint adds a column, starting from 1
var breakpoints = [250, 550, 900];

var _ = require('underscore');
var $ = require('jquery');
var app = require('app');
var ua = require('app/utils/ua');
var PhotoView = require('app/views/event/photo');

function returnHeight(column) { return column.height; }

module.exports = Parent.extend({
  
  pageIsActive: true, // whether the category page is currently active 
  height: 0, // current grid height
  loadingCount: 0, // number of currently loading images 
  displayedCount: 0, // number of items that is or about to be displayed 
  scheduledRender: null, // schedule ID for throttled rendering 
  
  // when the scrolling has triggered another batch to show,
  // but we still haven't rendered the previous one
  pendingRender: false, 
  
  
  initialize: function (ops) {
    Parent.prototype.initialize.apply(this, arguments);
    var self = this;
    
    this.preview = !!ops.preview;
    this.photoViews = []; 
    this.renderQueue = [];
    if (this.collection.length) {
      this.resize();
      if (this.collection.length) {
        this.scheduleWrite(this.preloadViews, 'normal');
      }
    }
    else {
      this.listenToOnce(this.collection.parent.collection.parent, 
                        'change:complete', this.preloadViews);
      this.listenToOnce(this.collection.parent.collection.parent, 
                        'change:complete', this.resize);
    }
    this.listenTo(app.state, 'resize', this.resize);
    
    this.listenTo(app.router, 'page', function (page, id) {
      if (app.router.lightboxMode || 
          id !== 'category'+ this.collection.parent.page_id) {
        self.pageIsActive = false;
      }
    });
    this.listenTo(app.router, 'page:category'+ this.collection.parent.page_id, function () {
      if (!app.router.lightboxMode) {
        self.pageIsActive = true;
        console.log('page event');
        self.loadPhotos();
      }
    });
    
  },
  
  events: {
    'touchstart a': function (e) {
      console.log('click', e.target);
    },
  },
  
  render: function () {
    return this;
  },
  
  resize: function () {
    var width = app.state.contentWidth;
    var height = app.state.contentHeight;
    var columnsNum = 1;
    // var gutterSize = this.gutterSize = Math.ceil(width / 100);
    var gutterSize = this.gutterSize = 10;
    
    this.height = 0;
    
    var i = 0;
    while (breakpoints[i++] <= width) columnsNum++; // set number of columns 
    
    // make sure that portrait images always fit the height
    // (at least the ones with height of 1.5 width or less)
    while (width > height && (1.5 * width / columnsNum > height)) {
      columnsNum++;
    }
    
    var columnWidth = (width - gutterSize * (columnsNum - 1)) / columnsNum;
    this.columnWidth = Math.round(columnWidth);
    
    this.columns = [];
    var coveredWidth = 0;
    for (i = 0; i < columnsNum; i++) {
      this.columns[i] = {
        width: i < columnsNum - 1 ? Math[i % 2 ? 'floor' : 'ceil'](columnWidth)
                                  : width - coveredWidth,
        left: +coveredWidth,
        height: 0,
      };
      coveredWidth += this.columns[i].width + gutterSize;
    }
    
    if (!this.displayedCount) this.showMore();
    else this.showPhotos();
  },
  
  preloadViews: function () {
    var notRendered = !this.photoViews.length ? this.collection : 
        this.collection.last(this.collection.length - this.photoViews.length);
    var offset = this.collection.length - notRendered.length;
    for (var i = 0; i < notRendered.length; i++) {
      this.photoViews.push(new PhotoView({
        model: this.collection.at(offset + i),
        parent: this,
      }));
    }
  },
  loadPhotos: function () {
    if (!this.pageIsActive) return;
    for (var i = 0; i < this.photoViews.length; i++) {
      if (this.loadingCount >= 3) break;
      
      if (this.photoViews[i].displayed && !this.photoViews[i].loading &&
          !this.photoViews[i].loaded) {
        // console.log(i);
        this.photoViews[i].loadImage();
        this.loadingCount++;
      }
    }
  },
  
  // show a number of photos =================================================
  showPhotos: function (initial) {
    for (var i = 0; i < this.columns.length; i++) {
      this.columns[i].height = 0;
    }
    for (i = 0; i < this.displayedCount; i++) {
      if (!this.photoViews[i]) this.photoViews[i] = new PhotoView({
        model: this.collection.at(i),
        parent: this,
      });
      this.showPhoto(this.photoViews[i], initial);
      
      if (!app.state.noTransitions && initial && 
          _.min(this.columns, returnHeight).height > app.state.height - 200) break;
    }
    if (initial) this.displayedCount = i;
    this.scheduleWrite(function () {
      this.el.style.height = _.max(this.columns, returnHeight).height + 'px';
    }, 'high');
  },
  
  showPhoto: function (photo, initial) {
    var model = photo.model;
    var column = _.min(this.columns, returnHeight);
    
    
    // model.width = column.width;
    // model.height = Math.floor((model.orig_height / model.orig_width) 
    //              * this.columnWidth );
    // model.xPos = +column.left;
    // model.yPos = +column.height;
    
    var height = Math.floor((model.orig_height / model.orig_width) 
                 * this.columnWidth);
    photo.el.style.width = column.width + 'px';
    photo.el.style.height = height + 'px';
    
    photo.el.style.left = column.left +'px';
    photo.el.style.top = column.height +'px';
    
    column.height += height + this.gutterSize;
    
    // this.loadingQueue.push(photo);
    // photo.model.
    
    if (!photo.displayed) {
      photo.displayed = true;
      // this.el.appendChild(photo.el);
      if (initial) this.el.appendChild(photo.el); // page is not in the DOM yet
      else if (ua.mobile) { // on mobile we only add on tap, so no throttling
        this.scheduleWrite(function () {
          this.el.appendChild(photo.el);
        }, 'high');
      }
      else { // add photos incrementaly
        this.renderQueue.push(photo);
        // this.scheduleWrite(function () {
        //   this.el.appendChild(photo.el);
        // }, 'high');
        // this.scheduleWrite(this.renderPhoto, 'high');
        if (!this.scheduledRender) {
          this.scheduledRender = this.scheduleWrite(this.renderPhoto, 'normal');
        }
      }
    }
    
    this.loadPhotos();
    
    // return column.height - height;
  },
  renderPhoto: function () {
    this.scheduledRender = null;
    var i = 0;
    while (this.renderQueue.length && i < 6) {
      this.el.appendChild(this.renderQueue[0].el);
      this.renderQueue.shift();
      i++;
    }
    if (this.renderQueue.length) {
      this.scheduledRender = this.scheduleWrite(this.renderPhoto, 'normal');
    } 
    else if (this.pendingRender) {
      this.pendingRender = false;
      this.showMore();
    }
  },
  
  onShow: function () {
    console.log('on show');
    this.showMore();
    if (this.collection.length) this.preloadViews();
  },
  
  showMore: function () {
    if (this.renderQueue.length || app.router.lightbox.displayed || 
        !app.isReady && app.router.willShowLightbox) {
      this.pendingRender = true;
      return;
    }
    var initial = !this.displayedCount;
    var remaining = this.collection.length - this.displayedCount;
    var min = ua.mobile ? 30 : this.displayedCount ? 15 : 25;
    var max = ua.mobile ? 40 : this.displayedCount ? 22 : 35;
    this.displayedCount += remaining <= max ? remaining : min;
    if (remaining <= max) {
      this.parent.parent.complete = true;
      this.scheduleWrite(function () {
        this.parent.el.classList.add('complete');
      });
    }
    this.showPhotos(initial);
  },
});

