/*==========================================================================*\
  A photo added to a product
\*==========================================================================*/
"use strict";

var app = require('app');

var Parent = require('app/views/base-view');

var _ = require('underscore');
// var PhotoView = require('./cart-photo-option');

module.exports = Parent.extend(require('bind-transforms')).extend({
  template: require('app/templates').cart['cart-product-photo'],
  
  props: {
    width: ['number', true, 0],
    firstRow: ['boolean', true, false],
    firstCol: ['boolean', true, false],
    lastRow: ['boolean', true, false],
    lastCol: ['boolean', true, false],
    
    appliedCrop: 'object',
    removed: ['boolean', true, false],
    
    optionModel: 'state',
    photoModel: 'state',
    
    qty: 'number',
  },
  
  bindings: {
    width: {
      type: function (el, val) {
        this.el.style.width = (val) +'px';
        this.el.style.height = (val) +'px';
      },
    },
    firstRow: {
      type: 'booleanClass',
      name: 'first-row',
    },
    lastRow: {
      type: 'booleanClass',
      name: 'last-row',
    },
    firstCol: {
      type: 'booleanClass',
      name: 'first-col',
    },
    lastCol: {
      type: 'booleanClass',
      name: 'last-col',
    },
    
    removed: {
      type: 'booleanClass',
      name: 'removed',
    },
    
    // 'optionModel.qty': {
    //   type: 'value',
    //   query: '.count',
    // },
  },
  
  events: {
    'click .remove': 'removeFromCart',
    'click .restore': 'restore',
    'click .hide': 'hide',
    'click .minus': 'minus',
    'click .plus': 'plus',
    
    // 'dblclick .plus, .minus, .button': 'preventDefault',
  },
  
  initialize: function (ops) {
    Parent.prototype.initialize.apply(this, arguments);
    this.optionView = ops.optionView;
    // this.cropUrl = this.model.photo.app_url +'crop'+
    //     ops.optionView.parent.model.pid +':'+
    //     ops.optionView.model.id;
    this.cropUrl = this.model.photo.app_url + app.router.encodeParams({
      crop: true,
      productId: ops.optionView.parent.model.pid,
      sizeId: ops.optionView.model.id,
      colorId: this.model.color_id,
    });
    // this.render();
    
    this.listenTo(this.optionView.parent, 'change:photoWidth', 
                  this.updateWidth);
    // var option = this.model.options.get(this.optionView.model.id);
    this.listenTo(this.model.cart, 'change:mtime', this.applyCrop);
    
    this.optionModel = this.model.options.get(this.optionView.model.id);
    this.listenTo(this.optionModel, 'change:qty', this.onQtyChange);
    
    this.cart = this.model.cart;
  },
  
  onQtyChange: function () {
    this.qty = this.optionModel.qty;
    this.qtySpan.innerHTML = this.optionModel.qty;
    this.el.classList.toggle('show-qty', this.qty > 1);
  },
  
  render: function () {
    this.renderWithTemplate(this);
    this.cacheElements({
      imgEl: '.img',
      qtySpan: '.qty-value',
    });
    this.updateWidth();
    this.applyCrop();
    this.onQtyChange();
  },
  
  updateWidth: function () {
    if (!this.rendered) return;
    var width = this.optionView.parent.photoWidth;
    if (!width) return;
    this.width = width;
    
    this.applyCrop(true);
  },
  
  plus: function (e) {
    // var old = Math.round(+this.qtyInput.value || 0);
    var multi = 1;
    if (e && e.altKey) multi *= 10;
    if (e && e.shiftKey) multi *= 5;
    // this.qtyInput.value = old + 1 * multi;
    this.optionModel.qty += 1 * multi;
    this.model.cart.save();
  },
  minus: function (e) {
    // var old = Math.round(+this.qtyInput.value || 0);
    var multi = 1;
    if (e && e.altKey) multi *= 10;
    if (e && e.shiftKey) multi *= 5;
    // var newVal = old - 1 * multi;
    // this.qtyInput.value = newVal < 0 ? 0 : newVal;
    
    this.optionModel.qty -= this.optionModel.qty - 1 * multi < 0 ? 0 : 1 * multi;
    this.model.cart.save();
  },
  
  applyCrop: function (newWidth) {
    if (!this.rendered) return;
    
    
    var option = this.optionModel;
    var size = option.size;
    if (!size.width || !size.height) return;
    
    var photo = this.model.photo;
    // var maxWidth = this.width - 30;
    var maxWidth = this.width - 20;
    // console.log(size.width, size.height);
    
    var crop = option.crop;
    if (!('top' in crop)) crop = this.generateCrop();
    for (var i in crop) {
      if (crop[i] < 0.02) crop[i] = 0;
    }
    if (!newWidth && _.isEqual(this.appliedCrop, crop)) return;
    // console.log('crop', crop);
    
    var photoWidth = photo.width * (100 - crop.left - crop.right) / 100;
    var photoHeight = photo.height * (100 - crop.top - crop.bottom) / 100;
    
    var ratio = photoWidth / photoHeight;
    var width, height;
    
    if (ratio > 1) { // landscape 
      width = maxWidth;
      height = Math.floor(maxWidth / ratio);
      this.imgEl.style.width = width +'px';
      this.imgEl.style.height = height +'px';
      this.imgEl.style.top = (maxWidth - maxWidth / ratio) / 2 + 10 + 'px';
      this.imgEl.style.left = '10px';
    }
    else {
      width = Math.floor(ratio * maxWidth);
      height = maxWidth;
      this.imgEl.style.width = width +'px';
      this.imgEl.style.height = height + 'px';
      this.imgEl.style.top = '10px';
      this.imgEl.style.left = (maxWidth - maxWidth * ratio) / 2 + 10 + 'px';
    }
    
    var imgWidth = Math.round(width / ((100 - crop.left - crop.right) / 100));
    var imgHeight = Math.round(height / ((100 - crop.top - crop.bottom) / 100));
    this.imgEl.style.backgroundSize = imgWidth +'px '+ imgHeight +'px';
    this.imgEl.style.backgroundPosition = 
        '-'+ Math.floor(crop.left * imgWidth / 100) +'px '+
        '-'+ Math.floor(crop.top * imgHeight / 100) +'px';
    
    // if (photo.id === 270316943) {
    //   console.log('wh', ratio, width, height, imgWidth, imgHeight, crop);
    // }
    
    this.appliedCrop = {
      top: crop.top,
      bottom: crop.bottom,
      left: crop.left,
      right: crop.right,
    };
  },
  
  generateCrop: function () { // get default crop
    var option = this.optionModel;
    var size = option.size;
    // console.log(size.width, size.height);
    
    var photoRatio = this.model.photo.ratio;
    var photoWidth = this.model.photo.width;
    var photoHeight = this.model.photo.height;
    // var photoWidth = this.photo.model.width;
    
    var ratio = size.width / size.height;
    var crop = {};
    
    var inchesWidth, inchesHeight;
    // make sure print size is the same orientation as the photo 
    if (ratio > 1 && photoRatio < 1 || ratio < 1 && photoRatio > 1) {
      inchesWidth = size.height;
      inchesHeight = size.width;
    }
    else {
      inchesWidth = size.width;
      inchesHeight = size.height;
    }
    
    ratio = inchesWidth / inchesHeight;
    
    if (ratio > photoRatio) {
      crop.top = crop.bottom = 
          (photoHeight - photoWidth / ratio) / photoHeight / 2 * 100;
      crop.left = crop.right = 0;
    }
    else {
      crop.top = crop.bottom = 0;
      crop.left = crop.right = 
          (photoWidth - photoHeight * ratio) / photoWidth / 2 * 100;
    }
    
    return crop;
  },
  
  removeFromCart: function () {
    this.model.options.remove(this.optionModel, { silent: true });
    
    if (!this.model.options.length) {
      this.model.collection.remove(this.model, { silent: true }); 
    }
    
    this.removed = true;
    
    this.optionView.parent.model.updateCounts();
    this.optionView.updateCount();
    
    this.cart.save();
  },
  restore: function () {
    var views = this.optionView.photos.views;
    var product = this.optionView.parent.model;
    var i, prevPhoto;
    for (i = 0; i < views.length; i++) {
      prevPhoto = views[i].model;
      if (views[i] === this) break;
    }
    
    this.model.options.add(this.optionModel, { silent: true });
  
    this.removed = false;
    
    if (this.model.options.length === 1) {
      if (!prevPhoto) {
        product.photos.add(this.model, { silent: true });
      }
      else {
        var index = product.photos.indexOf(prevPhoto);
        product.photos.add(this.model, { silent: true, at: index, });
      }
    }
    
    this.optionView.parent.model.updateCounts();
    this.optionView.updateCount();
    this.cart.save();
  },
  hide: function () {
    this.remove();
    this.optionView.photos._removeViewForModel(this.model); 
    this.optionView.updateLayout();
    
    this.cart.save();
  },
});
