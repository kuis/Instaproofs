/*==========================================================================*\
  Homepage with a list of events
\*==========================================================================*/
"use strict";

var ua = require('app/utils/ua');

var Parent = require('app/views/base-page');
var ListView = require('./events-list');

module.exports = Parent.extend({
  // pageTitle: 'Events',
  pageType: 'home',
  nearBottomDistance: 2000,
  template: require('app/templates').events['events-page'],
  
  events: {
    'click .load-more > .label': 'loadMore',
  },
  
  initialize: function (ops) {
    Parent.prototype.initialize.apply(this, arguments);
    ops = ops || {};
    this.render();

    this.list = new ListView({ 
      filter: ops.filter || 'all',
      sort: ops.sort || 'date',
      el: this.query('.events-list'),
    });
    this.reset(ops).updateHeader();
    this.list.collection.fetch({ reset: true });
    
    this.listenTo(this.list.collection, 'reloading', function () {
      this.scheduleWrite(function () {
        this.el.classList.add('reloading');
      });
    });
    this.listenTo(this.list.collection, 'loading', function () {
      this.scheduleWrite(function () {
        this.el.classList.add('loading');
      });
    });
    this.listenTo(this.list.collection, 'sync', function () {
      this.scheduleWrite(function () {
        this.el.classList.remove('reloading');
        this.el.classList.remove('loading');
      });
    });
    
    this.listenTo(this.list.collection, 'complete', function () {
      this.scheduleWrite(function () {
        this.el.classList.add('complete');
      });
    });
    this.listenTo(this.list.collection, 'incomplete', function () {
      this.scheduleWrite(function () {
        this.el.classList.remove('complete');
      });
    });
    
    this.listenTo(this.list.collection, 'reset', function () {
      this.triggerReady();
    });
  },
  
  reset: function (ops) {
    if (ops.sort) this.list.collection.sortBy(ops.sort);
    if (ops.filter) this.list.collection.filterBy(ops.filter);
    this.updateHeader();
    // if (this.list.displayedCount > this.list.collection.perPage) {
    //   this.list.render();
    // }
    return this;
  },
  
  updateHeader: function () {
    var self = this;
    var filter = 'show='+ this.list.collection.filteredBy;
    var sort = 'sort='+ this.list.collection.sortedBy;
    var sortLinks = this.queryAll('.header .sorting a');
    var filterLinks = this.queryAll('.header .filters a');
    this.scheduleWrite(function () {
      sortLinks.forEach(function (aTag) {
        var val = aTag.getAttribute('data-sort');
        aTag.href = '#events?'+ filter +'&sort='+ val; 
        if (val === self.list.collection.sortedBy) aTag.classList.add('active');
        else aTag.classList.remove('active');
      });
      filterLinks.forEach(function (aTag) {
        var val = aTag.getAttribute('data-filter');
        aTag.href = '#events?show='+ val +'&'+ sort; 
        if (val === self.list.collection.filteredBy) aTag.classList.add('active');
        else aTag.classList.remove('active');
      });
    });
    return this;
  },
  
  loadMore: function () {
    this.list.collection.loadMore();
    return this;
  },
  
  onNearBottom: function () {
    if (this.list.collection.complete || this.list.collection.request 
        || ua.mobile) return;
      
    this.loadMore();
    return this;
  },
  
});



