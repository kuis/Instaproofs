/*jshint -W018 */ // disable 'confusing use of !'
/*==========================================================================*\
  Popup overlay for description and stuff
\*==========================================================================*/
"use strict";

var app = require('app');
var ua = require('app/utils/ua');
var Parent = require('app/views/base');
// var _ = require('underscore');

var uid = 1;

var Popup = Parent.extend({
  template: require('app/templates').popup,
  
  props: {
    title: 'any',
    image: 'any',
    content: 'any',
    
    displayed: ['boolean', true, false],
    width: ['number', true, 0], // width of the popup
    height: ['number', true, 0], // height of the popup
    left: ['number', true, 0], // x pos of the popup
    top: ['number', true, 0], // y pos of the popup
    pointerSide: ['string', true, 'none'], // left|top|right|bottom|none
    pointerPos: ['number', true, 0], // pointer position from top or left
    customLayout: ['boolean', true, false], // whether contents are a custom el
  },
  
  bindings: {
    displayed: { 
      type: 'booleanClass',
      name: 'displayed',
    },
    customLayout: {
      type: 'booleanClass',
      name: 'custom',
    },
    width: { type: function (el, val) {
       if (this.popupEl) this.popupEl.style.width  = val +'px'; 
    }, },
    height: { type: function (el, val) {
       if (this.popupEl) this.popupEl.style.height  = val +'px'; 
    }, },
    left: { type: function (el, val) {
       if (this.popupEl) this.popupEl.style.left  = val +'px'; 
    }, },
    top: { type: function (el, val) {
       if (this.popupEl) this.popupEl.style.top  = val +'px'; 
    }, },
    
    pointerSide: { 
      type: function (el, val) { 
        el.className = 'pointer '+ (val !== 'none' ? val : '');
      },
      selector: '.pointer',
    },
    pointerPos: {
      type: function (el, val) { 
        if (!this.popupEl) return;
        if (val && this.pointerSide !== 'none') {
          el.style.top = val + 'px';
          this.popupEl.style[ua.css.transformOrigin] = 
              (this.pointerSide === 'left' ? '-5% ' : '105% ') +
              Math.round((val + 7) / this.height * 100) +'%'; 
        }
      },
      selector: '.pointer',
    },
    
    title: {
      // type: 'value',
      type: function (el, val) {
        if (this.titleEl) this.titleEl.innerHTML = val;
      },
      selector: '.title',
    },
    image: {
      type: function (el, val, oldVal) {
        if (!!val !== !!oldVal) {
          el.classList[val ? 'remove' : 'add']('hidden');
        }
        if (val) {
          el.src = val.src;
          el.style.height = Math.round(val.height * this.width / val.width);
        }
      },
      selector: '.image',
    },
  },
  
  events: {
    'click .close': 'hide',
    'click .cover': 'hide',
  },
  
  
  
  initialize: function () {
    Parent.prototype.initialize.apply(this, arguments);
    this.cacheElements({
      popupEl: '.popup',
      coverEl: '.cover',
      closeEl: '.close',
      pointerEl: '.pointer',
      contentWrapper: '.contents',
      titleEl: '.title',
      imgEl: '.image',
      mainContentEl: '.main',
    });
    
    this.onDocTouchStart = this.onDocTouchStart.bind(this);
    this.onDocClick = this.onDocClick.bind(this);
    // document.body.addEventListener('click', this.onDocTouchStart);
    document.body.addEventListener('touchstart', this.onDocTouchStart);
    document.body.addEventListener('mousedown', this.onDocTouchStart);
    document.body.addEventListener('click', this.onDocClick);
    
    // this.checkTargetElement = this.checkTargetElement.bind(this);
    
    this.resize = this.resize.bind(this);
    // document.body.addEventListener('scroll', this.resize);
    // var self = this;
    // setTimeout(function () {
    //   self.listenTo(app.state, 'resize', self.resize.bind(self));
    // }, 1);
  },
  
  checkTargetElement: function () {
    if (!this.displayed || !this.targetEl) return;
    var rect = this.targetEl.getBoundingClientRect();
    
    if (rect.top === this.targetTop && rect.left === this.targetLeft &&
        app.state.width === this.lastAppWidth && 
        app.state.height === this.lastAppHeight) {
      return this.raf(this.checkTargetElement);
    }
    this.targetTop = rect.top;
    this.targetLeft = rect.left;
    this.lastAppWidth = +app.state.width;
    this.lastAppHeight = +app.state.height;
    
    if (!this.isVisible(this.targetEl, rect)) {
      this.hide();
    }
    else {
      this.resize();
      this.raf(this.checkTargetElement);
    }
  },
  
  onDocTouchStart: function (e) {
    if (!this.displayed || !e || !e.target) return;
    if (!this.customLayout || !this.el.contains(e.target)) {
      this.displayed = false;
    }
  },
  
  onDocClick: function () {
    if (!this.displayed) this.displayedId = null;
  },
  
  show: function (ops) {
    this.targetEl = ops.targetEl;
    this.customLayout = !!ops.content && ops.content.nodeType === 1;
    this.resize(ops);
    this.displayedId = uid++;
    this.displayed = true;
    
    this.raf(this.checkTargetElement);
    // setTimeout(this.checkTargetElement, 16);
    
    return this.displayedId;
  },
  hide: function () {
    this.displayed = false;
    this.displayedId = null;
  },
  
  resize: function (ops) {
    var width, height, top, left, targetRect, pointerSide = 'none', pointerPos = 0;
    this.lastAppWidth = +app.state.width;
    this.lastAppHeight = +app.state.height;
    if (this.targetEl) {
      targetRect = this.targetEl.getBoundingClientRect();
      
      var toLeft = Math.round(targetRect.left - 30);
      var toRight = Math.round(app.state.width - 
                               (targetRect.left + targetRect.width + 30));
      
      this.targetTop = targetRect.top;
      this.targetLeft = targetRect.left;
      
      
      if (app.state.width <= 800) { // tight screen
        width = app.state.width > 530 ? 500 : app.state.width - 30;
        left = Math.round((app.state.width - width) / 2);
        pointerSide = 'none';
      }
      else if (toLeft >= 400 || toRight >= 400) { // enough space on a side 
        if (toRight > toLeft) {
          width = toRight > 500 ? 500 : toRight;
          left = Math.round(targetRect.left + targetRect.width + 10);
          pointerSide = 'left';
        }
        else {
          width = toLeft > 500 ? 500 : toLeft;
          left = Math.round(targetRect.left - width - 10);
          pointerSide = 'right';
        }
      }
      else { // not enough space on a side 
        width = 500;
        left = Math.round((app.state.width - width) / 2);
        pointerSide = 'none';
      }
    }
    else {
      width = app.state.width > 530 ? 500 : app.state.width - 30;
      left = Math.round((app.state.width - width) / 2);
      pointerSide = 'none';
    }
    
    this.width = width;
    this.left = left;
    
    if (ops) {
      this.title = ops.title;
      this.image = ops.image;
      console.log('setting content', ops.content === this.content);
      if (this.content !== ops.content) this.updateContent(ops.content);
      
      // this.content = ops.content;
    }
    
    var contentHeight = this.contentWrapper.offsetHeight;
    var contentWidth = this.contentWrapper.offsetWidth + 1;
    
    if (contentWidth < this.width) {
      if (pointerSide === 'right') this.left += this.width - contentWidth;
      else if (pointerSide === 'none') {
        this.left = Math.round((app.state.width - contentWidth) / 2);
      }
      this.width = contentWidth;
    }
    
    height = app.state.height - 30;
    top = 15;
    if (contentHeight < height) {
      height = contentHeight;
      top = Math.round((app.state.height - height) / 2);
      if (this.targetEl) {
        if (top > targetRect.top - 15) top = Math.max(15, targetRect.top - 15);
        else if (top + height < targetRect.top + 40) {
          top = targetRect.top + 40 - height;
        }
      }
    }
    
    if (pointerSide !== 'none') {
      pointerPos = Math.round(
          targetRect.top - top + (targetRect.height / 2) - 9);
    }
    
    this.height = height;
    this.top = top;
    this.pointerSide = pointerSide;
    this.pointerPos = pointerPos;
  },
  
  updateContent: function (val) {
    var el = this.mainContentEl;
    this.content = val;
    if (!val) el.innerHTML = '';
    else if (typeof val === 'string') el.innerHTML = val;
    else {
      el.innerHTML = '';
      el.appendChild(val);
    }
  },
  
  // render: function () {
  //   this.renderWithTemplate(this);
  // },
});

module.exports = new Popup({
  el: document.getElementById('popup'),
});
