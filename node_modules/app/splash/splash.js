/*==========================================================================*\
  Splash Screen
\*==========================================================================*/
"use strict";

var BaseView = require('app/base/base-view');

var app = require('app');
var ua = require('app/util/ua/ua');
var templates = require('app/templates');

module.exports = BaseView.extend({
  
  rafID: null,
  lastFrameTime: null,
  frameRates: null,
  
  props: {
    loginForm: ['boolean', true, false],
    loggingIn: ['boolean', true, false],
    wrongData: ['boolean', true, false],
    loginFormEid: ['number', true, 0],
    wrongDataEid: ['number', true, 0],
  },
  
  initialize: function () {
    BaseView.prototype.initialize.apply(this, arguments);
    
    var self = this;
    this.frameRates = [];
    this.onAppReady = this.onAppReady.bind(this);
    this.onTransitionEnd = this.onTransitionEnd.bind(this);
    this.measureFPS = this.measureFPS.bind(this);
    
    app.state.splashState = 'locked';
    app.ready(function () {
      self.write(self.onAppReady);
    });
    
    this.listenTo(app, 'event-401', function () {
      this.after(1, this.onAppReady);
    });
  },
  
  bindings: {
    loginForm: {
      type: 'booleanClass',
      name: 'login',
    },
    loggingIn: {
      type: 'booleanClass',
      name: 'logging-in',
    },
    wrongData: {
      type: 'booleanClass',
      name: 'wrong-data',
    },
    'model.email': {
      type: 'booleanClass',
      name: 'email-required',
    },
    'model.password': {
      type: 'booleanClass',
      name: 'password-required',
    },
  },
  
  events: {
    'click': 'hide',
    'mousewheel': 'hide',
    'wheel': 'hide',
    'scroll': 'hide',
    'touchstart': 'touchstart',
    'touchmove': 'touchmove',
    'touchend': 'touchend',
    'click .back': 'goBack',
    'click .submit': 'login',
    'keypress input': 'onKeyPress',
  },
  
  hide: function (e) {
    if (e !== 'force' && 
        (!app.isReady || this.unlocked || this.model && this.model.locked)) {
      return;
    }
    // if (!this.rafID) this.rafID = ua.raf(this.measureFPS);
    this.loginForm = false;
    this.unlocked = true;
    this.loggingIn = false;
    this.wrongData = false;
    this.model = null;
    if (ua.desktop) this.write(function () {
      app.state.splashState = 'unlocked';
    }, 'high');
    else app.state.splashState = 'unlocked';

    setTimeout(this.onTransitionEnd, 1000); // a fallback just in case
    
    if (e && e.preventDefault) e.preventDefault();
    if (e && e.stopPropagation) e.stopPropagation();
    
    return false;
  },
  
  goBack: function () {
    app.navigate('events');
    this.loggingIn = false;
    this.wrongData = false;
    this.model = null;
    this.loginForm = false;
    this.hide();
  },
  
  showLoginForm: function (event) {
    if (this.loggingIn && this.model === event) {
      this.wrongData = true;
      this.wrongDataEid = event.id;
      this.query('.password input').value = '';
      if (event.email) this.query('.email input').select();
      else this.query('.password input').select();
      return;
    }
    else {
      if (this.wrongDataEid !== event.id) this.wrongData = false;
    }
    
    if (this.loginForm && this.loginFormEid === event.id) return;
    
    
    this.loggingIn = false;
    this.model = event;
    app.state.splashState = 'locked';
    this.unlocked = false;
    this.el.classList.add('event');
    
    
    
    var thumbUrl = event.display_image ? event.thumb_url : event.thumb_blur_url;
    this.query('#splash-thumb-image').style.backgroundImage = 
        'url('+ thumbUrl +')';
    this.query('.image').style.backgroundImage = 'url('+
        event.img_url.replace(/&w=\d+&h=\d+/g, '') + 
        '&w='+ app.state.width +
        '&h='+ app.state.height +
        '&fill=1' +
        (!event.display_image ? '&blur=1' : '');
    
    // if (this.loginForm) return;
    
    if (this.model.email && this.model.password) {
      this.loginErrorMessage = this.lz('Login data incorrect');
    }
    else if (this.model.email) {
      this.loginErrorMessage = this.lz('Wrong email');
    }
    else {
      this.loginErrorMessage = this.lz('Wrong password');
    }
    
    this.el.classList.add('loaded');
    if (app.isReady) this.el.classList.add('fade-in');
    this.loginForm = true;
    this.loginFormEid = event.id;
    this.query('.label').innerHTML = templates.auth.login(this);
    // this.query('.image').style.backgroundImage = 'url('+
    //     event.img_url.replace(/w=\d+/, 'w='+ app.state.width)
    //     .replace(/h=\d+/, 'h='+ (app.state.height - 100)) +')';

    if (this.model.email && app.storage.lastUsedEmail) {
      this.query('.email input').value = app.storage.lastUsedEmail;
    }
    // else if (this.model.email) this.query('.email input').focus();
    // else this.query('.password input').focus();

  },
  login: function () {
    var email = this.query('.email input');
    var password = this.query('.password input');
    if (this.model.email && !email.value) {
      email.focus();
      return;
    }
    if (this.model.password && !password.value) {
      password.focus();
      return;
    }
    
    app.keychain.saveEventKeys(this.model, email.value, password.value);
    
    this.loggingIn = true;
    this.model.fetch();
    this.listenToOnce(this.model, 'sync', function () {
      this.loggingIn = false;
    });
  },
  
  onKeyPress: function (e) {
    this.wrongData = false;
    if (e.keyCode === 10 || e.keyCode === 13) {
      this.login();
    }
  },
  
  onAppReady: function () {
    // console.log('onAppReady');
    // console.trace();
    // if (app.currentPage.pageType.substr(0, 5) === 'event') {
    if (app.view.currentPage.eventId) {
      // var event = app.view.currentPage.model;
      var event = app.eventModels[app.view.currentPage.eventId];
      if (app.view.currentPage.pageType === 'paypal-confirmation' ||
          app.view.currentPage.pageType === 'event-checkout' ||
          app.view.currentPage.pageType === 'event-confirmation') {
        this.hide();
      }
      else if (event.locked) {
        this.showLoginForm(event);
      }
      else if (this.loginForm) {
        this.hide();
      }
      else {
        this.query('.label').innerHTML = 
            '<h1>'+ event.name +'</h1>'+
            (event.date ? 
              '<div class="date">'+ event.date.format("MMMM Do, YYYY") +
              '</div>' : '')+
            '<div class="type">'+ event.type +'</div>'+
            '<div class="arrow"></div>';
      }
    }
    else {
      if (!app.config.splash_exists || 
          this.el.classList.contains('no-splash-image')) {
        this.hide();
      }
      else {
        this.query('.prompt').innerHTML = ua.mobile
            ? '<div><span>Slide Up</span></div>'
            : '<div><span>Scroll Down</span></div>';
      }
    }
    
    if (!this.unlocked) this.el.classList.add('loaded');
    else {
      this.writeAfter(2000, function () {
        this.el.classList.add('loaded');
      });
    }
    
  },
  
  
  onTransitionEnd: function (e) {
    if (!this.unlocked || (e && e.target && e.target.id !== 'splash')) return;
    if (!app.state.splashState) return;
    // this.remove();
    app.state.splashState = '';
    this.loginForm = false;
    
    // avoid a webkit bug with disappearing scrollbar
    if (!app.state.noTransitions) {
      app.view.currentPage.el.style[ua.css.transform] = 'translateY(0)';
    }
    
  },
  
  measureFPS: function (time) {
    time = typeof time === 'number' ? time : ua.now();
    var rate;
    if (app.state.splashState) this.rafID = ua.raf(this.measureFPS);
    else {
      var sum = 0;
      var min = 0;
      this.frameRates = this.frameRates.slice(2, -1);
      for (var i = 0; i < this.frameRates.length; i++) {
        sum += this.frameRates[i];
        if (this.frameRates[i] > min) min = this.frameRates[i];
      }
      rate = sum / this.frameRates.length;
      console.log('Average FPS: '+ (Math.round(1000 / rate * 100) / 100));
      console.log('Minimum FPS: '+ (Math.round(1000 / min * 100) / 100));
      return;
    }
    if (!this.lastFrameTime) {
      this.lastFrameTime = time;
      return;
    }
    rate = time - this.lastFrameTime;
    this.lastFrameTime = time;
    if (rate < 80) this.frameRates.push(rate);
    console.log('FPS: '+ (Math.round(100 * 1000 / rate) / 100));
  },
  
  touchstart: function (e) {
    if (app.isReady && !this.unlocked) {
      this.gesture = {
        startY: e.touches[0].clientY,
        y: e.touches[0].clientY,
        winHeight: document.documentElement.clientHeight,
      };
      this.el.style[ua.css.transition] = 'none';
      app.view.currentPage.el.style[ua.css.transition] = 'none';
    }
    // e.preventDefault();
  },
  touchmove: function (e) {
    if (this.unlocked) return e.preventDefault();
    var dy = e.touches[0].clientY - this.gesture.startY;
    this.gesture.direction = e.touches[0].clientY - this.gesture.y;
    this.gesture.y = e.touches[0].clientY;
    if (dy > 0) dy = 0;
    this.el.style[ua.css.transform] = 'translate3d(0,'+ dy +'px,0)';
    // app.view.currentPage.el.style.opacity = 
    //     0.5 + Math.abs(0.5 * dy / this.gesture.winHeight);
    if (app.state.noTransitions) {
      app.view.currentPage.el.style.opacity = Math.abs(dy / this.gesture.winHeight);
    }
    else {
      app.view.currentPage.el.style[ua.css.transform] = 
          'scale('+ (0.5 + Math.abs(0.5 * dy / this.gesture.winHeight)) +')';
    }
    
    // app.view.currentPage.el.style[ua.css.transform] = 
    //     'translate3d(0,'+ (200 + 200 * dy / this.gesture.winHeight) +'px,0)';
    e.preventDefault();
  },
  touchend: function (e) {
    // if (this.unlocked) return e.preventDefault();
    if (this.unlocked) return;
    var g = this.gesture;
    // this.el.removeAttribute('style');
    this.el.style[ua.css.transform] = null;
    this.el.style[ua.css.transition] = null;
    app.view.currentPage.el.removeAttribute('style');
    if (g.direction < 0) {
      this.el.style[ua.css.transitionDuration] = 
          ((g.winHeight - Math.abs(g.y - g.startY)) / g.winHeight * 400) +'ms';
      this.hide();
    }
    else {
      this.el.style[ua.css.transitionDuration] = 
          (Math.abs(g.y - g.startY) / g.winHeight * 400) +'ms';
    }
    // e.preventDefault();
  },
  
});

module.exports.prototype.events[ua.events.transitionEnd] = 'onTransitionEnd';
