/*==========================================================================*\
  A purchase option in the buy form
\*==========================================================================*/
"use strict";

var BaseView = require('app/base/base-view');
var Crop = require('./crop');
var CropModel = require('app/cart/photo/option/crop-model');
var SizeView = require('./size');

var app = require('app');

module.exports = SizeView.extend({
  viewType: 'product-size',
  template: require('app/templates').photo.form.size,
  
  popupId: null, // ID of this view's currently displayed description popup
  
  props: {
    isProductSize: ['boolean', true, true],
    cartProduct: 'state',
    
    displayed: ['boolean', true, true],
    active: ['boolean', true, false],
    hasAddons: ['boolean', true, false],
    qty: ['number', true, 0],
    // photo: 'object',
    
    // currently selected option (e.g. for displaying crop)
    selected: ['boolean', true, false], 
    
    // whether Plus and Minus buttons are displayed in mobile view 
    qtyInputMode: ['boolean', true, false],
    
    // whether buy form should span all of viewport without margins 
    buyFormFullscreen: ['boolean', true, true],
    
    crop: 'state', // crop state for this option
    cropIconWidth: ['number', true, 0], // width of a crop miniature
    
    fulfilled: ['boolean', true, false],
    overCapacity: ['boolean', true, false],
  },
  
  bindings: {
    // 'photo': function () {
    //   this.selected = this.photo.currentCrop === this.crop;
    // },
    
    displayed: {
      type: 'booleanClass',
      name: 'displayed',
    },
    fulfilled: {
      type: 'booleanClass',
      name: 'fulfilled',
    },
    overCapacity: {
      type: 'booleanClass',
      name: 'over-capacity',
    },
    // 'cartProduct.spotsLeft': {
    //   type: function () {
        
    //   },
    // },
    
    buyFormFullscreen: {
      type: function (el, val) {
        el.readOnly = !!val;
        el.disabled = !!val;
      },
      selector: '.qty input',
    },
    'crop.changed': {
      type: 'booleanClass',
      name: 'custom-crop',
    },
    active: {
      type: 'booleanClass',
      name: 'active',
    },
    hasAddons: {
      type: 'booleanClass',
      name: 'has-addons',
    },
    price: {
      type: function (el, val) {
        el.innerHTML = this.model.formatMoney(val);
      },
      selector: '.head .price.final',
    },
    selected: {
      type: 'booleanClass',
      name: 'selected',
    },
    singlePrice: {
      type: function (el, val) {
        el.innerHTML = this.model.formatMoney(val);
      },
      selector: '.head .price.single',
    },
    // qty: {
    //   type: 'value',
    //   selector: '.qty input',
    // },
    qtyInputMode: {
      type: 'booleanClass',
      name: 'qty-input-mode',
    },
  },
  
  initialize: function (options) {
    BaseView.prototype.initialize.apply(this, arguments);
    this.colorId = options.colorId;
    this.cartProduct = options.cartProduct;
    this.photo = options.photo;
    this.buyForm = options.buyForm;
    
    var photo = this.cartProduct.photos.get(
        this.photo.model.id +'-'+ this.colorId, 'id');
    var option = photo && photo.options.get(this.model.id);
    if (option) {
      this.qty = option.qty;
      this.active = this.qty > 0;
    }
    
    this.listenTo(this.photo, 'change:currentCrop', function () {
      this.selected = this.photo.currentCrop === this.crop;
    });
    this.listenTo(this.photo, 'change:buyFormFullscreen', function () {
      this.buyFormFullscreen = this.photo.buyFormFullscreen;
      if (!this.buyFormFullscreen) this.qtyInputMode = false;
    });
    this.buyFormFullscreen = this.photo.buyFormFullscreen;
    
    if (this.model.size.width && this.model.size.height) {
      this.crop = new Crop({
        option: this,
        photo: this.photo,
      });
      this.cropModel = new CropModel();
      
      this.listenTo(this.crop, 'change', function () {
        this.onCropChange();
      });
      
      if (this.cartProduct) {
        var cartPhoto = this.cartProduct.photos.get(
                            this.photo.model.id +'-'+ this.colorId);
        if (cartPhoto) {
          var size = cartPhoto.options.get(this.model.size.id);
          if (size) {
            var cropVals = size.crop.toJSON();
            if (typeof cropVals.top === 'number') {
              this.crop.setValues(cropVals);
            }
          }
        }
      }
    }
    
    // this.listenTo(this, 'change:qty', this.updateCounts);
    this.listenTo(this, 'change:qty', function () {
      this.parent.updateCounts();
    });
    
    var params = app.history.latestConfig;
    if (params.crop && params.productId === this.cartProduct.pid &&
        params.sizeId === this.model.size.id && 
        params.colorId === this.colorId) {
      
      this.after(1, function () {
        this.toggleCropping();
      });
    }
  },
  
  events: {
    'click .head': 'onHeadClick',
    'click .info': 'showDescription',
    'click .crop-icon': 'toggleCropping',
    
    // 'mouseenter .crop': 'showCrop',
    // 'mouseleave .crop': 'onCropMouseLeave',
    // 'mouseover .crop': 'showCrop',
  },
  
  onHeadClick: function (e) {
    if (!this.model.size.no_qty) return;
    if (e.target.closest('.crop-icon, .info')) return;
    this.active = !this.active;
    this.qty = this.active ? 1 : 0;
    this.updatePrice();
  },
  
  updatePrice: function () {
    this.parent.updateCounts();
    this.getParent('photo-form').updatePrice();
  },
  
  // NOTE: this methods is called from product-sizes view on all of 
  // its children sizes at once
  updateCounts: function () {
    this.active = !!this.qty;
    
    var capacity = this.cartProduct.capacity[this.model.id];
    var left = this.parent.spotsLeft[this.model.id];
    var selected = capacity - left;
    
    this.fulfilled = !left;
    this.overCapacity = left < 0;
    if (!this.el) return;
    this.query('.spots-left').innerHTML = 
        this.overCapacity ? this.lz('%d/%d selected', selected, capacity) :
        this.lz('%d/%d left', left, capacity);
  },
});
