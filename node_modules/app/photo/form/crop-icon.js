"use strict";

var BaseView = require('app/base/base-view');

var app = require('app');
var ua = require('app/util/ua/ua');

module.exports = BaseView.extend({
  viewType: 'crop-icon',
  template: require('app/templates').photo.form['crop-icon'],
  dictionary: 'lightbox',
  
  popupId: null, // ID of this view's currently displayed popup
  
  props: {
    displayed: ['boolean', true, false],
    imgUrl: ['string', true, ''],
    thumbDisplayed: ['boolean', true, false],
    thumbRatio: ['number', true, 0], // thumb's width/height ratio
    editAllowed: ['boolean', true, false],
    
    photoModel: 'state',
    sizeModel: 'state',
  },
  
  derived: {
    width: {
      deps: ['thumbRatio', 'thumbDisplayed'],
      fn: function () {
        if (!this.thumbDisplayed) return 20;
        else return Math.round(this.thumbRatio * 32);
      }
    }
  },
  
  bindings: {
    displayed: {
      type: 'booleanClass',
      name: 'displayed',
    },
    thumbDisplayed: {
      type: function (el, val) {
        this.el.classList.toggle('no-thumb', !val);
      },
    },
    editAllowed: {
      type: 'booleanClass',
      name: 'edit-allowed',
    },
    imgUrl: {
      type: function (el, val) {
        el.style.backgroundImage = "url("+ val +")";
      },
    },
    width: {
      type: function (el, val) {
        this.el.style.width = val + 'px';
      },
    },
  },
  
  events: {
  },
  
  initialize: function () {
    BaseView.prototype.initialize.apply(this, arguments);
    
    this.displayed = app.config.crop_enabled;
    
    this.listenTo(this.model, 'change', function () {
      this.updateThumb();
      this.updateThumbVisibility();
    });
  },
  
  render: function () {
    this.renderWithTemplate();
    this.cacheElements({
      cropCoverTop: '.crop-cover.top',
      cropCoverRight: '.crop-cover.right',
      cropCoverBottom: '.crop-cover.bottom',
      cropCoverLeft: '.crop-cover.left',
    });
    this.updateThumb();
    this.updateThumbVisibility();
  },
  
  generateCrop: function () { // generate default crop
    var size = this.sizeModel;
    
    var photoRatio = this.photoModel.ratio;
    var photoWidth = this.photoModel.width;
    var photoHeight = this.photoModel.height;
    // var photoWidth = this.photo.model.width;
    
    var ratio = size.width / size.height;
    var crop = {};
    
    var inchesWidth, inchesHeight;
    // make sure print size is the same orientation as the photo 
    if (ratio > 1 && photoRatio < 1 || ratio < 1 && photoRatio > 1) {
      inchesWidth = size.height;
      inchesHeight = size.width;
    }
    else {
      inchesWidth = size.width;
      inchesHeight = size.height;
    }
    
    ratio = inchesWidth / inchesHeight;
    
    if (ratio > photoRatio) {
      crop.top = crop.bottom = 
          (photoHeight - photoWidth / ratio) / photoHeight / 2 * 100;
      crop.left = crop.right = 0;
    }
    else {
      crop.top = crop.bottom = 0;
      crop.left = crop.right = 
          (photoWidth - photoHeight * ratio) / photoWidth / 2 * 100;
    }
    
    return crop;
  },
  
  updateThumb: function () {
    if (!this.el) return;
    var crop = this.model.changed ? this.model : this.generateCrop();
    
    var top = Math.ceil(32 * crop.top / 100);
    var right = Math.ceil(this.width * crop.right / 100);
    var bottom = Math.ceil(32 * crop.bottom / 100);
    var left = Math.ceil(this.width * crop.left / 100);
    
    this.cropCoverTop.style[ua.css.transform] = 
        'translate3d('+ left +'px,'+ top +'px,0)';
    this.cropCoverRight.style[ua.css.transform] = 
        'translate3d('+ (-right) +'px,'+ top +'px,0)';
    this.cropCoverBottom.style[ua.css.transform] = 
        'translate3d('+ (-right) +'px,'+ (-bottom) +'px,0)';
    this.cropCoverLeft.style[ua.css.transform] = 
        'translate3d('+ left +'px,'+ (-bottom) +'px,0)';
  },
  
  updateThumbVisibility: function () {
    if (!app.config.crop_enabled) return; // never display anything 
    
    if (app.config.show_crop) { // always show thumb
      this.thumbDisplayed = true;
    }
    else if (app.config.custom_crop === 'edit') { // only show if crop changed
      this.thumbDisplayed = !!this.model.changed;
    }
  },
});
