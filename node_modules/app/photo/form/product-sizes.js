/*==========================================================================*\
  A product's size options for the buy form
\*==========================================================================*/
"use strict";

var BaseView = require('app/base/base-view');
var ProductSize = require('./product-size');

var clone = require('lodash.clone');

module.exports = BaseView.extend({
  viewType: 'product-sizes',
  template: require('app/templates').photo.form['product-sizes'],
  
  props: {
    left: 'object',
  },
  
  bindings: {
  },
  
  initialize: function (options) {
    BaseView.prototype.initialize.apply(this, arguments);
    this.photo = options.photo;
    this.buyForm = options.buyForm;
    this.cropOnly = false;
    if (Array.isArray(options.cropOnly)) {
      if (options.cropOnly[0] === this.model.pid) {
        this.cropOnly = options.cropOnly[1];
      }
    }
  },
  
  events: {
  },
  
  
  render: function () {
    this.renderWithTemplate(this);
    this.cacheElements({
      sizesEl: '.sizes',
    });
    var i;
    this.options = [];
    var productSize;

    for (i = 0; i < this.model.option.required_size_list.length; i++) {
      productSize = this.model.option.required_size_list.at(i);
      for (var colorId in this.photo.model.pricing.colors) {
        this.options.push(new ProductSize({
          model: productSize,
          colorId: +colorId,
          
          parent: this,
          cartProduct: this.model,
          photo: this.photo,
          buyForm: this.buyForm,
          cropOnly: this.cropOnly,
        }));
      }
    }
    for (i = 0; i < this.options.length; i++) {
      this.options[i].render();
      this.sizesEl.appendChild(this.options[i].el);
    }
    
    // this.options = this.renderCollection(this.model.option.required_size_list,
    //     ProductSize, this.query('.sizes'), {
    //   viewOptions: {
    //     cartProduct: this.model,
    //     photo: this.photo,
    //     buyForm: this.buyForm,
    //     cropOnly: this.cropOnly,
    //   },     
    // });
  },
  
  updateCounts: function () {
    var i;
    // var left = {};
    var left = clone(this.model.spotsLeft);
    // var currentCounts = {};
    var option;
    var qty, newQty;
    for (i = 0; i < this.options.length; i++) {
      option = this.options[i];
      qty = this.model.getOptionQty(option.photo.model.id, 
                                    option.colorId, option.model.id);
      newQty = option.qty;
      
      left[option.model.id] -= (newQty - qty);
    }
    
    
    
    // var productSize;
    // for (i = 0; i < this.model.option.required_size_list.length; i++) {
    //   productSize = this.model.option.required_size_list.at(i);
    //   left[productSize.id] = productSize.qty;
    //   // left = this.model.spotsLeft[productSize.id];
    //   for (j = 0; j < this.options.length; j++) {
    //     if (this.options[j].model.id === productSize.id) {
    //       left[productSize.id] -= this.options[j].qty;
    //     }
    //   }
    // }
    this.spotsLeft = left;
    for (i = 0; i < this.options.length; i++) this.options[i].updateCounts();
  },

});
