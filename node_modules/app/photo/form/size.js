/*==========================================================================*\
  A purchase option in the buy form
\*==========================================================================*/
"use strict";

var AddonView = require('./addon');
var AddonsCollection = require('app/addon/addons-collection');
var BaseView = require('app/base/base-view');
var Crop = require('./crop');
var CropModel = require('app/cart/photo/option/crop-model');
var CropView = require('./crop-icon');
var NumberInput = require('app/number-input/number-input');

var app = require('app');
var popup = require('app/popup/popup');

module.exports = BaseView.extend({
  viewType: 'size',
  template: require('app/templates').photo.form.size,
  dictionary: 'lightbox',
  
  popupId: null, // ID of this view's currently displayed description popup
  
  props: {
    isProductSize: ['boolean', true, false],
     
    displayed: ['boolean', true, true],
    active: ['boolean', true, false],
    hasAddons: ['boolean', true, false],
    baseSinglePrice: ['number', true, 0], // single price before any discounts 
    singlePrice: ['number', true, 0],
    singleBasePrice: ['number', true, 0],
    price: ['number', true, 0],
    basePrice: ['number', true, 0],
    qty: ['number', true, 0],
    // photo: 'object',
    
    bulkPricingAvailable: ['boolean', true, false],
    bulkPricingActive: ['boolean', true, false],
    
    // currently selected option (e.g. for displaying crop)
    selected: ['boolean', true, false], 
    
    // whether Plus and Minus buttons are displayed in mobile view 
    qtyInputMode: ['boolean', true, false],
    
    // whether buy form should span all of viewport without margins 
    buyFormFullscreen: ['boolean', true, true],
    
    crop: 'state', // crop state for this option
    cropIconWidth: ['number', true, 0], // width of a crop miniature
    
    // collection of addons, as well as discounts 
    addonsCollection: 'object',
    
    qtyView: 'state',
  },
  
  bindings: {
    // 'photo': function () {
    //   this.selected = this.photo.currentCrop === this.crop;
    // },
    'qtyView.inputMode': {
      type: 'booleanClass',
      name: 'qty-input-mode',
    },
    bulkPricingAvailable: {
      type: 'booleanClass',
      name: 'bulk-pricing-available',
    },
    bulkPricingActive: {
      type: function (el, val) {
        this.el.classList.toggle('bulk-pricing-active', val);
        el.innerHTML = this.lz(val ? 'Bulk pricing active' 
                                   : 'Bulk pricing available');
      },
      // name: 'bulk-pricing-active',
      selector: '.bulk-tip',
    },
    displayed: {
      type: 'booleanClass',
      name: 'displayed',
    },
    // buyFormFullscreen: {
    //   type: function (el, val) {
    //     el.readOnly = !!val;
    //     el.disabled = !!val;
    //   },
    //   selector: '.qty input',
    // },
    'crop.changed': {
      type: 'booleanClass',
      name: 'custom-crop',
    },
    active: {
      type: 'booleanClass',
      name: 'active',
    },
    hasAddons: {
      type: 'booleanClass',
      name: 'has-addons',
    },
    price: {
      type: function (el, val) {
        el.innerHTML = this.model.formatMoney(val);
      },
      selector: '.head .discounted-final-price',
    },
    basePrice: {
      type: function (el, val) {
        el.innerHTML = this.model.formatMoney(val);
      },
      selector: '.head .base-final-price',
    },
    selected: {
      type: 'booleanClass',
      name: 'selected',
    },
    'model.discount': {
      type: function (el, val) {
        el.classList.toggle('discounted', !!val);
        if (val) this.query('.discount').innerHTML = 
                                      '-'+ Math.round(val.discount * 100) + '%';
      },
    },
    singlePrice: {
      type: function (el, val) {
        el.innerHTML = this.model.formatMoney(val);
      },
      selector: '.head .discounted-price',
    },
    singleBasePrice: {
      type: function (el, val) {
        el.innerHTML = this.model.formatMoney(val);
      },
      selector: '.head .original-price',
    },
  },
  
  initialize: function (options) {
    BaseView.prototype.initialize.apply(this, arguments);
    this.photo = options.photo;
    this.buyForm = options.buyForm;
    this.event = this.photo.model.event;
    
    this.hasAddons = !!this.model.addons.length || !!this.model.discount 
                     || !!this.model.bulk_pricing.length;
    
    this.bulkPricingAvailable = !this.isProductSize && 
                                !!this.model.bulk_pricing.length;
    if (this.model.getPrices) {
      var prices = this.model.getPrices();
      this.singlePrice = prices.discounted;
      this.singleBasePrice = prices.base;
    }
    else {
      this.singlePrice = this.model.discounted_price;
    }
    this.listenTo(this, 'change:active', this.updateFolding);
    this.listenTo(this.photo, 'change:currentCrop', function () {
      this.selected = this.photo.currentCrop === this.crop;
    });
    this.listenTo(this.photo, 'change:buyFormFullscreen', function () {
      this.buyFormFullscreen = this.photo.buyFormFullscreen;
      if (!this.buyFormFullscreen) this.qtyInputMode = false;
    });
    this.buyFormFullscreen = this.photo.buyFormFullscreen;
    
    if (this.model.size.width && this.model.size.height) {
      this.crop = new Crop({
        option: this,
        photo: this.photo,
      });
      this.cropModel = new CropModel({
        
      });
      
      this.listenTo(this.crop, 'change', function () {
        this.onCropChange();
      });
    }
    
    var params = app.history.latestConfig;
    var colorId = this.model.color_id || this.colorId;
    if (params.crop && !params.productId &&
        params.sizeId === this.model.size.id && params.colorId === colorId) {
      
      console.log('crop mode', this.cid, this.crop.cid, this.crop.getValues(), this.el);
      this.after(1, function () {
        this.toggleCropping();
      });
    }
    
    // if (options && options.cropOnly === this.model.size.id) {
    //   this.after(100, function () {
    //     this.toggleCropping();
    //   });
    // }
  },
  
  events: {
    'click .head': 'onHeadClick',
    'click .info': 'showDescription',
    'click .crop-icon': 'toggleCropping',
    
    // 'mouseenter .crop-icon': 'showCrop',
    // 'mouseleave .crop-icon': 'onCropMouseLeave',
  },
  
  toggleCropping: function () {
    // if (!this.active) return;
    var photo = this.photo;
    if (photo.croppingMode && photo.currentCrop === this.crop) {
      photo.exitCropping();
    }
    else {
      photo.enterCropping(this.crop);
    }
  },
  onCropChange: function () {
    if (!this.cropModel) return;
    this.cropModel.set({
      left: this.crop.left,
      top: this.crop.top,
      right: this.crop.right,
      bottom: this.crop.bottom,
      changed: this.crop.changed,
    });
    if (this.cropIcon) this.cropIcon.updateThumb();
    
    // if (this.isProductSize) {
    //   console.log('product on crop change', this.cid, this.crop.cid, this.cropModel.toJSON());
    // }
    
    // var crop = this.crop;
    
    // var top = Math.ceil(32 * crop.top / 100);
    // var right = Math.ceil(this.cropIconWidth * crop.right / 100);
    // var bottom = Math.ceil(32 * crop.bottom / 100);
    // var left = Math.ceil(this.cropIconWidth * crop.left / 100);
    
    // this.cropCoverTop.style[ua.css.transform] = 
    //     'translate3d('+ left +'px,'+ top +'px,0)';
    // this.cropCoverRight.style[ua.css.transform] = 
    //     'translate3d('+ (-right) +'px,'+ top +'px,0)';
    // this.cropCoverBottom.style[ua.css.transform] = 
    //     'translate3d('+ (-right) +'px,'+ (-bottom) +'px,0)';
    // this.cropCoverLeft.style[ua.css.transform] = 
    //     'translate3d('+ left +'px,'+ (-bottom) +'px,0)';
  },
  showCrop: function () {
    this.photo.glimpseCropping(this.crop);
  },
  onCropMouseLeave: function () {
    if (this.photo.croppingMode) this.photo.applyCrop();
    else this.photo.exitCropping();
  },
  
  
  onHeadClick: function (e) {
    if (this.isProductSize) return;
    if (!this.model.size.no_qty && !this.isProductSize) return;
    if (e.target.closest('.crop-icon, .info')) return;
    this.active = !this.active;
    this.updatePrice();
  },
  
  render: function () {
    var i;
    if (this.parent && this.parent.collection || this.isProductSize) {
      this.renderWithTemplate(this);
      
      if (!this.model.size.no_qty) {
        this.qtyView = this.renderSubview(new NumberInput({
        }), '.qty');
        this.listenTo(this.qtyView, 'change:value', this.updatePrice);
        if (this.isProductSize) {
          this.listenTo(this.qtyView, 'change:value', function () {
            this.qty = this.qtyView.value;
            this.parent.updateCounts();
            this.updatePrice();
          });
          if (this.qty) this.qtyView.value = this.qty;
        }
        else this.listenTo(this.qtyView, 'change:value', this.updatePrice);
      } 
      
      this.cacheElements({
        // qtyInput: '.qty input',
        finalPrice: '.price.final',
        addons: '.addons',
        info: '.info',
        
        // cropIcon: '.crop-icon',
        // cropCoverTop: '.crop-cover.top',
        // cropCoverRight: '.crop-cover.right',
        // cropCoverBottom: '.crop-cover.bottom',
        // cropCoverLeft: '.crop-cover.left',
      });
      
      if (!this.isProductSize) {
        // var collection = this.model.addons;
        // this.addonsCollection = new AddonsCollection(this.model.addons.models);
        this.addonsCollection = new AddonsCollection([], {
          parent: this.model,
        });
        var bulk;
        var bpType = this.model.photo.pricing.bulk_pricing_type;
        var bp = this.model.bulk_pricing;
        var prices = this.model.getPrices();
        
        if (bp.length && !this.model.size.no_qty) {
          // console.log('bulk '+ this.model.size.name, bp);
          // var bpDiscount = 0;
          // for (i = bp.length-1; i >= 0; i--) {
          if (bpType === 'compound') {
            if (bp[0].qty) {
              this.addonsCollection.add({
                id: 'bulk0',
                bulkQty: 0,
                bulkMaxQty: bp[0].qty - 1,
                bulkPrice: this.model.price,
                bulkType: bpType,
              }, { at: this.addonsCollection.length });
            }
            for (i = 0; i < bp.length; i++) {
              bulk = bp[i];
              this.addonsCollection.add({
                id: 'bulk'+ bulk.qty,
                bulkQty: bulk.qty,
                bulkMaxQty: bulk.maxQty,
                bulkPrice: bulk.price,
                bulkType: bpType,
              }, { at: this.addonsCollection.length });
            }
          }
          else {
            for (i = 0; i < bp.length; i++) {
              bulk = bp[i];
              this.addonsCollection.add({
                id: 'bulk'+ bulk.qty,
                bulkQty: bulk.qty,
                bulkMaxQty: bulk.maxQty,
                bulkDiscount: this.model.price - bulk.price,
                bulkType: bpType,
                // bulkDiscount: this.model.price - bulk.price - bpDiscount,
              }, { at: this.addonsCollection.length });
              // bpDiscount += this.model.price - bulk.price;
            }
          }
        }
        
        if (this.model.discount) {
          this.addonsCollection.add({
            id: 'discount',
            discount: this.model.discount,
            discountAmount: prices.bulk - prices.discounted,
          }, { at: this.addonsCollection.length });
          // });
        }
        
        if (this.model.addons) {
          this.addonsCollection.add(this.model.addons.models, {
            at: this.addonsCollection.length,
          });
        }
        
        this.addonsView = this.renderCollection(
                                this.addonsCollection, AddonView, this.addons);
      }
      
      if (this.cropModel) {
        this.cropIcon = this.renderSubview(new CropView({
          model: this.cropModel,
          imgUrl: this.photo.model.getUrl(this.model.color_id || this.colorId),
          thumbRatio: this.photo.model.ratio,
          
          photoModel: this.photo.model,
          sizeModel: this.model.size,
        }), '.crop-container');
        
        this.cropIconWidth = Math.round(this.photo.model.ratio * 32);
        // this.cropIcon.style.width = this.cropIconWidth + 'px';
        
        this.onCropChange();
        
        // var self = this;
        // this.cropIcon.el.addEventListener('mouseenter', function () {
        //   self.showCrop();
        // }, false);
        // this.cropIcon.el.addEventListener('mouseleave', function () {
        //   self.onCropMouseLeave();
        // }, false);
      }
      
      if (this.isProductSize) {
        this.parent.updateCounts();
      }
    }
  },
  
  select: function () {
    this.selected = true;
    var photo = this.photo;
    
    photo.enterCropping(this.crop);
  },
  deselect: function () {
    this.selected = false;
  },
  
  showDescription: function (e) {
    // if (e && e.preventDefault) {
    //   e.preventDefault();
    //   e.stopPropagation();
    // }
    if (e && e.target && e.target.closest('.purchase-addon')) return;
    if (popup.displayedId && popup.displayedId === this.popupId) return;
    this.popupId = popup.show({
      title: this.model.size.long_name,
      content: this.model.size.description,
      image: this.model.size.img_url ? {
        src: this.model.size.img_url,
        width: this.model.size.img_width,
        height: this.model.size.img_height,
      } : null,
      targetEl: this.info,
    });
  },
  
  updateFolding: function () { // fold or unfold the option
    this.buyForm.updatePositions();
  },
  
  updatePrice: function () {
    // var singlePrice = this.model.price;
    var singlePrice = this.model.discounted_price;
    var singleBasePrice = this.model.price;
    var price;
    var basePrice;
    var qty;
    
    
    // if (!this.model.size.no_qty && !this.isProductSize) {
    if (!this.model.size.no_qty) {
      qty = Math.round(+this.qtyView.value || 0);
      this.active = qty > 0;
    }
    else {
      qty = this.active ? 1 : 0;
    }
    this.qty = qty;
    
    if (this.addonsView) {
      var prices = this.model.getPrices(qty);
      var bpType = this.model.photo.pricing.bulk_pricing_type;
      this.bulkPricingActive = !!prices.activeBulkQty;
      singlePrice = prices.discounted;
      singleBasePrice = prices.base;
      var addons = this.addonsView.views;
      var addonsTotal = 0;
      var addon;
      for (var i = 0; i < addons.length; i++) {
        addon = addons[i];
        if (typeof addon.model.bulkQty !== 'number') addon.qty = qty;
        
        if (typeof addon.model.bulkQty === 'number') {
          if (bpType === 'fixed') {
            addon.active = prices.activeBulkQty === addon.model.bulkQty;
            addon.qty = qty;
          }
          else {
            addon.qty = prices['bulk'+ addon.model.bulkQty +'qty'];
            addon.active = !!addon.qty;
          }
        }
        else if (addon.model.discount) {
          if (bpType === 'compound') {
            addon.model.discountAmount = Math.round(prices.totalDiscount / qty);
          }
          else {
            addon.model.discountAmount = prices.discountAmount;
          }
          addon.model.totalDiscount = prices.totalDiscount;
        }
        else if (addon.active || addon.model.options.length &&
                 addon.selected_id) {
          addonsTotal += addon.price * qty;
          singlePrice += addon.price;
          singleBasePrice += addon.price;
        }
      }
      price = prices.total + addonsTotal;
      basePrice = prices.baseTotal + addonsTotal;
    }
    else {
      price = qty * singlePrice;
      basePrice = qty * singleBasePrice;
    }
    
    
    if (!this.isProductSize) {
      this.singlePrice = singlePrice;
      this.singleBasePrice = singleBasePrice;
      this.price = price;
      this.basePrice = qty * singleBasePrice;
      this.active = !!price;
    }
    
    this.buyForm.updatePrice();
    
    // this.el.classList[!price ? 'remove' : 'add']('active');
  },

});
