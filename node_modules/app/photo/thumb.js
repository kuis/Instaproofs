/*==========================================================================*\
  A single photo on the grid
\*==========================================================================*/
"use strict";
var BaseView = require('app/base/base-view');
var ShareView = require('app/social/social');

var app = require('app');
var ua = require('app/util/ua/ua');

module.exports = BaseView.extend({
  template: require('app/templates').photo.thumb,
  displayed: false, // whether the photo has been or just about to be displayed
  
  props: {
    animatedPosition: ['boolean', true, false], // animate coordinates change
    pendingRemoval: ['boolean', true, false],
    width: ['number', true, 0],
    height: ['number', true, 0],
    x: ['number', true, 0],
    y: ['number', true, 0],
  },
  
  derived: {
    onFavPage: {
      fn: function () {
        return !!this.getPage().isFavPage;
      },
    },
  },

  initialize: function () {
    this.bindMethods('drawImage', 'onLoad');
    BaseView.prototype.initialize.apply(this, arguments);
    // console.log('init thumb', this.model.id);
    // this.render();
    // this.cacheElements({
    //   imageContainer: '.image',
    // });
    this.shareView = new ShareView({
      parent: this,
      model: this.model
    });
  },
  
  render: function () {
    this.renderWithTemplate(this);
    this.cacheElements({
      imageContainer: '.image',
      shareMenuContainer: '.share-menu'
    });

    this.renderSubview(this.shareView, this.shareMenuContainer);
  },
  
  events: {
    'click .icon.fav': 'toggleFav',
    'click .icon.hide': 'toggleHide',
    'click .button.remove': 'removePhoto',
    'click .button.restore': 'restore',
    
    'click .social-button.facebook': 'shareOnFacebook',
    'click .social-button.googleplus': 'shareOnGoogleplus',
    'click .social-button.pinterest': 'shareOnPinterest',
    'click .social-button.stumbleupon': 'shareOnStumbleupon',
    'click .social-button.twitter': 'shareOnTwitter',
  },
  
  bindings: {
    animatedPosition: {
      type: 'booleanClass',
      name: 'animated-position',
    },
    pendingRemoval: {
      type: 'booleanClass',
      name: 'removed',
    },
    x: {
      type: function () {
        this.el.style[ua.css.transform] = 
            'translate('+this.x+'px,'+this.y+'px)';
      },
    },
    y: {
      type: function () {
        this.el.style[ua.css.transform] = 
            'translate('+this.x+'px,'+this.y+'px)';
      },
    },
    width: {
      type: function () {
        this.el.style.width = this.width+'px';
      },
    },
    height: {
      type: function () {
        this.el.style.height = this.height+'px';
      },
    },
    'model.in_cart': {
      type: function (el, val) {
        this.el.classList.toggle('in-cart', val);
        this.query('.icon.cart .tip').innerHTML = 
            this.lz(val ? 'In Cart' : 'To Cart');
      },
      // type: 'booleanClass',
      // name: 'in-cart',
    },
    'model.in_favorites': {
      type: function (el, val) {
        this.el.classList.toggle('in-favorites', val);
        this.query('.icon.fav .tip').innerHTML = 
            this.lz(val ? 'In Favorites' : 'To Favorites');
      },
    },
    'model.hidden': {
      type: function (el, val) {
        // console.log('hidden change', this.model.id, val);
        this.el.classList.toggle('hidden', val);
        this.query('.icon.hide .tip').innerHTML = 
            this.lz(val ? 'Hidden' : 'Hide');
      },
    },
  },
  
  loadImage: function () {
    if (this.loading || this.loaded) return;
    this.loading = true;
    
    if (!this.image) this.image = document.createElement('img');
    this.image.addEventListener('load', this, false);
    this.image.addEventListener('error', this, false);
    this.image.src = this.model.thumb_url;
    
    this.imageContainer.appendChild(this.image);
  },
  
  handleEvent: function (e) {
    if (!this.loading) return;
    switch (e.type) {
      case 'load':
        this.loaded = true;
        app.loadedImages[this.model.thumb_url] = true;
        this.trigger('load');
        this.drawImage();
       
        this.image.removeEventListener('load', this, false);
        this.image.removeEventListener('error', this, false);
        break;
      case 'error':
        console.log('failed to load photo: '+ this.model.img_url, arguments);
        if (this.failures < 5) {
          this.load();
          // this.image.src = this.model.url + 
          //     (this.model.url.indexOf('?') > -1 ? '&x=' : '?') + Date.now();
        }
        else {
          this.failed = true;
          this.trigger('error');
          // this.rq = null;
          this.image.removeEventListener('load', this, false);
          this.image.removeEventListener('error', this, false);
          this.image = null;
        }
        this.failures++;
        break;
    }
    
    this.parent.loadingCount--;
    this.parent.loadPhotos();
  },
  
  onLoad: function () {
    app.loadedImages[this.model.thumb_url] = true;
  },
  
  removePhoto: function () {
    this.parent.removePhoto(this.model);
  },
  
  restore: function () {
    
  },
  
  shareOnFacebook: function (e) {
    return app.sharing.popup(e, 'facebook', this.model.id, this.model.eid);
  },
  shareOnGoogleplus: function (e) {
    return app.sharing.popup(e, 'googleplus', this.model.id, this.model.eid);
  },
  shareOnPinterest: function (e) {
    return app.sharing.popup(e, 'pinterest', this.model.id, this.model.eid);
  },
  shareOnStumbleupon: function (e) {
    return app.sharing.popup(e, 'stumbleupon', this.model.id, this.model.eid);
  },
  shareOnTwitter: function (e) {
    return app.sharing.popup(e, 'twitter', this.model.id, this.model.eid);
  },
  
  toggleFav: function () {
    var favs = this.model.event.favorites;
    var favItem = favs.photos.get(this.model.id);
    if (favItem) {
      // if (this.onFavPage) {
      //   this.pendingRemoval = true;
      //   favs.photos.remove(favItem, { silent: true });
      // }
      // else {
        favs.photos.remove(favItem);
      // }
    } 
    else {
      favs.photos.add({
        pid: this.model.id,
        cat_id: this.model.cat_id,
      }, { 
        parse: true,
        at: favs.photos.length,
      });
    }
    favs.save();
  },
  toggleHide: function () {
    var hides = this.model.event.hides;
    var item = hides.photos.get(this.model.id);
    if (item) {
      hides.photos.remove(item);
    } 
    else {
      hides.photos.add({
        pid: this.model.id,
        cat_id: this.model.cat_id,
      });
    }
    hides.save();
  },
  
  drawImage: function () {
    this.write(function () {
      this.el.classList.add('loaded');
      this.el.firstChild.style.backgroundImage = 
          'url('+this.model.thumb_url+')';
    }, 'high');
  },
});
