/*==========================================================================*\
  Photos Grid
\*==========================================================================*/
"use strict";

var BaseView = require('app/base/base-view');
var PhotoView = require('./thumb');

// width breakpoints: reaching a breakpoint adds a column, starting from 1
// var breakpoints = [250, 550, 900];
var breakpoints = [450, 850, 1500];

var app = require('app');
var maxBy = require('lodash.max');
var minBy = require('lodash.min');
var ua = require('app/util/ua/ua');

window.updateGBP = function (a,b,c) {
  breakpoints[0] = a;
  breakpoints[1] = b;
  breakpoints[2] = c;
  app.trigger('newgbp');
};

function returnHeight(column) { return column.height; }

module.exports = BaseView.extend({
  
  pageIsActive: true, // whether the category page is currently active 
  height: 0, // current grid height
  loadingCount: 0, // number of currently loading images 
  concurrentLoads: ua.mobile ? 3 : 10, // # of simultaneious thumb loads
  displayedCount: 0, // number of items that is or about to be displayed 
  scheduledRender: null, // schedule ID for throttled rendering 
  
  // when the scrolling has triggered another batch to show,
  // but we still haven't rendered the previous one
  pendingRender: false, 
  
  props: {
    hiddenDisplayed: ['boolean', true, true],
    hiddenPositioned: ['boolean', true, false],
    hiddenPresent: ['boolean', true, false],
  },
  
  bindings: {
    hiddenPositioned: {
      type: 'booleanClass',
      name: 'hidden-positioned',
    },
    hiddenDisplayed: {
      type: 'booleanClass',
      name: 'hidden-displayed',
    },
  },
  
  initialize: function (ops) {
    BaseView.prototype.initialize.apply(this, arguments);
    var self = this;
    
    this.listenTo(app, 'newgbp', this.resize);
    
    this.cacheElements({
      hidesHeader: '.hides-header',
    });
    
    this.event = this.collection.parent.event;
    this.preview = !!ops.preview;
    this.photoViews = []; 
    this.viewsById = {};
    this.renderQueue = [];
    if (this.collection.length) {
      this.resize();
      if (this.collection.length) {
        this.write(this.updateViewsList, 'normal');
      }
    }
    else {
      this.listenToOnce(this.event, 'change:complete', this.updateViewsList);
      this.listenToOnce(this.event, 'change:complete', this.resize);
    }
    this.listenTo(app.state, 'resize', this.resize);
    
    this.listenTo(app.router, 'page', function (page, id) {
      if (app.router.lightboxMode || 
          id !== 'category'+ this.collection.parent.page_id) {
        self.pageIsActive = false;
      }
    });
    this.listenTo(app.router, 'page:category'+ this.collection.parent.page_id, 
      function () {
        if (!app.router.lightboxMode) {
          self.pageIsActive = true;
          self.loadPhotos();
        }
      }
    );
    
    this.listenTo(this.collection, 'add', function () {
      this.updateViewsList();
      this.resize();
      this.showMore();
    });
    this.listenTo(this.collection, 'remove', function (model) {
      this.removePhoto(model);
    });
    
    this.listenTo(this.event.hides.photos, 'add', this.onHidesChange);
    this.listenTo(this.event.hides.photos, 'remove', this.onHidesChange);
  },
  
  events: {
    'click .hides-header .label': 'toogleHidden',
  },
  
  getPhotoView: function (model) {
    var id = model.id;
    if (!this.viewsById[id]) {
      this.viewsById[id] = new PhotoView({
        model: model,
        parent: this,
      });
    }
    return this.viewsById[id];
  },
  
  onHidesChange: function (model) { // any of this list's images got (un)hidden
    if (!this.collection.get(model.pid)) return;
    this.updateViewsList();
    this.resize();
  },
  
  toogleHidden: function () {
    this.hiddenDisplayed = !this.hiddenDisplayed;
    this.setHeight();
  },
  
  updateViewsList: function () {
    this.photoViews = [];
    var photo;
    var hidden = [];
    for (var i = 0; i < this.collection.length; i++) {
      photo = this.getPhotoView(this.collection.at(i));
      if (photo.model.hidden) hidden.push(photo);
      else this.photoViews.push(photo);
    }
    
    if (this.event.allowedHide) {
      this.photoViews = this.photoViews.concat(hidden);
      this.hiddenPresent = !!hidden.length;
    }
    
    
    var ids = [];
    for (i = 0; i < this.photoViews.length; i++) {
      ids.push((this.photoViews[i].model.id + '').substr(-4));
    }
    // console.log('UPDATE LIST', ids.join(' '));
  },
  
  render: function () {
    return this;
  },
  
  resize: function () {
    var width = app.state.contentWidth;
    var height = app.state.contentHeight;
    var columnsNum = 1;
    // var gutterSize = this.gutterSize = Math.ceil(width / 100);
    var gutterSize = this.gutterSize = 10;
    
    this.hiddenPositioned = false;
    this.height = 0;
    
    var i = 0;
    while (breakpoints[i++] <= width) columnsNum++; // set number of columns 
    
    // make sure that portrait images always fit the height
    // (at least the ones with height of 1.5 width or less)
    while (width > height && (1.5 * width / columnsNum > height)) {
      columnsNum++;
    }
    
    var columnWidth = (width - gutterSize * (columnsNum - 1)) / columnsNum;
    this.columnWidth = Math.round(columnWidth);
    
    this.columns = [];
    var coveredWidth = 0;
    for (i = 0; i < columnsNum; i++) {
      this.columns[i] = {
        width: i < columnsNum - 1 ? Math[i % 2 ? 'floor' : 'ceil'](columnWidth)
                                  : width - coveredWidth,
        left: +coveredWidth,
        height: 0,
      };
      coveredWidth += this.columns[i].width + gutterSize;
    }
    
    if (!this.displayedCount) this.showMore();
    else this.showPhotos();
  },
  
  cleanup: function () {
    var i, photo;
    for (i = 0; i < this.photoViews.length; i++) {
      photo = this.photoViews[i];
      if (!this.collection.get(photo.model)) {
        this.photoViews.splice(i, 1);
        i--;
      }
    }
    if (this.displayedCount > this.photoViews.length) {
      this.displayedCount = this.photoViews.lenght;
    }
  },
  
  removePhoto: function (model) {
    var i, photo, top, bottom;
    var gridTop = this.el.getBoundingClientRect().top;
    // console.log('remove photo', this.parent.parent.scroll.top);
    // return;
    for (i = 0; i < this.photoViews.length; i++) {
      photo = this.photoViews[i];
      if (photo.model.id === model.id) {
        photo.displayed = false;
        if (photo.el) photo.el.classList.add('animate-out');
        // photo.scale = 0;
        this.after(300, function () {
          photo.remove();
        });
        this.photoViews.splice(i, 1);
        this.displayedCount -= 1;
        break;
      }
    }
    
    this.cleanup();
    this.updateViewsList();
    this.resize();
    
    // console.log(this.columns);
    
    // for (i = 0; i < this.photoViews.length; i++) {
    //   photo = this.photoViews[i];
    //   if (!photo.displayed) continue;
    //   top = gridTop + photo.y;
    //   bottom = top + photo.height;
    //   photo.animatedPosition = bottom > 0 && top < app.state.height;
    //   console.log(bottom, top, app.state.height, photo.animatedPosition);
    // }
  },
  
  // preloadViews: function () {
  //   var notRendered = !this.photoViews.length ? this.collection : 
  //       this.collection.last(this.collection.length - this.photoViews.length);
  //   var offset = this.collection.length - notRendered.length;
  //   for (var i = 0; i < notRendered.length; i++) {
  //     this.photoViews.push(new PhotoView({
  //       model: this.collection.at(offset + i),
  //       parent: this,
  //     }));
  //   }
  // },
  loadPhotos: function () {
    if (!this.pageIsActive) return;
    for (var i = 0; i < this.photoViews.length; i++) {
      if (this.loadingCount >= this.concurrentLoads) break;
      
      if (this.photoViews[i].displayed && !this.photoViews[i].loading &&
          !this.photoViews[i].loaded) {
        this.photoViews[i].loadImage();
        this.loadingCount++;
      }
    }
  },
  
  setHeight: function () {
    var height;
    if (this.hiddenPresent && this.hiddenPositioned) {
      if (this.hiddenDisplayed) {
        height = maxBy(this.columns, returnHeight).height;
      }
      else {
        height = this.mainHeight + 120;
      }
    }
    else {
      height = maxBy(this.columns, returnHeight).height;
    }
    this.el.style.height = height + 'px';
  },
  
  // show a number of photos =================================================
  showPhotos: function (initial) {
    for (var i = 0; i < this.columns.length; i++) {
      this.columns[i].height = 0;
      this.hiddenPositioned = false;
    }
    for (i = 0; i < this.displayedCount; i++) {
      // if (!this.photoViews[i]) {
      //   console.log('adding photo', this.collection.toJSON());
      // }
      if (!this.photoViews[i]) {
        this.updateViewsList();
      }
      // if (!this.photoViews[i]) this.photoViews[i] = new PhotoView({
      //   model: this.collection.at(i),
      //   parent: this,
      // });
      this.showPhoto(this.photoViews[i], initial);
      
      if (!app.state.noTransitions && initial && 
          minBy(this.columns, returnHeight).height > app.state.height - 200) {
        break;
      }
    }
    if (initial) this.displayedCount = i;
    this.write(this.setHeight, 'high');
  },
  
  showPhoto: function (photo, initial) {
    // console.log('show photo', photo.model.id);
    // console.trace();
    if (!photo) {
      console.log('no photo');
      console.trace();
    }
    var model = photo.model;
    var i;
    
    // if (model.hidden && this.hiddenPositioned) {
    //   console.log('hidden positioned');
    // }
    if (model.hidden && !this.hiddenPositioned) {
      this.hiddenPositioned = true;
      this.mainHeight = maxBy(this.columns, returnHeight).height;
      this.hidesHeader.style[ua.css.transform] = 
          'translateY('+this.mainHeight + 'px)';
      for (i = 0; i < this.columns.length; i++) {
        this.columns[i].height = this.mainHeight + 120;
      }
    }
    
    var column = minBy(this.columns, returnHeight);
    
    
    // model.width = column.width;
    // model.height = Math.floor((model.height / model.width) 
    //              * this.columnWidth );
    // model.xPos = +column.left;
    // model.yPos = +column.height;
    
    if (!photo.el) {
      photo.render();
      photo.drawImage();
    }
    
    var height = Math.floor((model.height / model.width) 
                 * this.columnWidth);
    
    photo.width = column.width;
    photo.height = height;
    photo.x = column.left;
    photo.y = column.height;
    
    // photo.el.style.width = column.width + 'px';
    // photo.el.style.height = height + 'px';
    
    // photo.el.style.left = column.left +'px';
    // photo.el.style.top = column.height +'px';
    
    photo.el.classList.toggle('short', height <= 135);
    
    column.height += height + this.gutterSize;
    
    // this.loadingQueue.push(photo);
    // photo.model.
    
    if (!photo.displayed) {
      photo.displayed = true;
      photo.pendingRemoval = false;
      photo.el.classList.remove('animate-out');
      photo.el.classList.remove('removed');
      // this.el.appendChild(photo.el);
      if (initial) this.el.appendChild(photo.el); // page is not in the DOM yet
      else if (ua.mobile) { // on mobile we only add on tap, so no throttling
        this.write(function () {
          this.el.appendChild(photo.el);
        }, 'high');
      }
      else { // add photos incrementaly
        this.renderQueue.push(photo);
        // this.write(function () {
        //   this.el.appendChild(photo.el);
        // }, 'high');
        // this.write(this.renderPhoto, 'high');
        if (!this.scheduledRender) {
          this.scheduledRender = this.write(this.renderPhoto, 'normal');
        }
      }
    }
    
    this.loadPhotos();
    
    // return column.height - height;
  },
  renderPhoto: function () {
    this.scheduledRender = null;
    var i = 0;
    while (this.renderQueue.length && i < 6) {
      this.el.appendChild(this.renderQueue[0].el);
      this.renderQueue.shift();
      i++;
    }
    if (this.renderQueue.length) {
      this.scheduledRender = this.write(this.renderPhoto, 'normal');
    } 
    else if (this.pendingRender) {
      this.pendingRender = false;
      this.showMore();
    }
  },
  
  onShow: function () {
    this.showMore();
    if (this.collection.length) this.updateViewsList();
  },
  
  showMore: function () {
    if (this.renderQueue.length || app.router.lightbox.displayed || 
        !app.isReady && app.router.willShowLightbox) {
      this.pendingRender = true;
      return;
    }
    var initial = !this.displayedCount;
    var remaining = this.collection.length - this.displayedCount;
    var min = ua.mobile ? 30 : this.displayedCount ? 15 : 25;
    var max = ua.mobile ? 40 : this.displayedCount ? 22 : 35;
    this.displayedCount += remaining <= max ? remaining : min;
    if (remaining <= max) {
      // this.parent.parent.complete = true;
      this.write(function () {
        this.parent.el.classList.add('complete');
      });
    }
    this.showPhotos(initial);
  },
});

