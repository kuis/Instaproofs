/*==========================================================================*\
  A Photo
\*==========================================================================*/
"use strict";
var app = require('app');
var AddonsCollection = require('app/addon/addons-collection');
var BaseModel = require('app/base/base-model');

var helpers = require('app/util/helpers/helpers');

// var BuyAddon = require('app/base/base-model').extend({
//   id: 'number',
//   derived {
    
//   },
// });

var BuyOption = BaseModel.extend({
  props: {
    color_id: 'number',
    size_id: 'number',
    price: ['number', true, 0],
    bulk_pricing: 'array',
  },
  
  session: {
    order: 'number',
    altOrder: 'number', // order for 'ALL variants' listing
  },
  
  derived: {
    id: {
      deps: ['size_id', 'color_id'],
      fn: function () {
        return this.size_id +'-'+ this.color_id;
      },
    },
    event: {
      fn: function () {
        return this.collection.parent.event;
      },
    },
    photo: {
      fn: function () {
        return this.collection.parent;
      },
    },
    size: {
      fn: function () {
        return app.sizes.get(this.size_id);
      },
    },
    discount: {
      cache: false,
      fn: function () {
        var e = this.event;
        return e.sales.sizes.get(this.size_id) || e.sales.allSizes;
      },
    },
    display_price: {
      cache: false,
      fn: function () {
        this.formatMoney(this.discounted_price);
      },
    },
    display_original_price: {
      cache: false,
      fn: function () {
        this.formatMoney(this.price);
      },
    },
    discounted_price: {
      cache: false,
      fn: function () {
        if (!this.discount) return this.price;
        return Math.round(this.price * (1 - this.discount.discount));
      },
    },
    addons: {
      deps: ['size_id', 'event'],
      fn: function () {
        var i;
        var addons = [];
        var addon;
        for (i = 0; i < this.event.addons.length; i++) {
          addon = app.addons.get(this.event.addons[i]);
          if (addon && addon.sizes[this.size_id]) {
            addons.push(addon);
          }
        }
        var col = new AddonsCollection(addons, {
          parent: this,
        });
        return col;
      },
    },
  },
  
  initialize: function () {
    BaseModel.prototype.initialize.apply(this, arguments);
    this.listenTo(this.event.sales, 'update', this.updateDiscount);
  },
  
  updateDiscount: function () {
    this.discount;
    this.discounted_price;
    this.display_price;
  },
  
  getBulkDiscount: function (itemNum) {
    
  },
  getPrices: function (qty) {
    qty = qty || 0;
    var i;
    var bpType = this.photo.pricing.bulk_pricing_type;
    var price;
    var discountMP = this.discount && this.discount.discount ? 
                     (1-this.discount.discount) : 1;
    var prices = { 
      base: this.price, 
      bulk: this.price,
      discounted: this.price,
      discountAmount: 0,
      activeBulkQty: 0,
      
      baseTotal: 0,
      total: 0,
      totalDiscount: 0,
    };
    
    for (i = 0; i < this.bulk_pricing.length; i++) {
      prices['bulk'+ this.bulk_pricing[i].qty +'qty'] = 0;
      if (qty >= this.bulk_pricing[i].qty) {
        prices.activeBulkQty = this.bulk_pricing[i].qty;
        prices.bulk = prices.discounted = this.bulk_pricing[i].price;
      }
    }
    
    if (this.discount && this.discount.discount) {
      prices.discountAmount = Math.round(this.discount.discount * prices.bulk);
      prices.discounted = prices.bulk - prices.discountAmount;
      prices.totalDiscount = qty * prices.discountAmount;
    }
    
    prices.total = prices.discounted * qty;
    prices.baseTotal = prices.base * qty;
    
    if (bpType === 'compound' && this.bulk_pricing.length) {
      var mq;
      var bp;
      var da; // discount amount
      var qt;
      var cq = this.bulk_pricing[0].qty - 1; // covered qty
      if (cq > qty) cq = qty;
      prices.baseTotal = cq * this.price;
      da = (1-discountMP) * prices.baseTotal;
      prices.total = prices.baseTotal - da;
      prices.totalDiscount = da; // total no-bulk discount
      prices.bulk0qty = cq;
      if (cq < qty) for (i = 0; i < this.bulk_pricing.length; i++) {
        bp = this.bulk_pricing[i];
        if (!bp.maxQty) {
          mq = qty;
        } else {
          mq = qty > bp.maxQty ? bp.maxQty : qty;
        }
        qt = mq-bp.qty+1;
        if (qt < 0) qt = 0;
        prices.baseTotal += qt * this.price;
        da = (1-discountMP) * qt * bp.price;
        prices.totalDiscount += da;
        prices.total += qt * bp.price - da;
        prices['bulk'+ this.bulk_pricing[i].qty +'qty'] = qt;
      }
      prices.totalDiscount = Math.round(prices.totalDiscount);
      prices.total = Math.round(prices.total);
    }
    
    return prices;
  },
});

var BuyOptionsCollection = require('app/base/base-collection').extend({
  // mainIndex: 'size_id',
  mainIndex: 'id',
  indexes: ['size_id'],
  model: BuyOption,
  // displayAll: false,
  // comparator: function (a, b) {
  //   if (this.displayAll) {
  //     console.log('comparator', a.size.display_name, b.size.display_name, a.size_id, b.size_id, a.originalOrder, b.originalOrder);
  //     return (a.size_id - b.size_id) || (a.originalOrder - b.originalOrder);
  //   }
  //   else {
  //     return a.originalOrder - b.originalOrder;
  //   }
  // },
});

module.exports = BaseModel.extend({
  extraProperties: 'ignore',
  BuyOptionsCollection: BuyOptionsCollection,
  props: {
    id: 'number',
    name: ['string', true, ''], // image title 
    
    // URL to the largest image to be displayed in the app (not 8Mpx orignal)
    img_url: ['string', true, ''],
    width: ['number', true, 0], // width of the image under img_url
    height: ['number', true, 0], // height of the image under img_url
    
    // original image dimensions 
    // original_width: ['number', true, 0],
    // original_height: ['number', true, 0],
    
    // if a photo can be downloaded by anybody or if current user has sufficient
    // permissions, this is the URL to the original, possibly very large, photo.
    // download_url: ['string', true, ''],
    
    // The pricing template ID that the image is associated with
    pricing_id: ['number', true, 0],
  },
  
  session: {
    _cat_id: ['number', true, 0], // for favorites
    current_color_id: ['number', true, 0],
    in_cart: ['boolean', true, false],
    in_favorites: ['boolean', true, false],
    hidden: ['boolean', true, false],
    locked: ['boolean', true, false], // in a locked category 
  },
  
  derived: {
    eid: {
      fn: function () {
        return this.event.id;
      },
    },
    cat_id: {
      cache: false,
      fn: function () {
        if (!this.collection) return;
        if (this.collection.parent.isFavModel) return 'favorites';
        return this.collection.parent.id;
      },
    },
    event: {
      fn: function () {
        return this.collection.parent.event;
      },
    },
    
    download_url: {
      cache: false,
      fn: function () {
        var catId = this.cat_id;
        if (catId === 'favorites') {
          catId = this._cat_id;
        }
        if (!catId) return false;
        if (!this.event.categories.get(catId).download) return false;
        
        var keychain = app.keychain.events.get(this.eid);
        return 'https://secure.instaproofs.com/digitalImageDownload.php?'+
            'eid='+ this.eid +'&id='+ this.id +
            (keychain && keychain.email ? 
                '&email='+ encodeURIComponent(keychain.email) : '')+
            '&url='+ encodeURIComponent(app.url);
      },
    },
    
    app_url: {
      fn: function () {
        return '#events/'+ this.event.id +'/'+ this.cat_id +'/'+ this.id;
      },
    },
    buy_url: {
      fn: function () {
        
        return '#events/'+ this.event.id +'/'+ this.cat_id +'/'+ this.id +
                app.router.encodeParams({ buy: true });
      },
    },
    
    thumb_url: {
      deps: ['img_url'],
      fn: function () {
        // console.log(this.img_url);
        return helpers.toThumbUrl(this.img_url);
      },
    },
    thumb_blur_url: {
      deps: ['thumb_url'],
      fn: function () {
        console.log('blur url');
        return helpers.toBlurUrl(this.thumb_url);
      },
    },
    micro_url: {
      deps: ['img_url', 'current_color_id'],
      fn: function () {
        return this.getUrl(this.current_color_id);
        // return this.toMicroURL(this.img_url);
      },
    },
    
    ratio: {
      deps: ['width', 'height'],
      fn: function () {
        return this.width / this.height;
      },
    },
    
    next: {
      cache: false,
      fn: function () {
        var index = this.collection.indexOf(this);
        return this.collection.at(index+1) || null;
      },
    },
    prev: {
      cache: false,
      fn: function () {
        var index = this.collection.indexOf(this);
        return this.collection.at(index-1) || null;
      },
    },
    
    pricing: {
      deps: ['pricing_id'],
      fn: function () {
        return app.pricing.get(this.pricing_id);
      },
    },
    
    position: {
      cache: false,
      fn: function () {
        var photo = this.collection.at(0);
        var pos = 0;
        while (photo !== this && photo) {
          pos++;
          photo = photo.nextVisible;
        }
        return pos;
      },
    },
    
    nextVisible: {
      cache: false,
      fn: function () {
        var next = this;
        do {
          next = next.next;
        } while (next && (next.hidden || next.locked));
        return next;
      },
    },
    prevVisible: {
      cache: false,
      fn: function () {
        var prev = this;
        do {
          prev = prev.prev;
        } while (prev && (prev.hidden || prev.locked));
        return prev;
      },
    },
    
    nextAround: {
      cache: false,
      fn: function () {
        var category = this.collection.parent;
        if (!this.next && category.collection && 
            category.collection.length > 1) {
          return category.nextAround.photos.at(0);
        }
        return this.next || this.collection.at(0);
      },
    },
    prevAround: {
      cache: false,
      fn: function () {
        var category = this.collection.parent;
        if (!this.prev && category.collection && 
            category.collection.length > 1) {
          return category.prevAround.photos.last();
        }
        return this.prev || this.collection.last();
      },
    },
    nextAroundVisible: {
      cache: false,
      fn: function () {
        var next = this;
        do {
          next = next.nextAround;
        } while (next.hidden || next.locked);
        return next;
      },
    },
    prevAroundVisible: {
      cache: false,
      fn: function () {
        var prev = this;
        do {
          prev = prev.prevAround;
        } while (prev.hidden || prev.locked);
        return prev;
      },
    },
    
    buyOptions: {
      // deps: ['pricing_id', 'current_color_id'],
      deps: ['pricing_id'],
      fn: function () {
        var i;
        var tpl = this.pricing;
        var color = tpl.colors[this.current_color_id] || tpl.colors[0];
        if (!color) {
          for (i in tpl.colors) {
            color = tpl.colors[i];
            break;
          }
        }
        var keys = Object.keys(tpl.colors).sort(function (a, b) { return a-b });
        var options = [];
        var mainSizes = {};
        for (i = 0; i < keys.length; i++) {
          options = options.concat(tpl.colors[keys[i]]);
        }
        var altOrder = 0;
        for (i = 0; i < options.length; i++) {
          options[i].order = i;
          if (!mainSizes[options[i].size_id]) {
            mainSizes[options[i].size_id] = options[i];
            options[i].altOrder = altOrder;
            altOrder += 1000;
          }
          else {
            options[i].altOrder = mainSizes[options[i].size_id].altOrder + 
                                  options[i].order;
          }
        }
        
        return new BuyOptionsCollection(options, { parent: this });
        
        // var event = this.event;
        
        // var option;
        // for (i = 0; i < color.length; i++) {
        //   option = color[i];
          
        // }
      },
    },
  },
  
  initialize: function () {
    BaseModel.prototype.initialize.apply(this, arguments);
    
    if (app.state.bootstrapped) {
      this.current_color_id = app.colors.getDefaultId();
    }
    else {
      this.listenToOnce(app.state, 'change:bootstrapped', function () {
        this.current_color_id = app.colors.getDefaultId();
      });
    }
    
    this.listenTo(this.event.cart, 'add:photo:'+this.id, this.onAddToCart);
    this.listenTo(this.event.cart, 'remove:photo:'+this.id, 
                  this.onRemoveFromCart);
    
    this.listenTo(this.event.favorites, 'add:'+this.id, this.onAddToFavorites);
    this.listenTo(this.event.favorites, 'remove:'+this.id, 
                  this.onRemoveFromFavorites);
    
    this.listenTo(this.event.hides, 'add:'+this.id, this.onHide);
    this.listenTo(this.event.hides, 'remove:'+this.id, this.onUnhide);
    
    this.in_cart = !!this.event.cart.getPhoto(this.id);
    // this.in_cart = !!this.event.cart.allPhotos.get(this.id);
    this.in_favorites = !!this.event.favorites.photos.get(this.id);
    this.hidden = !!this.event.hides.photos.get(this.id);
    
    
    this.listenTo(this.collection.parent, 'change:locked', this.updateLock);
    this.updateLock();
    
    // var i, product;
    // for (i = 0; i < this.event.cart.products.length; i++) {
    //   product = this.event.cart.products.at(i);
    //   if (product.photos.get(this.id)) this.in_cart = true;
    // }
  },
  
  getUrl: function (colorId) {
    if (typeof colorId === 'string') {
      return this.img_url +'&style='+ colorId;
    }
    
    var color = app.colors.get(colorId);
    if (!color) {
      console.log('color not found', colorId, app.colors);
      console.trace();
    }
    // console.log(this.img_url +'&style='+ app.colors.get(colorId).prefix);
    return this.img_url +'&style='+ color.prefix;
  },
  getThumbUrl: function (colorId) {
    // console.log(this.img_url +'&style='+ app.colors.get(colorId).prefix);
    return helpers.toThumbUrl(this.getUrl(colorId));
  },
  
  onAddToCart: function () {
    this.in_cart = true;
  },
  onRemoveFromCart: function () {
    this.in_cart = false;
  },
  onAddToFavorites: function () {
    this.in_favorites = true;
  },
  onRemoveFromFavorites: function () {
    this.in_favorites = false;
  },
  onHide: function () {
    this.hidden = true;
  },
  onUnhide: function () {
    this.hidden = false;
  },
  
  updateLock: function () {
    this.locked = this.collection.parent.locked;
  },
  
  // session: {
  //   xPos: ['number', true, 0],
  //   yPos: ['number', true, 0],
  //   width: ['number', true, 0],
  //   height: ['number', true, 0],
  // },
  
});
