"use strict";

var BaseModel = require('app/base/base-model');
var BaseCollection = require('app/base/base-collection');
var ItemModel = require('./history-item-model');

var Items = BaseCollection.extend({
  model: ItemModel,
});

module.exports = BaseModel.extend({
  props: {
    id: 'number',
    lastMainItem: 'state', // last of the 'main' locations (for back button)
  },
  
  collections: {
    items: Items,
  },
  
  session: {
    latestConfig: 'object',
  },
  
  derived: {
  },
  
  add: function (data) {
    data.config = data.config || {};
    this.latestConfig = data.config;
    switch(data.type) {
      case 'event':
      case 'event-category':
      case 'lightbox':
        if (!data.config.buy && !data.config.crop) {
          this.lastMainItem = new ItemModel(data);
        }
        break;
    }
    if (!data.eid || this.items.length && data.eid !== this.getLatest().eid) {
      console.log('history cleared', data.eid, this.getLatest() && this.getLatest().eid, this.items.toJSON());
      this.items.reset();
    }
    else {
      this.items.remove(data.id);
      var latest = this.getLatest();
      if (!latest || data.url !== latest.url) this.items.add(data);
    }
    this.trigger('update');
  },
  
  getLatest: function () {
    return this.items.last();
  },
  getLatestPage: function () {
    var item;
    for (var i = this.items.length-1; i >= 0; i--) {
      item = this.items.at(i);
      if (item.type !== 'lightbox') return item;
    }
  },
  getPrevious: function () {
    if (this.items.length < 2) return null;
    return this.items.at(this.items.length - 2);
  },
  getBackTo: function () {
    var latest = this.getLatest();
    switch (latest.type) {
      case 'event-cart':
      case 'event-favorites':
        return this.lastMainItem || null;
      default:
        return null;
    }
    
    
    // if (this.items.length < 2) return null;
    // var item;
    // var latest = this.getLatest();
    // if (latest.type !== 'event-cart' && latest.type !== 'event-favorites') {
    //   return null;
    // }
    // for (var i = 2; i <= this.items.length; i++) {
    //   item = this.items.at(this.items.length - i);
    //   if (!item.config.buy && !item.config.crop &&
    //       item.url !== latest.url) return item;
    // }
    // return null;
  },
});
