/*==========================================================================*\
  A Photo Purchase Option like a print size or web rights 
\*==========================================================================*/
"use strict";

var BaseModel = require('app/base/base-model');
var AddonsCollection = require('app/addon/addons-collection');
var ShippingCollection = require('app/shipping/shipping-prices-collection');

module.exports = BaseModel.extend({
  extraProperties: 'ignore',
  props: {
    isOptionModel: ['boolean', true, true],
    
    id: 'number',
    type: ['string', true, ''], // print|group|digital 
    name: ['string', true, ''], // name to display
    full_name: ['string', true, ''], // full name to display in a popup
    description: ['string', true, ''], // an optional description
    img_url: ['string', true, ''], // URL to an optional image
    img_width: ['number', true, 0], // image width in pixels
    img_height: ['number', true, 0], // image height in pixels
    price: ['number', true, 0], // price of an option in cents
    no_qty: ['boolean', true, false], // an option like Download with no qty
    
    width: 'number',  // width of a print
    height: 'number', // height of a print
    
    include_in_shipping_calcs: ['boolean', true, true],
    
    // addon_ids: 'array', // list of addon IDs for this option 
    
    // May not be needed. Only present on 'digital' sizes.
    'download_size': ['number', true, 0], 
    
    // whether the option should be charged sales tax on during checkout
    'taxable': ['boolean', true, true], 
    
    additional_size_list: 'array',
    
    // shipping: 'array',
    
    // 'shipping':             array: [                // One or more shipping prices, in cents. 
    //                             {
    //                                 [int, true, 0]      // The selected shipping method at checkout determines the value to use.
    //                             }
    //                         ],
    // 'additional_size_list': array [                 // A 'group' size such as "Package A" or "Wallets" may contain additional sizes as a part of the group
    //                             {
    //                                 'id':   [int, true, 0],     // The size ID
    //                                 'qty':  [int, true, 0],     // The qty of the size that are included
    //                             }
    //                         ],
    // 'release':              array [                 // 'Digital' sizes may have one or more contractual "release" documents associated with them
    //                             {
    //                                 'name': [string, true, ''], // The name of the release document
    //                                 'url':  [string, true, ''], // A URL pointing to the release document
    //                             }
    //                         ],
  },
  
  collections: {
    addons: AddonsCollection,
    shipping: ShippingCollection,
  },
  
  derived: {
    display_name: {
      deps: ['name', 'width', 'height'],
      fn: function () {
        return this.name || (this.width +'" x '+ this.height + '"');
      },
    },
    long_name: {
      deps: ['full_name', 'name', 'width', 'height'],
      fn: function () {
        return this.full_name || this.name || 
               (this.width +'" x '+ this.height + '"');
      },
    },
    
    display_price: {
      deps: ['price'],
      fn: function () {
        return this.formatMoney(this.price);
      },
    },
    
    final_price: {
      cache: false,
      fn: function () {
        
      },
    },
  },
  
  getDiscount: function (event) {
    return event.sales.sizes.get(this.id) || event.sales.allSizes;
  },
  getDiscountedPrice: function (event) {
    var discount = this.getDiscount();    
    return Math.round(this.price * (1 - discount.discount));
  },
  
  // parse: function (data) {
  //   // BaseModel.parse.apply(this, arguments);
  //   if (data.addon_ids && data.addon_ids.length) {
  //     var addons = [];
  //     var addon;
  //     for (var i = 0; i < data.addon_ids.length; i++) {
  //       addon = app.addons.get(data.addon_ids[i]);
  //       if (addon) addons.push(addon);
  //     }
  //     data.addons = addons;
  //   }
  //   return data;
  // },
  
});
