/*==========================================================================*\
  Cart Page
\*==========================================================================*/
"use strict";

var app = require('app');
var Page = require('app/base/base-page');
var PhotoView = require('./photo/cart-photo');
var ProductView = require('./product/cart-product');
var SalesView = require('app/sale/sales-info');
var assign = require('lodash.assign');
var debounce = require('lodash.debounce');
var templates = require('app/templates');
var Countries = require('app/util/countries');

module.exports = Page.extend({
  dictionary: 'event', // localization dictionary 
  pageTitle: 'Cart',
  pageType: 'event-cart',
  
  template: templates.cart['cart-page'],
  
  props: {
    eventId: ['number', true, 0],
    summaryPosition: ['string', true, 'static'],
  },
  
  events: {
    // 'click .sorting a': 'sort',
    // 'click .load-more > .label': 'loadMore',
    'click .button.checkout': 'checkout',
    'change .shipping-selection select': 'onShippingChange',
  },
  
  bindings: {
    // 'model.event.name': '[data-hook=event-name]',
    'model.event_name': {
      type: function (el, val) {
        console.log('event name binding', val);
        el.textContent = val;
      },
      hook: 'event-name',
    },
    'model.mtime': {
      type: function () {
        this.checkForEmptiness();
      },
      // type: 'booleanClass',
      // name: 'empty',
    },
    
    'model.subtotal': {
      type: function (el, val) {
        el.textContent = this.model.formatMoney(val);
      },
      selector: '.subtotal-price',
    },
    'model.discount': {
      type: function (el, val) {
        el.textContent = this.model.formatMoney(val);
      },
      selector: '.discount-price',
    },
    'model.shipping_type': {
      type: 'value',
      selector: '.shipping-selection select',
    },
    'model.shipping_total': {
      type: function (el, val) {
        el.textContent = this.model.formatMoney(val);
      },
      selector: '.shipping-price',
    },
    'model.tax_total': {
      type: function (el, val) {
        el.textContent = this.model.formatMoney(val);
      },
      selector: '.tax-price',
    },
    'model.total': {
      type: function (el, val) {
        el.textContent = this.model.formatMoney(val);
      },
      selector: '.total-price',
    },
    
    'summaryPosition': {
      type: function (el, val) {
        this.el.classList.toggle('summary-static', val === 'static');
        this.el.classList.toggle('summary-fixed-top', val === 'top');
        this.el.classList.toggle('summary-fixed-bottom', val === 'bottom');
      },
      // type: 'booleanClass',
      // name: 'fixed-summary',
    },
  },
  
  subviews: assign({}, Page.prototype.subviews, {
    sales: {
      container: '.sales-info',
      waitFor: 'model',
      prepareView: function (el) {
        this.sales = new SalesView({
          el: el,
          parent: this,
          model: this.model.event.sales,
        });
        return this.sales;
      },
    },
  }),
  
  initialize: function (ops) {
    Page.prototype.initialize.apply(this, arguments);
    ops = ops || {};
    
    if (!app.countries) app.countries = new Countries();
    this.eventId = this.model.event.id;
    
    this.checkForEmptiness = debounce(this.checkForEmptiness, 30);
    
    if (!app.state.bootstrapped) {
      // console.log('not bootstrapped');
      this.listenToOnce(app.state, 'change:bootstrapped', function () {
        console.log('bootstrapped now', this.model.event.complete);
        app.state.bootstrapped = true;
        
        if (this.model.event.complete) {
          this.onReady();
        }
      });
    }
    
    if (!this.model.event.complete) {
      // console.log('event not complete');
      this.model.event.fetch();
      this.listenToOnce(this.model.event, 'change:complete', function () {
        console.log('event compelte now', app.state.bootstrapped);
        if (app.state.bootstrapped) {
          this.onReady();
        }
      });
    }
    
    if (app.state.bootstrapped && this.model.event.complete) {
      console.log('bootstrapped & complete already');
      this.onReady();
    }
    
    this.listenTo(app.state, 'resize', this.resize);
    
    // this.triggerReady();
    // this.setTitle('Cart');
    
  },
  
  checkout: function () {
    if (!this.model.valid) {
      alert('Some of the products does not have all the required photos '+
            'selected yet.');
      return;
    }
    app.navigate('/events/'+ this.model.event.id +'/checkout');
  },
  
  checkForEmptiness: function () {
    // this.after(5, function () {
    var photos = this.queryAll('.cart-photo-item.removed');
    var products = this.queryAll('.cart-product.removed');
    this.el.classList.toggle('empty', !photos.length && !products.length && 
                                      this.model.is_empty);
    this.el.classList.toggle('no-photos', 
                             !photos.length && !this.model.photos.length);
    this.el.classList.toggle('no-products', 
                             !products.length && !this.model.products.length);
    // });
  },
  
  onReady: function () {
    this.render();
    this.shippingSelect.innerHTML = templates.shipping['shipping-options']();
    if (!this.model.shipping_type) {
      this.model.shipping_type = app.shipping.at(0).id;
    }
    this.shippingSelect.value = this.model.shipping_type;
    this.model.updateSummary();
    this.triggerReady();
  },
  
  render: function () {
    if (!this.el) Page.prototype.render.apply(this, arguments);
    // if (!this.el) this.renderWithTemplate();
    if (!app.state.bootstrapped || !this.model.event.complete) return;
    
    // console.log('cart render');
    this.renderCollection(this.model.photos, PhotoView, '.cart-photos');
    this.renderCollection(this.model.products, ProductView, '.cart-products');
    
    this.cacheElements({
      leftColEl: '.left-column',
      rightColEl: '.right-column',
      cartContentsEl: '.cart-contents',
      shippingSelect: '.shipping-selection select',
    });
    
    // this.resize();
  },
  
  onScroll: function (top) {
    var leftRect = this.leftColEl.getBoundingClientRect();
    var rightRect = this.rightColEl.getBoundingClientRect();
    if (app.state.height < rightRect.height + 50 || 
        leftRect.height <= rightRect.height) {
      this.summaryPosition = 'static';
      return;
    }
    if (leftRect.top < rightRect.top && rightRect.bottom >= leftRect.bottom &&
        rightRect.top <= 35) {
      this.summaryPosition = 'bottom';
    }
    else if (leftRect.top < 35) {
      this.summaryPosition = 'top';
    }
    else {
      this.summaryPosition = 'static';
    }
  },
  
  onShippingChange: function () {
    this.model.shipping_type = this.shippingSelect.value;
    this.model.updateSummary();
    this.model.save();
  },
  
  resize: function () {
    // var offsetTop = this.query('left-column').offsetTop;
    // console.log(offsetTop);  
  },
  
});



