/*==========================================================================*\
  Cart Page
\*==========================================================================*/
"use strict";

var Page = require('app/base/base-page');
var PhotoView = require('./photo/cart-photo');
var ProductView = require('./product/cart-product');
var SalesView = require('app/sale/sales-info');
var Countries = require('app/util/countries');
var Summary = require('./summary/cart-summary');


var app = require('app');
var assign = require('lodash.assign');
var debounce = require('lodash.debounce');
var templates = require('app/templates');

module.exports = Page.extend({
  viewType: 'cart-page',
  dictionary: 'event', // localization dictionary 
  pageTitle: 'Cart',
  pageType: 'event-cart',
  
  template: templates.cart['cart-page'],
  
  props: {
    eventId: ['number', true, 0],
    summaryPosition: ['string', true, 'static'],
    
    discountCode: 'state',
  },
  
  events: {
    // 'click .sorting a': 'sort',
    // 'click .load-more > .label': 'loadMore',
    'click .button.checkout': 'checkout',
  },
  
  bindings: {
    // 'model.event.name': '[data-hook=event-name]',
    'model.event_name': {
      type: function (el, val) {
        el.textContent = val;
      },
      hook: 'event-name',
    },
    'model.paypmentMethod': {
      type: function (el, val) {
        el.classList.toggle('payment-card-selected', val === 'card');
        el.classList.toggle('payment-paypal-selected', val === 'paypal');
      },
    },
    'model.mtime': {
      type: function () {
        this.checkForEmptiness();
      },
      // type: 'booleanClass',
      // name: 'empty',
    },
    'summaryPosition': {
      type: function (el, val) {
        this.el.classList.toggle('summary-static', val === 'static');
        this.el.classList.toggle('summary-fixed-top', val === 'top');
        this.el.classList.toggle('summary-fixed-bottom', val === 'bottom');
      },
      // type: 'booleanClass',
      // name: 'fixed-summary',
    },
  },
  
  subviews: assign({}, Page.prototype.subviews, {
    sales: {
      container: '.sales-info',
      waitFor: 'model',
      prepareView: function (el) {
        this.sales = new SalesView({
          el: el,
          parent: this,
          model: this.model.event.sales,
        });
        return this.sales;
      },
    },
    // summary: {
    //   container: '.right-column',
    //   waitFor: 'model.mtime',
    //   prepareView: function (el) {
    //     return this.summary = new Summary({
    //       el: el,
    //       parent: this,
    //       model: this.model,
    //     });
    //   },
    // },
  }),
  
  initialize: function (ops) {
    Page.prototype.initialize.apply(this, arguments);
    ops = ops || {};
    
    if (!app.countries) app.countries = new Countries();
    this.eventId = this.model.event.id;
    
    this.checkForEmptiness = debounce(this.checkForEmptiness, 30);
    
    if (!app.state.bootstrapped) {
      // console.log('not bootstrapped');
      this.listenToOnce(app.state, 'change:bootstrapped', function () {
        app.state.bootstrapped = true;
        
        if (this.model.event.complete) {
          this.onReady();
        }
      });
    }
    
    if (!this.model.event.complete) {
      // console.log('event not complete');
      this.model.event.fetch();
      this.listenToOnce(this.model.event, 'change:complete', function () {
        if (app.state.bootstrapped) {
          this.onReady();
        }
      });
    }
    
    if (app.state.bootstrapped && this.model.event.complete) {
      this.onReady();
    }
    
    this.listenTo(app.state, 'resize', this.resize);
    
    // this.triggerReady();
    // this.setTitle('Cart');
    
  },
  
  checkout: function () {
    var error = this.validate();
    if (error) {
      this.alert(error.message, {width: 500});
      return;
    }
    app.navigate('/events/'+ this.model.event.id +'/checkout');
  },
  
  checkForEmptiness: function () {
    // this.after(5, function () {
    var photos = this.queryAll('.cart-photo-item.removed');
    var products = this.queryAll('.cart-product.removed');
    this.el.classList.toggle('empty', !photos.length && !products.length && 
                                      this.model.is_empty);
    this.el.classList.toggle('no-photos', 
                             !photos.length && !this.model.photos.length);
    this.el.classList.toggle('no-products', 
                             !products.length && !this.model.products.length);
    // });
  },
  
  onReady: function () {
    this.render();
    this.model.updateSummary();
    this.triggerReady();
  },
  
  render: function () {
    if (!this.el) Page.prototype.render.apply(this, arguments);
    // if (!this.el) this.renderWithTemplate();
    if (!app.state.bootstrapped || !this.model.event.complete) return;
    
    // console.log('cart render');
    this.renderCollection(this.model.photos, PhotoView, '.cart-photos');
    this.renderCollection(this.model.products, ProductView, '.cart-products');
    
    this.cacheElements({
      leftColEl: '.left-column',
      rightColEl: '.right-column',
      cartContentsEl: '.cart-contents',
    });
    
    this.summary = new Summary({
      parent: this,
      model: this.model,
    });
    this.renderSubview(this.summary, this.rightColEl);
    
    // this.resize();
  },
  
  onScroll: function (top) {
    var leftRect = this.leftColEl.getBoundingClientRect();
    var rightRect = this.rightColEl.getBoundingClientRect();
    if (app.state.height < rightRect.height + 50 || 
        leftRect.height <= rightRect.height) {
      this.summaryPosition = 'static';
      return;
    }
    if (leftRect.top < rightRect.top && rightRect.bottom >= leftRect.bottom &&
        rightRect.top <= 35) {
      this.summaryPosition = 'bottom';
    }
    else if (leftRect.top < 35) {
      this.summaryPosition = 'top';
    }
    else {
      this.summaryPosition = 'static';
    }
  },
  
  resize: function () {
    // var offsetTop = this.query('left-column').offsetTop;
    // console.log(offsetTop);  
  },
  
  validate: function () {
    var i, product, size;
    
    var minTotal = this.model.event.min_purchase;
    if (this.model.digitalOnly && app.config.ignore_min_on_digital_orders) {
      minTotal = 0;
    }

    if (minTotal && this.model.total+this.model.discount_code_discount < minTotal) {
      return {
        type: 'total too small',
        message: this.lz(
            'Please add additional items to your cart in order to reach the minimum order requirement: %s',
            this.model.formatMoney(minTotal)
        )
      };
    }
    
    
    for (i = 0; i < this.model.products.length; i++) {
      product = this.model.products.at(i);
      for (var size_id in product.spotsLeft) {
        if (product.spotsLeft[size_id] > 0) {
          return {
            type: 'product incomplete',
            message: this.lz(
                'Product <b>%s</b> is not fulfilled with photos yet.<br><br>'+
                'Press <span class="add-to-cart">Add to Cart</span> '+
                'on photos to add them to products.', product.name),
          };
        }
        if (product.spotsLeft[size_id] < 0) {
          size = app.sizes.get(size_id);
          return {
            type: 'product overfilled',
            message: this.lz(
                'Product <b>%s</b> has too many <b>%s</b> photos added to it.'+
                ' Please remove excess photos before checking out.',
                product.name, size.display_name.replace(/ /g, '&nbsp;')),
          };
        }
      }
    }
    
    return false;
  },
  
});



