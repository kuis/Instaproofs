"use strict";

var Page = require('app/base/base-page');
var CartPage = require('app/cart/cart-page');
var Countries = require('app/util/countries');
var OrderModel = require('./order-model');
var States = require('app/util/states');
var Summary = require('../summary/cart-summary');
var PaypalMixin = require('./paypal-mixin');

var app = require('app');
var assign = require('lodash.assign');
var templates = require('app/templates');
var xhr = require('xhr');

module.exports = CartPage.extend(PaypalMixin, {
  viewType: 'checkout-page',
  dictionary: 'event', // localization dictionary 
  pageTitle: 'Checkout',
  pageType: 'event-checkout',
  
  template: templates.cart.checkout['checkout-page'],
  
  props: {
    eventId: ['number', true, 0],
    summaryPosition: ['string', true, 'static'],
    separateBilling: ['boolean', true, false],
    
    shippingCountrySelected: ['boolean', true, false],
    billingCountrySelected: ['boolean', true, false],
    requiresDisplayed: ['boolean', true, false],
    
    cachedShipping: ['object', true],
    cachedBilling: ['object', true],
  },
  
  events: {
    'click .billing-as-shipping': 'toggleBilling',
    'click .button.submit': 'submit',
    'click .button.paypal': 'checkoutPaypal',
    'change .shipping-selection select': 'onShippingChange',
    
    'change select.country': 'onCountryChange',
    
    'change form.shipping-address input': 'storeShipping',
    'change form.shipping-address select': 'storeShipping',
    'change form.billing-address input': 'storeBilling',
    'change form.billing-address select': 'storeBilling',
  },
  
  bindings: {
    'model.event_name': '[data-hook=event-name]',
    'model.is_empty': {
      type: 'booleanClass',
      name: 'empty',
    },
    
    'model.mtime': {
      type: function () {
        this.checkForEmptiness();
      },
    },
    'model.subtotal': {
      type: function (el, val) {
        el.textContent = this.model.formatMoney(val);
      },
      selector: '.subtotal-price',
    },
    'model.discount': {
      type: function (el, val) {
        el.textContent = this.model.formatMoney(val);
      },
      selector: '.discount-price',
    },
    'model.shipping_type': {
      type: 'value',
      selector: '.shipping-selection select',
    },
    'model.shipping_total': {
      type: function (el, val) {
        el.textContent = this.model.formatMoney(val);
      },
      selector: '.shipping-price',
    },
    'model.tax_total': {
      type: function (el, val) {
        el.textContent = this.model.formatMoney(val);
      },
      selector: '.tax-price',
    },
    'model.total': {
      type: function (el, val) {
        el.textContent = this.model.formatMoney(val);
      },
      selector: '.total-price',
    },
    
    separateBilling: {
      type: 'booleanClass',
      name: 'separate-billing',
    },
    shippingCountrySelected: {
      type: 'booleanClass',
      name: 'shipping-country-selected',
    },
    billingCountrySelected: {
      type: 'booleanClass',
      name: 'billing-country-selected',
    },
    requiresDisplayed: {
      type: 'booleanClass',
      name: 'requires-displayed',
    },
    summaryPosition: {
      type: function (el, val) {
        this.el.classList.toggle('summary-static', val === 'static');
        this.el.classList.toggle('summary-fixed-top', val === 'top');
        this.el.classList.toggle('summary-fixed-bottom', val === 'bottom');
      },
    },
  },
  
  subviews: assign({}, Page.prototype.subviews),
  
  initialize: function (ops) {
    Page.prototype.initialize.apply(this, arguments);
    ops = ops || {};
    
    this.eventId = this.model.event.id;
    
    if (!app.countries) app.countries = new Countries();
    if (!app.states) app.states = new States();
    
    if (!app.state.bootstrapped) {
      this.listenTo(app.state, 'change:bootstrapped', function () {
        app.state.bootstrapped = true;
        
        if (this.model.event.complete) {
          this.onReady();
        }
      });
    }
    if (!this.model.event.complete) {
      this.model.event.fetch();
      this.listenTo(this.model.event, 'change:complete', function () {
        if (app.state.bootstrapped) {
          this.onReady();
        }
      });
    }
    if (app.state.bootstrapped && this.model.event.complete) {
      this.onReady();
    }
    
    this.listenTo(app.state, 'resize', this.resize);
    
    var cachedShipping = app.storage.shippingAddress;
    if (cachedShipping) {
      this.cachedShipping = JSON.parse(cachedShipping);
    }
    
    var cachedBilling = app.storage.billing_address;
    if (cachedBilling) {
      this.cachedBilling = JSON.parse(cachedBilling);
    }
    
  },
  
  render: function () {
    Page.prototype.render.apply(this, arguments);
    
    if (!this.el) this.renderWithTemplate();
    if (!app.state.bootstrapped) return;
    
    this.cacheElements({
      leftColEl: '.left-column',
      rightColEl: '.right-column',
      contentsEl: '.checkout-contents',
    });
    
    if (app.countries.length) {
      this.updateCountries();
    }
    else {
      this.listenTo(app.countries, 'sync', this.updateCountries);
    }
    
    this.fillAddress('shipping');
    this.fillAddress('billing');
    
    this.summary = new Summary({
      parent: this,
      model: this.model,
    });
    this.renderSubview(this.summary, this.rightColEl);
    
    // this.resize();
  },
  
  getFormData: function (form) {
    var i, len;
    var elements = form.elements;
    var name;
    var data = {};
    for (i = 0, len = elements.length; i < len; i++) {
      name = elements[i].name;
      data[elements[i].name] = elements[i].value;
    }
    return data;
  },
  
  storeShipping: function (e) {
    if (e && e.target && e.target.name === 'email') {
      this.model.discountCode.setEmail(e.target.value);
    }
    this.model.shippingAddress.set(this.getFormData(
        this.query('form.shipping-address')));
  },
  storeBilling: function () {
    this.model.billingAddress.set(this.getFormData(
        this.query('form.billing-address')));
  },
  
  fillAddress: function (type) {
    var form = this.query('form.'+ type +'-address');
    var model = this.model[type +'Address']; 
    if (!model) return;
    var data = model.toJSON();
    for (var i in data) {
      if (data[i] && i !== 'country_id' && i !== 'state_id') {
        form.elements[i].value = data[i];
      }
    }
    if (data.country_id && app.countries.length) {
      form.elements.country_id.value = data.country_id;
      this.onCountryChange({ target: form.elements.country_id });
    }
  },

  
  toggleBilling: function () {
    this.separateBilling = !this.separateBilling;
  },
  
  onCountryChange: function (e) {
    var select = e.target;
    var type = select.classList.contains('shipping') ? 'shipping' : 'billing';
    this[type +'CountrySelected'] = !!select.value;
    var id = +select.value;
    if (!id) return;
    var country = app.countries.get(id);
    var statesSelect = this.query('select.state.'+ type);
    statesSelect.parentNode.classList.add('loading');
    app.states.getStates(country.code, function (states) {
      if (+select.value === id) this.updateStates(statesSelect, states, type);
    }, this);
  },
  
  updateCountries: function () {
    var selects = [this.query('select.country.shipping'),
                   this.query('select.country.billing')];
    var select;
    var i, n;
    var country;
    for (i = 0; i < selects.length; i++) {
      select = selects[i];
      select.options.length = 0; // clear out existing items
      select.options.add(new Option('', ''));
      for (n = 0; n < app.countries.length; n++) {
        country = app.countries.models[n];
        select.options.add(new Option(country.name, country.id));
      }
      
      if (i === 0 && this.cachedShipping.country_id) {
        selects[0].value = this.cachedShipping.country_id;
      }
      else if (i === 1 && this.cachedBilling.country_id) {
        selects[1].value = this.cachedBilling.country_id;
      }
      this.onCountryChange({ target: select });
    }
  },
  updateStates: function (select, states, type) {
    var state;
    var cache = type === 'shipping' ? this.cachedShipping : this.cachedBilling;
    
    select.options.length = 0; // clear out existing items
    select.options.add(new Option('', ''));
    for (var n = 0; n < states.length; n++) {
      state = states.models[n];
      if (+cache.state_id === +state.id) {
        select.options.add(new Option(state.name, state.id, true, true));
      }
      else {
        select.options.add(new Option(state.name, state.id));
      }
    }
    if (states.length === 1) {
      select.value = states.models[0].id;
    }
    
    // select.value = "47";
    select.parentNode.classList.remove('loading');
  },
  
  // onShow: function () {
  //   var autofocus = this.query('.autofocus');
  //   if (autofocus) this.after(200, function () {
  //     autofocus.focus();
  //   });
  // },
  
  readFormData: function (formType) {
    var data = {};
    var el;
    var elements = this.queryAll('form.'+ formType +'-address input, '+
                                 'form.'+ formType +'-address select');
    for (var i = 0; i < elements.length; i++) {
      el = elements[i];
      if (!el.value && el.name !== 'address2') {
        return this.failValidation(el);
      }
      
      switch (el.name) {
        case 'email': case 'phone': data[el.name] = el.value; break;
        case 'address1': data[formType +'_address'] = el.value; break;
        case 'address2': 
          data[formType +'_address'] += (el.value ? '\n'+ el.value : '');
          break;
        case 'state_id': case 'country_id': 
          data[formType +'_'+ el.name] = el.value && +el.value;
          break;
        default: data[formType +'_'+el.name] =el.value;
      }
    }
    
    return data;
  },
  copyBillingData: function (shipping) {
    var data = {};
    data.billing_first_name = shipping.shipping_first_name;
    data.billing_last_name = shipping.shipping_last_name;
    data.billing_address = shipping.shipping_address;
    data.billing_city = shipping.shipping_city;
    data.billing_country_id = shipping.shipping_country_id;
    data.billing_state_id = shipping.shipping_state_id;
    data.billing_zip = shipping.shipping_zip;
    return data;
  },
  
  submit: function () {
    if (this.model.discountCode.loading) return;
    var self = this;
    var shipping = this.readFormData('shipping');
    var billing = this.separateBilling ? this.readFormData('billing') 
                                       : this.copyBillingData(shipping);
                                       
    if (!shipping || !billing) {
      return;
    }
    
    var expMonthEl = this.query('[name="exp_m"]');
    var expYearEl = this.query('[name="exp_y"]');
    
    var payment = {
      card_num: this.query('input[name="card_num"]').value
                .replace(/[^\d]/g, ''),
      card_code: this.query('input[name="card_code"]').value
                 .replace(/[^\d]/g, ''),
      exp_date: expMonthEl.value + expYearEl.value,
    };
    if (!payment.card_num) {
      return this.failValidation(this.query('input[name="card_num"]'));
    }
    if (!payment.card_code) {
      return this.failValidation(this.query('input[name="card_code"]'));
    }
    if (!expMonthEl.value) return this.failValidation(expMonthEl);
    if (!expYearEl.value) return this.failValidation(expYearEl);
  
    var data = assign({}, shipping, billing, payment);
    
    data.event_id = this.model.event.id;
    data.shipping_type = this.model.shipping_type;
    data.amount = this.model.total;
    // data.amount = 39539;
    
    data.discount_code = this.model.discountCode.discount_code;
    data.order_note = '';
    
    console.log('checkout xhr', data);
    
    // this.xhr = xhr({
    //   uri: app.apiUrl +'cart/totals/'+ this.model.id +'?url='+ app.url+
    //       '&event_id='+ this.model.event.id +
    //       '&shipping_state_id='+ 
    //       encodeURIComponent(this.model.shippingAddress.state_id)+
    //       '&shipping_city='+ 
    //       encodeURIComponent(this.model.shippingAddress.city)+
    //       '&shipping_zipcode='+ 
    //       encodeURIComponent(this.model.shippingAddress.zip)+
    //       '&shipping_type='+ encodeURIComponent(data.shipping_type),
    // }, function (err, resp, body) {
    //   body = JSON.parse(body);
    //   if (body.status === 200) {
    //     self.sent = true;
    //   }
    //   else {
    //     var error = (body.error && body.error.message) || body.message;
    //     alert('Totals verification failed'+
    //           (error ? '\n\nError Message: '+ error : ''));
    //   }
    //   self.xhr = null;
    // });
    // return;
    
    this.query('.button.submit').classList.add('loading');
    
    this.xhr = xhr({
      uri: app.apiUrl +'checkout/'+ this.model.id +
                       '?url=http://demo.instaproofs.com',
      // uri: app.apiUrl +'checkout/'+ this.model.id +'?url='+ app.url,
      method: 'POST',
      // headers: { "Content-Type": "application/json" },
      body: JSON.stringify(data),
    }, function (err, resp, body) {
      self.query('.button.submit').classList.remove('loading');
      body = JSON.parse(body);
      if (body.status === 200) {
        self.sent = true;
        
        body.data.order_id = body.data.order_details.order_id;
        body.data.event_id = self.model.event.id;
        var order = new OrderModel(body.data);
        order.store();
        
        
        self.model.clear();
        console.log('cart model', self.model.toJSON());
        
        app.navigate('events/'+ self.model.event.id +
                     '/confirmation/'+ order.order_id);
      }
      else {
        var error = (body.error && body.error.message) || body.message;
        alert('Failed to place the order.'+
              (error ? '\n\nError Message: '+ error : ''));
      }
      self.xhr = null;
    });
    
    
  },

  /**
   * Checkout with paypal
   */
  checkoutPaypal: function () {
    var self = this;
    var cid = this.model.id; // Cart ID
    var shipping = this.readFormData('shipping');

    if (!shipping) {
      this.alert('Shipping information is missing');
      return;
    }

    // Start transaction
    self.startTransaction(cid, {
      event_id: self.model.event.id,
      amount: self.model.total,
      discount_code: self.model.discountCode.discount_code,
      shipping_type: self.model.shipping_type,
      shipping_city: shipping.shipping_city,
      shipping_state_id: shipping.shipping_state_id,
      shipping_zip: shipping.shipping_zip,
      email: shipping.email
    }).then(function (response) {

      if (response.data.status !== 200) {
        self.alert(response.data.data.error.join('<br>'), {
          width: 500
        });
        return;
      }

      app.storage['transaction'] = JSON.stringify({
        token: response.data.data.token,
        eid: self.model.event.id,
        cid: cid
      });

      // Redirect to paypal
      window.location = response.data.data.redirect_url;
    });


  },

  failValidation: function (el) {
    console.log('validation error', el);
    el.focus();
    this.requiresDisplayed = true;
    return false;
  },
  
});



