"use strict";

var BasePage = require('app/base/base-page');

var app = require('app');
var assign = require('lodash.assign');
var templates = require('app/templates');
var PaypalMixin = require('./paypal-mixin');
var OrderModel = require('./order-model');

module.exports = BasePage.extend(PaypalMixin, {
  viewType: 'paypal-confirmation-page',
  dictionary: 'cart',
  pageTitle: 'Checkout',
  pageType: 'paypal-confirmation',
  
  template: templates.cart.checkout['paypal-confirmation-page'],
  
  props: {
    eventId: ['number', true, 0],
    paypalToken: ['string', true, ''],
    payerID: ['string', true, ''],
    cachedShipping: ['object', true],
    paypalInvalid: ['boolean', true, false],
    errorMessage: ['string', true, '']
  },
  
  events: {
    'click .button.confirm:not(.loading)': 'confirm',
  },
  
  bindings: {
    'model.event.name': '[data-hook=event-name]',
    'model.total': {
      type: function (el, val) {
        el.textContent = '$' + (val / 100).toFixed(2);
      },
      selector: '.total-amount'
    },
    'paypalInvalid': {
      type: 'booleanClass',
      name: 'paypal-invalid',
    }
  },
  
  subviews: assign({}, BasePage.prototype.subviews),
  
  initialize: function (ops) {
    BasePage.prototype.initialize.apply(this, arguments);
    ops = ops || {};
    var event = this.model.event;
    this.eventId = event.id;

    this.paypalToken = ops.token;
    this.payerID = ops.payerID;

    if (!this.paypalToken) {
      this.paypalInvalid = true;
      this.errorMessage = 'Paypal token is missing!';
    }

    if (!app.state.bootstrapped) {
      // console.log('not bootstrapped');
      this.listenToOnce(app.state, 'change:bootstrapped', function () {
        app.state.bootstrapped = true;
        
        if (this.model.event.complete) {
          this.onReady();
        }
      });
    }
    
    if (!this.model.event.complete) {
      // console.log('event not complete');
      this.model.event.fetch();
      this.listenToOnce(this.model.event, 'change:complete', function () {
        if (app.state.bootstrapped) {
          this.onReady();
        }
      });
    }
    
    if (app.state.bootstrapped && this.model.event.complete) {
      this.onReady();
    }

    var cachedShipping = app.storage.shippingAddress;
    if (cachedShipping) {
      this.cachedShipping = JSON.parse(cachedShipping);
    }

  },
  
  onReady: function () {
    this.render();
    if (!this.paypalToken) {
      app.navigate('events/'+ this.model.event.id +'/checkout');
      return;
    }
    
    this.confirm();
  },
  
  confirm: function () {
    if (!this.paypalToken) {
      return;
    }

    var self = this;
    var cid = this.model.id;
    
    console.log('PP confirm', this.model.toJSON());
    var shipping = this.cachedShipping;
    var orderNote = app.storage['orderNote'+ cid] || '';
    var orderTotal = +app.storage['orderTotal'+ cid];
    
    this.model.fetchSummary();

    // Show loading sign
    // this.query('.button.confirm').classList.add('loading');

    this.finalizeTransaction(cid, {
      event_id: self.model.event.id,
      token: this.paypalToken,
      amount: orderTotal,
      order_note: orderNote,
      discount_code: self.model.discountCode.discount_code,
      shipping_type: self.model.shipping_type,
      shipping_first_name: shipping.first_name,
      shipping_last_name: shipping.last_name,
      shipping_address1: shipping.address1,
      shipping_address2: shipping.address2,
      shipping_city: shipping.city,
      shipping_state_id: shipping.state_id,
      shipping_zip: shipping.zip,
      email: shipping.email,
      phone: shipping.phone
    }).then(function (response) {
      var body = response.data;
      
      // Hide loading sign
      // self.query('.button.confirm').classList.remove('loading');

      if (response.data.status !== 200) {
        var error = (body.data && (body.data.error || body.data.description)) ||
                    (body.error && body.error.message) || body.message;
        if (Array.isArray(error)) error = error.join('<br><br>');
        self.triggerReady();
        self.alert(error, { width: 500 });
        app.navigate('events/'+ self.model.event.id +'/checkout');

        return;
      }

      var order = new OrderModel({
        event_id: self.model.event.id,
        order_id: response.data.data.order_details.order_id,
        transaction_id: response.data.data.authorization_code,
        confirmation_num: response.data.data.confirmation_num
      });
      order.store();

      self.model.clear();
      self.model.unset('id');

      app.navigate('events/' + self.model.event.id +
                   '/confirmation/' + order.order_id);
    }, function (response) {
      var body = response.data;

      // self.query('.button.confirm').classList.remove('loading');
      
      var error = (body.data && (body.data.error || body.data.description)) ||
                    (body.error && body.error.message) || body.message;
      if (Array.isArray(error)) error = error.join('<br><br>');

      self.alert('Failed to finalize the paypal transaction.<br><br>' + error);

    });
  }
  
});
