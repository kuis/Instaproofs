"use strict";

var BasePage = require('app/base/base-page');

var app = require('app');
var assign = require('lodash.assign');
var templates = require('app/templates');
var PaypalMixin = require('./paypal-mixin');
var OrderModel = require('./order-model');

module.exports = BasePage.extend(PaypalMixin, {
  dictionary: 'event', // localization dictionary 
  pageTitle: 'Checkout',
  pageType: 'event-confirmation',
  
  template: templates.cart.checkout['paypal-confirmation-page'],
  
  props: {
    eventId: ['number', true, 0],
    paypalToken: ['string', true, ''],
    payerID: ['string', true, ''],
    cachedShipping: ['object', true]
  },

  derived: {
    paypalInvalid: {
      deps: ['paypalToken'],
      fn: function () {
        return this.paypalToken === '';
      }
    }
  },
  
  events: {
    'click .button.confirm': 'confirm',
  },
  
  bindings: {
    'model.event.name': '[data-hook=event-name]',
    'paypalInvalid': {
      type: 'booleanClass',
      name: 'paypal-invalid',
    }
  },
  
  subviews: assign({}, BasePage.prototype.subviews),
  
  initialize: function (ops) {
    BasePage.prototype.initialize.apply(this, arguments);
    ops = ops || {};
    var event = this.model.event;
    this.eventId = event.id;
    this.paypalToken = ops.token;
    this.payerID = ops.payerID;

    if (!app.state.bootstrapped) {
      this.listenTo(app.state, 'change:bootstrapped', function () {
        app.state.bootstrapped = true;

        if (this.model.event.complete) {
          this.onReady();
        }
      });
    }

    if (event.complete) {
      console.log('ready');
      this.triggerReady();
    }
    else {
      this.listenToOnce(event, 'change:complete', function () {
        console.log('delayed ready');
        this.triggerReady();
      });
    }

    var cachedShipping = app.storage.shippingAddress;
    if (cachedShipping) {
      this.cachedShipping = JSON.parse(cachedShipping);
    }

  },
  
  confirm: function () {
    if (!this.paypalToken) {
      return;
    }

    var self = this;
    var cid = this.model.id;
    var shipping = this.cachedShipping;
    var orderNote = this.query('input[name="order_note"]').value;

    this.finalizeTransaction(cid, {
      event_id: self.model.event.id,
      token: this.paypalToken,
      amount: self.model.total,
      order_note: orderNote,
      discount_code: self.model.discountCode.discount_code,
      shipping_type: self.model.shipping_type,
      shipping_first_name: shipping.first_name,
      shipping_last_name: shipping.last_name,
      shipping_address: (shipping.address1 + ' ' + shipping.address2).trim(),
      shipping_city: shipping.city,
      shipping_state_id: shipping.state_id,
      shipping_zip: shipping.zip,
      email: shipping.email,
      phone: shipping.phone
    }).then(function (response) {

      response.data.data.event_id = self.model.event.id;

      var order = new OrderModel(response.data.data);
      order.store();

      self.model.clear();
      console.log('cart model', self.model.toJSON());

      // Remove paypal token from storage
      app.storage.removeItem('transaction' + self.payaplToken);

      app.navigate('events/' + self.model.event.id +
                   '/confirmation/' + order.order_id);
    }, function (response) {

      app.storage.removeItem('transaction' + self.payaplToken);

      alert('Failed to finalize the paypal transaction. ' + response.data.error.message);

    });
  }
  
});
