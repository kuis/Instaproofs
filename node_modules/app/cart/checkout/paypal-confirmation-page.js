"use strict";

var BasePage = require('app/base/base-page');

var app = require('app');
var assign = require('lodash.assign');
var templates = require('app/templates');
var PaypalMixin = require('./paypal-mixin');

module.exports = BasePage.extend(PaypalMixin, {
  dictionary: 'event', // localization dictionary 
  pageTitle: 'Checkout',
  pageType: 'event-confirmation',
  
  template: templates.cart.checkout['paypal-confirmation-page'],
  
  props: {
    eventId: ['number', true, 0],
    paypalToken: ['string', true, '']
  },

  derived: {
    paypalInvalid: {
      deps: ['paypalToken'],
      fn: function () {
        return this.paypalToken === '';
      }
    }
  },
  
  events: {
    'click .button.confirm': 'confirm',
  },
  
  bindings: {
    'model.event.name': '[data-hook=event-name]',
    'paypalInvalid': {
      type: 'booleanClass',
      name: 'paypal-invalid',
    }
  },
  
  subviews: assign({}, BasePage.prototype.subviews),
  
  initialize: function (ops) {
    BasePage.prototype.initialize.apply(this, arguments);
    ops = ops || {};
    var event = this.model.event;
    this.eventId = event.id;
    this.paypalToken = app.storage['paypal_token' + this.eventId]
                      ? app.storage['paypal_token' + this.eventId]
                      : '';

    if (event.complete) {
      console.log('ready');
      this.triggerReady();
    }
    else {
      this.listenToOnce(event, 'change:complete', function () {
        console.log('delayed ready');
        this.triggerReady();
      });
    }
  },
  
  confirm: function () {
    if (!paypalToken) {
      return;
    }

    var cid = this.model.id;

  }
  
});



