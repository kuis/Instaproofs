"use strict";

var BaseModel = require('app/base/base-model');
var BaseCollection = require('app/base/base-collection');

var app = require('app');
var tierId = 1;

var Tier = BaseModel.extend({
  props: {
    id: 'number',
    min: ['number', true, 0],
    value: ['number', true, 0],
  },
  
  derived: {
    code: {
      fn: function () {
        return this.collection.parent;
      },
    },
    remaining: {
      cache: false,
      fn: function () {
        return this.code.type === 'sDollar' ? this.code.remaining : this.value;
      },
    },
  },
  
  session: {
    active: ['boolean', true, false],
  },
});
var Tiers = BaseCollection.extend({
  model: Tier,
});

module.exports = BaseModel.extend({
  extraProperties: 'ignore',
  props: {
    discount_code: ['string', true, ''],
    email: ['string', true, ''],
    valid: ['boolean', true, false],
    message: 'any',
    type: 'any',
    remaining: ['number', true, ''],
    // tiers: ['array', true],
    include_products: ['boolean', true, false],
    pay_for_tax: ['boolean', true, false],
    apply_pre_tax_calc: ['boolean', true, false],
  },
  
  collections: {
    tiers: Tiers,
  },
  
  session: {
    amount: ['number', true, 0],
    loading: ['boolean', true, false],
  },
  
  derived: {
    event: {
      fn: function () {
        return this.parent.event;
      },
    },
    include_tax: {
      deps: ['pay_for_tax', 'apply_pre_tax_calc'],
      fn: function () {
        return !this.apply_pre_tax_calc && this.pay_for_tax;
      },
    },
  },
  
  url: function () {
    return app.apiUrl +'cart/code/'+ this.event.id +'/'+ 
        encodeURIComponent(this.discount_code)+
        (this.email ? '/'+ encodeURIComponent(this.email) : '')+
        '?url='+ app.url;
  },
  
  initialize: function () {
    BaseModel.prototype.initialize.apply(this, arguments);
    var eid = this.event.id;
    
    this.listenTo(this, 'request', function () {
      this.loading = true;
    });
    this.listenTo(this, 'sync', function () {
      this.loading = false;
      this.store();
      console.log('promo sync', this.toJSON());
      this.parent.updateSummary();
    });
    
    this.listenTo(this, 'error', function () {
      this.loading = false;
    });
    
    this.listenTo(app, 'storage:discountCode'+ eid, this.storageCallback);
    
    var storedData = app.storage['discountCode' +eid];
    if (storedData) this.storageCallback(storedData);
    
    if (this.parent.shippingAddress.email) {
      this.setEmail(this.parent.shippingAddress.email);
    }
    else {
      this.setEmail();
    }
  },
  
  setEmail: function (email) {
    var keychain = app.keychain.events.get(this.eid);
    if (keychain && keychain.email) email = keychain.email;
    
    console.log('set discount email', email);
    var oldEmail = this.email;
    this.email = email;
    if (oldEmail !== email && this.discount_code) {
      this.store();
      this.fetch();
    }
  },
  
  calculateDiscount: function (totals) {
    if (!this.valid) { this.amount = 0; this.trigger('calc'); return 0; }
    var i, tier;
    
    // if (this.type === 'shipping') {
    //   tier = this.tiers.at(0);
    //   if (this.parent.shipping.isStandard) {
    //     this.amount = totals.shipping;
    //     if (tier) tier.active = true;
    //   }
    //   else {
    //     this.amount = 0;
    //     if (tier) tier.active = false;
    //   }
    //   console.log('amount', this.amount);
    //   this.trigger('calc');
    //   return 0;
    //   // return this.amount;
    // }
    
    var coveredTotal = totals.photos; // total to discount 
    
    // order total, to decide whether discount should apply 
    var orderTotal = totals.photos + totals.addons + totals.products +
        totals.shipping;
    
    if (this.include_products) coveredTotal += totals.addons + totals.products;
    if (!this.apply_pre_tax_calc) {
      orderTotal += totals.tax;
      if (this.pay_for_tax) coveredTotal += totals.tax;
    }
    
    for (i = 0; i < this.tiers.length; i++) {
      if (orderTotal >= this.tiers.at(i).min) tier = this.tiers.at(i);
    }
    for (i = 0; i < this.tiers.length; i++) {
      this.tiers.at(i).active = this.tiers.at(i) === tier;
    }
    
    if (!tier) { this.amount = 0; this.trigger('calc'); return 0; }
    
    var value = this.type === 'sDollar' ? this.remaining : tier.value;
    
    switch (this.type) {
      case 'sDollar': case 'mDollar':
        this.amount = value > coveredTotal ? coveredTotal : value;
        break;
      case 'sPercent': case 'mPercent': 
        this.amount = Math.round(coveredTotal * value / 10000);
        break;
      case 'shipping':
        this.amount = this.parent.shipping.isStandard ? totals.shipping : 0;
        this.trigger('calc');
        return 0;
    }
    
    this.trigger('calc');
    return this.amount;
  },
  
  storageCallback: function (newData) {
    newData = JSON.parse(newData);
    if (newData && newData.type) {
      this.set(newData);
    }
    else {
      this.clear();
    }
    this.parent.updateSummary();
  },
  
  store: function () {
    console.log('store code', this.tiers.toJSON());
    app.storage['discountCode'+this.event.id] = JSON.stringify(this.toJSON());
  },
  
  clear: function () {
    this.tiers.reset();
    BaseModel.prototype.clear.apply(this, arguments);
  },
  
  parse: function (data) {
    // data = {
    //   "status": 200,
    //   "data": {
    //     "discount_code": "d4e2e4a423",
    //     "valid": true,
    //     "message": null,
    //     "type": "mPercent",
    //     "remaining": 0,
    //     "tiers": [
    //       { "min": 10000, "value": 1000 },
    //       { "min": 50000, "value": 2000 },
    //     ],
    //     "include_products": true,
    //     "pay_for_tax": false,
    //     "apply_pre_tax_calc": false,
    //   },
    //   "timestamp": 1431543048
    // };
    
    if (!data.data.tiers) data.data.tiers = [];
    if (!data.data.tiers.length) {
      data.data.tiers.push({
        min: 0,
        value: data.data.remaining || 0,
      });
    }
    
    for (var i = 0; i < data.data.tiers.length; i++) {
      data.data.tiers[i].id = tierId++;
    }
    console.log('parse', data);
    return data.data;
  },
});
