"use strict";

var BaseView = require('app/base/base-view');
var DiscountCode = require('./code/discount-code');

var app = require('app');
var templates = require('app/templates');

module.exports = BaseView.extend({
  viewType: 'cart-summary',
  template: templates.cart.summary['cart-summary'],
  
  config: app.config,

  props: {
  },
  
  bindings: {
    'model.freeShipping': {
      type: 'booleanClass',
      name: 'free-shipping',
    },
    'model.subtotal': {
      type: function (el, val) {
        el.textContent = this.model.formatMoney(val);
      },
      selector: '.subtotal-price',
    },
    'model.discount': {
      type: function (el, val) {
        el.textContent = '-'+ this.model.formatMoney(val);
        this.el.classList.toggle('discount-positive', !!val);
      },
      selector: '.discount-price',
    },
    'model.shipping_type': {
      type: 'value',
      selector: '.shipping-selection select',
    },
    'model.shipping_total': {
      type: function (el, val) {
        el.textContent = this.model.formatMoney(val);
      },
      selector: '.shipping-price',
    },
    'model.tax_total': {
      type: function (el, val) {
        el.textContent = this.model.formatMoney(val);
        this.el.classList.toggle('tax-positive', !!val);
      },
      selector: '.tax-price',
    },
    'model.total': {
      type: function (el, val) {
        el.textContent = this.model.formatMoney(val);
      },
      selector: '.total-price',
    },
  },
  
  events: {
    'change .shipping-selection select': 'onShippingChange',
  },
  
  initialize: function () {
    BaseView.prototype.initialize.apply(this, arguments);
  },
  
  render: function () {
    BaseView.prototype.render.apply(this, arguments);
    // this.renderWithTemplate(this.template);
    
    this.cacheElements({
      inputEl: 'input',
      shippingSelect: '.shipping-selection select',
    });
    
    this.discountCode = new DiscountCode({ 
      parent: this,
      model: this.model.discountCode,
      // el: this.query('.summary-options .discount'),
    });
    this.renderSubview(this.discountCode, '.discount-container');
    
    this.shippingSelect.innerHTML = 
        templates.shipping['shipping-options'](this);
    if (!this.model.shipping_type && !this.model.event.allow_pickup) {
      this.model.shipping_type = app.shipping.at(0).id;
    }
    this.shippingSelect.value = this.model.shipping_type;
  },
  
  onShippingChange: function () {
    this.model.shipping_type = +this.shippingSelect.value;
    this.model.updateSummary();
    this.model.save();
  },
});
