/*==========================================================================*\
  Shopping Cart
\*==========================================================================*/
"use strict";

var BaseModel = require('app/base/base-model');
var BaseCollection = require('app/base/base-collection');
var PhotosCollection = require('./photo/cart-photos-collection');
var ProductsCollection = require('app/base/base-collection').extend({
  mainIndex: 'cart_item_id',
  indexes: ['pid'],
  model: require('./product/cart-product-model'),
});
var ShippingAddress = require('./shipping-address-model');
var BillingAddress = require('./billing-address-model');
var DiscountCode = require('./summary/code/discount-code-model');

var app = require('app');
var debounce = require('lodash.debounce');
var xhr = require('xhr');

module.exports = BaseModel.extend({
  url: function () {
    var keychain = app.keychain.events.get(this.eid);
    
    var query = '?url='+ app.url +
        (keychain && keychain.email ? 
        '&email='+ encodeURIComponent(keychain.email) : '') +
        (keychain && keychain.password ? 
        '&password='+ encodeURIComponent(keychain.password) : '');
        
    return app.apiUrl +'cart'+ (this.isNew() ? '' : '/'+this.id) + query;
  },
  props: {
    id: 'number',
    eid: 'number',
    email: 'string',
    mtime: ['number', true, 0], // last modification time
    shipping_type: ['number', true, 1],
  },
  
  collections: {
    photos: PhotosCollection,
    products: ProductsCollection,
  },
  
  session: {
    event_name: 'string',
    subtotal: ['number', true, 0],
    discount: ['number', true, 0],
    shipping_total: ['number', true, 0],
    tax_total: ['number', true, 0],
    total: ['number', true, 0],
    
    taxRate: ['number', true, 0],
    tax_all: ['boolean', true, false],
    tax_shipping: ['boolean', true, false],
    
    shippingAddress: 'state',
    billingAddress: 'state',
    
    discountCode: 'state',
    freeShipping: ['boolean', true, false],
  },
  
  derived: {
    tax_hash: {
      deps: ['taxRate', 'tax_all', 'tax_shipping'],
      fn: function () {
        return this.taxRate +':'+ this.tax_all +':'+ this.tax_shipping;
      },
    },
    event: {
      fn: function () {
        return app.eventModels[this.eid];
      },
    },
    is_empty: {
      deps: ['mtime'],
      fn: function () {
        return !this.photos.length && !this.products.length;
      },
    },
    shipping: {
      deps: ['shipping_type'],
      fn: function () {
        return app.shipping.get(this.shipping_type);
      },
    },
    
    valid: {
      cache: false,
      fn: function () {
        var valid = true;
        this.products.forEach(function (product) {
          if (!product.valid) valid = false;
        });
        return valid;
      },
    },
  },
  
  clear: function () {
    this.unset('id');
    this.photos.reset();
    this.products.reset();
    this.discountCode.clear();
    this.store();
  },
  
  initialize: function () {
    if (!this.event.complete) {
      this.listenToOnce(this.event, 'change:complete', this.initialize);
      return;
    }
    
    this.shippingAddress = new ShippingAddress();
    this.billingAddress = new BillingAddress();
    
    this.discountCode = new DiscountCode({}, { parent: this });
    
    // list of all photo IDs in cart (including those addded to products)
    this.allPhotos = new BaseCollection();
    // this.listenTo(this.allPhotos, 'all', function () {
    //   console.log('event', arguments);
    // });

    
    
    this.fetchTaxData();
    this.listenTo(this.shippingAddress, 'change:taxHash', this.fetchTaxData);
    
    // this.listenTo(this.photos, 'add remove change', this.store);
    
    this.event_name = this.event.name;
    // if (!this.event.complete) {
    //   console.log('subscribe to event complete');
    //   this.listenToOnce(this.event, 'change:complete', function () {
    //     console.log('event name change event');
    //     this.event_name = this.event.name;
    //   });
    // }
    
    this.listenTo(app, 'storage:cart'+this.eid, this.storageCallback);
    
    this.listenTo(this.allPhotos, 'add', function (photo) {
      // console.log('add', photo);
      this.trigger('add:photo:'+ photo.id);
    });
    this.listenTo(this.allPhotos, 'remove', function (photo) {
      this.trigger('remove:photo:'+ photo.id);
    });
    
    // this.listenTo(this, 'change:mtime', function () {
    //   // this.updateSummary();
    //   console.log('CART UPDATED', this.toJSON());
    // });
    
    // this.listenTo(this, 'change', this.updateSummary);
    
    var storedData = app.storage['cart'+this.eid];
    if (storedData) this.set(JSON.parse(storedData));
    
    // this.products.reset();
    
    this.updatePhotosList();
    
    // this.store = _.throttle(this.store, 1000);
    this.save = debounce(this.save, 1000, { leading: true });
  },
  
  storageCallback: function (newData) {
    newData = JSON.parse(newData);
    if (newData && newData.mtime && newData.mtime > this.mtime) {
      this.set(newData);
    }
  },
  
  store: function () {
    // console.log('storing cart', 
    //     JSON.stringify(this.toJSON()).length * 2 + ' bytes');
    // console.log('storing cart', this.toJSON());
    
    this.mtime = Date.now();
    app.storage['cart'+this.eid] = JSON.stringify(this.toJSON());
  },
  
  save: function () {
    this.updateSummary();
    this.updatePhotosList();
    var self = this;
    
    // console.log('save cart', this.toJSON());
    
    // var data = this.toJSON()
    // BaseModel.prototype.save.apply(this, arguments);
    this.sync(this.isNew() ? 'create' : 'update', this, {
      url: this.url(),
      // data: this.toJSON(),
      success: function (resp) {
          if (+resp.status !== 200) return;
        var i, j, product, model, cartProduct, newProduct;
        self.id = resp.data.id;
        for (i = 0; i < resp.data.products.length; i++) {
          product = resp.data.products[i];
          cartProduct = self.products.get(product.cart_item_id);
          if (cartProduct) continue;
          
          newProduct = [];
          for (j = 0; j < self.products.length; j++) {
            model = self.products.at(j);
            if (model.pid === product.pid && model.oid === product.oid &&
                model.qty === product.qty && model.notes === product.notes &&
                model.photos.length === product.photos.length) {
              newProduct.push(model);
            }
          }
          
          // if we don't have a perfect fit - just reset all products 
          if (newProduct.length !== 1) {
            // console.log('reset products');
            self.products.set(resp.data.products);
            break;
          }
          newProduct[0].set(product);
        }
        self.store();
      },
    });
    
    this.store();
  },
  
  getPhoto: function (id) {
    if (!this.allPhotos) return;
    return this.allPhotos.get(id);
  },
  
  getShippingCost: function () { // only called from updateSummary
    var finalCost = 0; // final shipping cost
    var i, j, k;
    var photo;
    var product;
    var size;
    var price;
    var maxSizeCost = 0; // max shipping cost for a size 
    var maxAnyCost = 0; // max shipping cost for a size/addon/product option
    var addonsCost = 0; // total addons shipping cost 
    var productsCost = 0; // total products shipping cost 
    
    for (i = 0; i < this.photos.length; i++) {
      photo = this.photos.at(i);
      for (j = 0; j < photo.options.length; j++) {
        size = photo.options.at(j);
        price = size.shipping_price;
        
        if (price > maxSizeCost) maxSizeCost = price;
        if (price > maxAnyCost) maxAnyCost = price;
        
        for (k = 0; k < size.addons.length; k++) {
          price = size.addons.at(k).shipping_price;
          addonsCost += price;
          if (price > maxAnyCost) maxAnyCost = price;
        }
      }
    }
    
    for (i = 0; i < this.products.length; i++) {
      product = this.products.at(i);
      price = product.shipping_price;
      
      if (price > maxAnyCost) maxAnyCost = price;
      
      productsCost += price;
    }
    
    // fixed cost set per shipping method relative to total
    var baseCost = this.shipping.criteria[0].shipping;
    
    var printsTotal = 0; 
    for (i = 0; i < this.photos.length; i++) {
      printsTotal += this.photos.at(i).subtotal;
    }
    for (i = 0; i < this.shipping.criteria; i++) {
      if (app.config.shipping_method === 'order_percent') {
        if (this.subtotal >= this.shipping.criteria[i].total) break;
      }
      else {
        if (printsTotal >= this.shipping.criteria[i].total) break;
      }
      baseCost = this.shipping.criteria[i].shipping;
    }
    
    switch (app.config.shipping_method) {
      case 'prints_ordered': finalCost = maxSizeCost + addonsCost +productsCost;
      break;
      case 'items_ordered': finalCost = maxAnyCost;
      break;
      case 'print_total': finalCost = baseCost + addonsCost + productsCost;
      break;
      case 'order_total': finalCost = baseCost;
      break;
      case 'print_percent': finalCost = printsTotal * baseCost;
        if (finalCost < this.shipping.min) finalCost = this.shipping.min;
        if (finalCost > this.shipping.max) finalCost = this.shipping.max;
        finalCost += addonsCost + productsCost;
      break;
      case 'order_percent': 
        finalCost = this.subtotal * baseCost;
        if (finalCost < this.shipping.min) finalCost = this.shipping.min;
        if (finalCost > this.shipping.max) finalCost = this.shipping.max;
      break;
    }
    
    
    
    return finalCost;
  },
  
  calculateTax: function () {
    if (!this.taxRate) return 0;
    var tax = 0;
    if (this.tax_shipping) {
      tax += this.shipping_total * this.taxRate;
    }
    
    if (this.tax_all) { // simply tax everything
      tax += (this.subtotal - this.discount) * this.taxRate;
      return Math.round(tax);
    }
    
    
    // =========================================================================
    // tax only sizes and products that are marked as taxable
    var i, j, photo, cartProduct, option, size;
    for (i = 0; i < this.photos.length; i++) {
      photo = this.photos.at(i);
      for (j = 0; j < photo.options.length; j++) {
        option = photo.options.at(j);
        size = photo.options.at(j).size;
        // console.log('photo taxable', option.size.taxable);
        if (option.size.taxable) {
          tax += option.price * this.taxRate;
        }
      }
    }
    
    for (i = 0; i < this.products.length; i++) {
      cartProduct = this.products.at(i);
      if (cartProduct.product.sales_tax) {
        tax += cartProduct.price * this.taxRate;
      }
    }
    
    return Math.round(tax);
  },
  
  updatePhotosList: function () {
    var i, j, id;
    var photos = [];
    var index = {};
    for (i = 0; i < this.photos.length; i++) {
      id = this.photos.models[i].pid;
      if (!index[id]) {
        photos.push({ id: id });
        index[id] = true;
      }
    }
    for (i = 0; i < this.products.length; i++) {
      for (j = 0; j < this.products.models[i].photos.length; j++) {
        id = this.products.models[i].photos.models[j].pid;
        if (!index[id]) {
          photos.push({ id: id });
          index[id] = true;
        }
      }
    }
    
    this.allPhotos.set(photos);
  },
  
  updateSummary: function () {
    if (!this.discountCode) return;
    var i, j;
    var subtotal = 0; 
    var photosTotal = 0;
    var addonsTotal = 0;
    var productsTotal = 0;
    var st;
    var discount = 0;
    
    var photo;
    for (i = 0; i < this.photos.length; i++) {
      photo = this.photos.at(i);
      st = photo.subtotal;
      subtotal += st;
      discount += (st - photo.total);
      
      for (j = 0; j < photo.options.length; j++) {
        addonsTotal += photo.options.at(j).addons_total;
      }
    }
    
    photosTotal = subtotal - discount - addonsTotal;
    
    var product, price;
    for (i = 0; i < this.products.length; i++) {
      product = this.products.at(i);
      st = product.basePrice;
      price = product.price;
      subtotal += st;
      productsTotal += price;
      discount += (st - price);
    }
    this.subtotal = subtotal;
    this.discount = discount;
    
    this.shipping_total = this.getShippingCost();
    
    if (!this.discountCode.apply_pre_tax_calc) {
      this.tax_total = this.calculateTax();
    }
    
    var codeDiscount = this.discountCode.calculateDiscount({
      photos: photosTotal,
      addons: addonsTotal,
      products: productsTotal,
      shipping: this.shipping_total,
      tax: this.tax_total,
    });
    
    this.discount += codeDiscount;
    
    if (this.discountCode.apply_pre_tax_calc) {
      this.tax_total = this.calculateTax();
    }
    
    var shippingTotal = this.shipping_total;
    console.log(this.discountCode.valid, this.discountCode.type,
        this.shipping.isStandard, this.discountCode.amount);
    if (this.discountCode.valid && this.discountCode.type === 'shipping' &&
        this.shipping.isStandard && this.discountCode.amount) {
      shippingTotal = 0;
      this.freeShipping = true;
    }
    else {
      this.freeShipping = false;
    }
    console.log(subtotal, this.discount, shippingTotal, this.tax_total);
    this.total = subtotal - this.discount + shippingTotal + this.tax_total;
  },
  
  fetchTaxData: function () {
    // console.log('fetching tax data');
    var self = this;
    var data = this.shippingAddress;
    var keys = ['state_id', 'city', 'zip'];
    for (var i = 0; i < 3; i++) {
      if (!data[keys[i]]) {
        this.taxRate = 0;
        this.tax_all = false;
        this.tax_shipping = false;
        return;
      }
    }
    
    this.taxXhr = xhr({
      uri: app.apiUrl +'checkout/taxrate?url='+ app.url +
           '&shipping_state_id='+ encodeURIComponent(data.state_id)+
           '&shipping_city='+ encodeURIComponent(data.city)+
           '&shipping_zipcode='+ encodeURIComponent(data.zip),
    }, function (err, resp, body) {
      body = JSON.parse(body);
      if (body.status === 200) {
        self.taxRate = body.data.rate;
        self.tax_all = body.data.tax_all;
        self.tax_shipping = body.data.tax_shipping;
        self.updateSummary();
      }
      else {
        var error = (body.error && body.error.message) || body.message;
        console.log('Tax request failed: '+ error);
      }
    });
  },
  
  // parse: function (res) {
  //   // BaseModel.parse.apply(this, arguments);
  // },
  
});
