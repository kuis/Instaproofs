/*==========================================================================*\
  A size of photos in a product
\*==========================================================================*/
"use strict";

// var app = require('app');

var BaseView = require('app/base/base-view');
var PhotoView = require('./cart-product-photo');
var Photos = require('./cart-product-photos-collection');

module.exports = BaseView.extend({
  viewType: 'cart-product-option',
  template: require('app/templates').cart.product['cart-product-option'],
  
  props: {
  },
  
  bindings: {
    
  },
  
  events: {
    // 'dblclick .plus, .minus, .button': 'preventDefault',
  },
  
  initialize: function () {
    BaseView.prototype.initialize.apply(this, arguments);
    this.collectionToRender = new Photos();
    this.updateCollection();
    this.render();
    
    this.listenTo(this.parent.model.cart, 'change:mtime', function () {
      this.after(30, this.updateCount);
    });
    this.updateCount();
    
    this.listenTo(this.parent, 'change:photoWidth', this.updateLayout);
    this.updateLayout();
    
    
    // this.listenTo(this.collection, 'add', this.updateLayout);
    // this.listenTo(this.collection, 'remove', this.updateLayout);
    this.listenTo(this.parent.model.cart, 'change:mtime', this.updateLayout);
    
    // this.cacheElements({
    // });
  },
  
  updateCollection: function () {
    if (!this.collectionToRender) return;
    var self = this;
    var photos = this.collection.filter(function (model) {
      return !!model.options.get(self.model.id);
    });
    this.collectionToRender.set(photos);
  },
  
  render: function () {
    var self = this;
    this.renderWithTemplate(this);
    this.updateCollection();
    this.photos = this.renderCollection(this.collectionToRender, PhotoView, 
        this.query('.product-photos'), {
      filter: function (model) {
        return !!model.options.get(self.model.id);
      },
      viewOptions: {
        optionView: this,
        // colleciton: this.collection,
      },
    });
  },
  
  updateLayout: function () {
    this.updateCollection();
    
    var colsNum = this.parent.columnsNum;
    this.el.classList.toggle('centered', this.photos.views.length < colsNum);
    this.el.classList.toggle('single-photo', this.photos.views.length === 1);
    if (this.photos.views.length <= colsNum) colsNum = this.photos.views.length;
    var rowsNum = Math.ceil(this.photos.views.length / colsNum);
    var i, photo;
    for (i = 0; i < this.photos.views.length; i++) {
      photo = this.photos.views[i];
      photo.firstRow = i < colsNum;
      photo.firstCol = i % colsNum === 0;
      photo.lastCol = (i + 1) % colsNum === 0;
      photo.lastRow = i > colsNum * (rowsNum-1) - 1;
      // photo.imgEl.innerHTML = +i;
    }
  },
  
  updateCount: function () {
    var product = this.parent.model;
    var left = product.spotsLeft[this.model.id];
    var capacity = product.capacity[this.model.id];
    var selected = capacity - left;
    
    this.el.classList.toggle('no-photos', left === capacity);
    this.el.classList.toggle('fulfilled', !left);
    this.el.classList.toggle('over-capacity', left < 0);
    this.query('.spots-left').innerHTML = 
        this.lz('%d/%d selected', selected, capacity);
  },
  
  getPhotosUrl: function () {
    return this.parent.model.cart.event.app_url;
  },
});
