/*==========================================================================*\
  A single product in the cart 
\*==========================================================================*/
"use strict";

var app = require('app');

var BaseView = require('app/base/base-view');
var OptionView = require('./cart-product-option');
var NumberInput = require('app/number-input/number-input');

module.exports = BaseView.extend({
  viewType: 'cart-product',
  dictionary: 'cartProduct',
  template: require('app/templates').cart.product['cart-product'],
  
  props: {
    photoWidth: 'number',
    columnsNum: 'number',
    removed: ['boolean', true, false],
    
    mobileQty: ['boolean', true, false], // whether to use mobile qty selector
    
    // whether Plus and Minus buttons are displayed in mobile view 
    qtyInputMode: ['boolean', true, false],
    
    qtyView: 'state',
  },
  
  derived: {
    cartPage: {
      fn: function () {
        return this.getParent('cart-page');
      },
    },
    cartModel: {
      fn: function () {
        return this.model.cart;
      },
    },
  },
  
  bindings: {
    // mobileQty: {
    //   type: function (el, val) {
    //     // el.readOnly = !!val;
    //     el.disabled = !!val;
    //   },
    //   selector: '.qty input',
    // },
    'qtyView.inputMode': {
      type: 'booleanClass',
      name: 'qty-input-mode',
    },
    
    'model.notes': {
      type: 'value',
      selector: '.notes textarea',
    },
    
    'model.qty': {
      type: function (el, val) {
        if (this.qtyView) this.qtyView.value = val;
        // el.value = val;
        // this.el.classList.toggle('qty-is-one', val === 1);
      },
      // type: 'value',
      // selector: '.qty input',
    },
    'model.basePrice': {
      type: function (el, val) {
        el.textContent = this.model.formatMoney(val);
      },
      selector: '.original-price',
    },
    'model.price': {
      type: function (el, val) {
        el.textContent = this.model.formatMoney(val);
      },
      selector: '.discounted-price',
    },
    'removed': {
      type: 'booleanClass',
      name: 'removed',
    },
  },
  
  events: {
    // 'click .head .plus': 'plus',
    // 'click .head .minus': 'minus',
    // 'click .qty input': 'onQtyClick',
    // 'click .qty .hide-controls': 'onHideControlsClick',
    
    'click .head .action.remove': 'removeFromCart',
    'click .head .button.restore': 'restore',
    'click .head .button.hide': 'hide',
    
    'change .notes textarea': 'readNotes',
    
    'dblclick .plus, .minus, .button': 'preventDefault',
  },
  
  initialize: function () {
    BaseView.prototype.initialize.apply(this, arguments);
    // this.render();
    
    // keep an up-to-date calculation of product's content width
    this.listenTo(app.state, 'change:width', this.updateWidth);
    this.listenTo(this.cartModel, 'change:mtime', this.updateAvailability);
    this.updateWidth();
  },
  
  updateWidth: function () {
    this.mobileQty = app.state.width <= 550;
    
    var width = app.state.width >= 1304 ? 1200 : app.state.width * 0.92;
    if (app.state.width > 950) { // substruct the summary box
      width -= 220;
    }
    width -= 48; // paddings and borders
    width = Math.floor(width);
    
    this.columnsNum = Math.floor(width / 180);
    this.photoWidth = Math.floor(width / this.columnsNum);
  },
  
  removeFromCart: function () {
    // this.model.qty = 0;
    // this.cartModel = this.model.cart;
    this.collection = this.model.collection;
    this.model.collection.remove(this.model, { silent: true });
    this.removed = true;
    
    this.cartModel.updateSummary();
    this.cartModel.save();
    // this.el.classList.add('removed');
  },
  restore: function () {
    var items = this.parent.el.querySelectorAll('.cart-product');
    var i, index = 0;
    for (i = 0; i < items.length; i++) {
      if (items[i] === this.el) {
        index = i;
        break;
      }
    }

    // Mark cart_item_id to 0
    this.model.cart_item_id = 0;
    this.collection.add(this.model, { at: index, silent: true });
    this.removed = false;
    
    this.cartModel.updateSummary();
    this.cartModel.save();
  },
  hide: function () {
    this.remove();
    
    this.cartPage.checkForEmptiness();
  },
  
  render: function () {
    this.renderWithTemplate(this);
    this.cacheElements({
      sizesEl: '.sizes',
      qtyInput: '.qty input',
      availabilityEl: '.availability',
    });
    var i, view;
    
    this.qtyView = this.renderSubview(new NumberInput({ 
      value: this.model.qty
    }), '.qty');
    this.listenTo(this.qtyView, 'change:value', this.readQty);
    
    this.optionViews = [];
    for (i = 0; i < this.model.option.required_size_list.length; i++) {
      view = new OptionView({
        collection: this.model.photos,
        model: this.model.option.required_size_list.at(i),
        parent: this,
      });
      this.optionViews.push(view);
      this.sizesEl.appendChild(view.el);
    }
    
    var e = this.model.cart.event;
    var discount = e.sales.allProducts;
    this.el.classList.toggle('discounted', !!discount);
    if (discount) this.query('.discount').innerHTML = 
                      '-'+ Math.round(discount.discount * 100) + '%';
    
    this.updateWidth();
    this.updateAvailability();
  },
  
  readQty: function () {
    if (this.qtyView) {
      if (this.qtyView.value < 1) {
        this.qtyView.set({ value: this.model.qty }, { silent: true });
        this.removeFromCart();
      }
      else {
        this.model.qty = this.qtyView.value;
        this.model.cart.updateSummary();
        this.model.cart.save();
      }
    }
  },
  
  readNotes: function () {
    var textarea = this.query('.notes textarea');
    if (textarea) this.model.notes = textarea.value;
    this.cartModel.save();
  },
  
  
  updateAvailability: function () {
    if (!this.el) return;
    var available = this.model.option.available_qty;
    // available = 5;
    if (available < 0) return; // unlimited
    var remaining = this.getRemainingQty();
    // remaining = 0;
    
    this.qtyView.max = remaining;
    
    if (!available) {
      this.el.classList.add('sold-out');
    }
    else if (!remaining) {
      this.el.classList.add('maxed-out');
      this.availabilityEl.innerHTML = 
          this.lz('All remaining stock is already in your cart.');
    }
    else {
      this.availabilityEl.innerHTML = this.lz('In Stock: %d.', available);
    }
    
  },
  getRemainingQty: function () {
    if (this.model.option.available_qty < 0) return -1;
    if (this.model.option.available_qty === 0) return 0;
    
    var itemsInCart = this.cartModel.products.where({
      pid: this.model.pid,
      oid: this.model.oid,
    });
    var i;
    var inCartQty = 0;
    for (i = 0; i < itemsInCart.length; i++) {
      if (itemsInCart[i] !== this.model) inCartQty += itemsInCart[i].qty;
    }
    
    var remaining = this.model.option.available_qty - inCartQty;
    if (remaining < 0) remaining = 0;
    return remaining;
  },
});
