/*==========================================================================*\
  A product in cart 
\*==========================================================================*/
"use strict";

var BaseModel = require('app/base/base-model');
var app = require('app');
var clone = require('lodash.clone');

var Photos = require('./cart-product-photos-collection');

module.exports = BaseModel.extend({
  idAttribute: 'cart_item_id',
  
  props: {
    
    // products must already have a cart_item_id when doing a full-cart update
    cart_item_id: 'number',
    
    pid: 'number', // product ID
    oid: 'number', // product option ID
    qty: 'number',
    notes: 'string',
    
    // options: {
    //   type: 'object',
    //   default: function () {
    //     return {};
    //   },
    // },
  },
  
  collections: {
    photos: Photos,
  },
  
  session: {
    spotsLeft: 'object',
    bootstrapped: ['boolean', true, false],
  },
  
  derived: {
    cart: {
      fn: function () {
        return this.collection.parent;
      },
    },
    product: {
      cache: false,
      fn: function () {
        return app.products.get(this.pid);
      },
    },
    option: {
      cache: false,
      fn: function () {
        return this.product.options.get(this.oid);
      },
    },
    
    capacity: {
      fn: function () {
        var sizes = {};
        var list = this.option.required_size_list.models;
        for (var i = 0; i < list.length; i++) {
          sizes[list[i].id] = list[i].qty;
        }
        return sizes;
      },
    },
    
    fulfilled: {
      cache: false,
      fn: function () {
        for (var i in this.spotsLeft) {
          if (this.spotsLeft[i]) return false;
        }
        return true;
      }
    },
    
    valid: {
      cache: false,
      fn: function () {
        for (var i in this.spotsLeft) {
          if (this.spotsLeft[i] !== 0) {
            return false;
          }
        }
        return true;
      },
    },
    
    price: {
      deps: ['qty'],
      cache: false,
      fn: function () {
        var singlePrice = this.option.price;
        var e = this.cart.event;
        var discount = e.sales.allProducts;
        if (discount) {
          singlePrice -= Math.round(this.option.price * discount.discount);
        }
        return this.qty * singlePrice;
      },
    },
    basePrice: {
      deps: ['qty'],
      cache: false,
      fn: function () {
        return this.qty * this.option.price;
      },
    },
    
    shipping_price: {
      deps: ['price'],
      cache: false,
      fn: function () {
        return this.option.shipping.get(this.cart.shipping_type).price;
      },
    },
    
    img: {
      fn: function () {
        var img = this.option.getImgForWidth(150);
        if (!img) img = this.product.getImgForWidth(150);
        if (!img) return false;
        return img;
      },
    },
  },
  
  // prevent ampersand from sorting the collection 
  isNew: function () { return false; },
  
  initialize: function () {
    this.listenTo(this.cart, 'change:mtime', this.updateCounts);
    this.listenTo(app.state, 'change:bootstrapped', this.updateCounts);
    
    if (app.state.bootstrapped) this.updateCounts();
  },
  
  updateCounts: function () {
    this.bootstrapped = true;
    if (!this.product) return; // bootstrap data is not there yet 
    var spotsLeft = clone(this.capacity);
    var i, j, photo, option;
    for (i = 0; i < this.photos.length; i++) {
      photo = this.photos.at(i);
      for (j = 0; j < photo.options.length; j++) {
        option = photo.options.at(j);
        spotsLeft[option.size_id] -= option.qty;
      }
    }
    this.spotsLeft = spotsLeft;
  },
  
  
  getOptionQty: function (pid, cid, oid) {
    var i, j, photo;
    for (i = 0; i < this.photos.length; i++) {
      photo = this.photos.models[i];
      if (photo.pid !== pid || photo.color_id !== cid) continue;
      for (j = 0; j < photo.options.length; j++) {
        if (photo.options.models[j].size_id === oid) {
          return photo.options.models[j].qty;
        }
      }
    }
    return 0;
  },
  
  // parse: function (res) {
  // },
  
});
