/*==========================================================================*\
  A Photo in cart 
\*==========================================================================*/
"use strict";

var app = require('app');
var BaseModel = require('app/base/base-model');

var Options = require('app/base/base-collection').extend({
  mainIndex: 'size_id',
  model: require('./option/cart-option-model'),
});

module.exports = BaseModel.extend({
  // idAttribute: 'pid',
  extraProperties: 'ignore',
  
  // prevent ampersand from sorting the cart photos collection 
  isNew: function () { return false; },
  
  props: {
    // id: 'string',
    cat_id: 'number', // photo's category ID
    pid: 'number', // original ID of the event's photo
    color_id: 'number', // color variant ID 
    
    // options: {
    //   type: 'object',
    //   default: function () {
    //     return {};
    //   },
    // },
  },
  
  collections: {
    options: Options,
  },
  
  derived: {
    id: {
      deps: ['pid', 'color_id'],
      fn: function () {
        return this.pid +'-'+ this.color_id;
      },
    },
    eid: {
      fn: function () {
        return this.cart.eid;
      },
    },
    cart: {
      fn: function () {
        if (app.view.currentPage && app.view.currentPage.eventId) {
          var event = app.eventModels[app.view.currentPage.eventId];
          if (event.cart) return event.cart;
        }
        return this.collection.parent;
      },
    },
    photo: {
      // cache: false,
      fn: function () {
        // if (!app.eventModels[this.eid].categories.length) return null;
        if (!app.eventModels[this.eid]) {
          console.log('no event', this.toJSON(), app.eventModels);
          console.trace();
        } 
        return app.eventModels[this.eid].categories.get(this.cat_id).
               photos.get(this.pid);
      }
    },
    url: {
      fn: function () {
        return this.photo.buy_url;
      },
    },
    taxable_subtotal: {
      cache: false,
      fn: function () {
        var i;
        var subtotal = 0;
        var option;
        for (i = 0; i < this.options.length; i++) {
          option = this.options.at(i);
          if (option.size.taxable) {
            option.price; // trigger calc
            subtotal += option.base_price;
          }
        }
        return subtotal;
      },
    },
    subtotal: {
      cache: false,
      fn: function () {
        var i;
        var subtotal = 0;
        var option;
        for (i = 0; i < this.options.length; i++) {
          option = this.options.at(i);
          option.price; // trigger calc
          subtotal += option.base_price;
        }
        return subtotal;
      },
    },
    subtotal_for_shipping: {
      cache: false,
      fn: function () {
        var i;
        var subtotal = 0;
        var option;
        for (i = 0; i < this.options.length; i++) {
          option = this.options.at(i);
          if (!option.size.include_in_shipping_calcs) continue;
          subtotal += option.price;
        }
        return subtotal;
      },
    },
    total: {
      cache: false,
      fn: function () {
        // if (!this.photo) return 0;
        var i;
        var total = 0;
        for (i = 0; i < this.options.length; i++) {
          total += this.options.at(i).price;
        }
        return total;
      },
    },
  },
  
  // parse: function (res) {
  // },
  
});
