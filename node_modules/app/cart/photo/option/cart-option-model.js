/*==========================================================================*\
  A photo's purchase option (size) in cart 
\*==========================================================================*/
"use strict";

var Addon = require('../addon/cart-addon-model');
var BaseModel = require('app/base/base-model');
var BaseCollection = require('app/base/base-collection');

var app = require('app');

// var Addon = BaseModel.extend({
//   idAttribute: 'addon_id',
//   props: {
//     id: 'number', // ID of the addon
//     oid: 'number', // selected option ID
//   },
//   derived: {
//     addon: {
//       fn: function () {
//         return app.addons.get(this.id);
//       },
//     },
//   },
// });

var Addons = BaseCollection.extend({
  model: Addon,
});

module.exports = BaseModel.extend({
  idAttribute: 'size_id',
  props: {
    size_id: 'number',
    qty: 'number',
    crop: 'object',
    // addons: 'object',
  },
  
  collections: {
    addons: Addons,
  },
  
  session: {
    base_price: ['number', true, 0],
    discounted: ['boolean', true, false],
    bulkPricingActive: ['boolean', true, false],
  },
  
  derived: {
    size: {
      fn: function () {
        return app.sizes.get(this.size_id);
      },
    },
    photo: {
      fn: function () { return this.cart_photo.photo; }
    },
    photo_option: {
      fn: function () {
        return this.photo.buyOptions.get(this.size_id +'-'+ 
                                         this.cart_photo.color_id);
      },
    },
    
    // discounted: {
    //   deps: ['price'],
    //   fn: function () {
    //     var prices = this.photo_option.getPrices(
    //                                           this.size.no_qty ? 1 : this.qty);
    //     return prices.baseTotal !== prices.total;
    //   },
    // },
    price: {
      deps: ['qty', 'addons'],
      cache: false,
      fn: function () {
        // var photo = this.cart_photo.photo;
        // var option = photo.buyOptions.get(this.size_id);
        var option = this.photo_option;
        if (!option) console.log('no photo_option', this.size_id +'-'+ 
                                         this.cart_photo.color_id,
          this.photo.buyOptions.models);
        var qty = this.size.no_qty ? 1 : this.qty;
        var prices = option.getPrices(qty);
        this.prices = prices;
        // var singlePrice = option.price;
        var addonsTotal = 0;
        // var singlePrice = option.discounted_price;
        for (var i = 0; i < this.addons.length; i++) {
          addonsTotal += this.addons.at(i).price * qty;
          // singlePrice += this.addons.at(i).price;
        }
        this.discounted = prices.total !== prices.baseTotal;
        this.base_price = prices.baseTotal + addonsTotal;
        this.bulkPricingActive = !!prices.activeBulkQty;
        return prices.total + addonsTotal;
        // return singlePrice * (this.size.no_qty ? 1 : this.qty);
      },
    },
    discounted_price: {
      deps: ['qty', 'addons'],
      cache: false,
      fn: function () {
        // var photo = this.cart_photo.photo;
        // var option = photo.buyOptions.get(this.size_id);
        var option = this.photo_option;
        // var singlePrice = option.price;
        var singlePrice = option.discounted_price;
        for (var i = 0; i < this.addons.length; i++) {
          singlePrice += this.addons.at(i).price;
        }
        return singlePrice * (this.size.no_qty ? 1 : this.qty);
      },
    },
    
    cart_photo: {
      fn: function () {
        return this.collection.parent;
      },
    },
    
    cart: {
      fn: function () {
        return this.cart_photo.cart;
      },
    },
    
    shipping_price: {
      deps: ['price'],
      cache: false,
      fn: function () {
        return this.size.shipping.get(this.cart.shipping_type).price;
      },
    },
    
    bulkPricingAvailable: {
      deps: ['photo_option'],
      fn: function () {
        return this.photo_option && !!this.photo_option.bulk_pricing.length;
      },
    },
  },
  
  initialize: function () {
    // this.price;
    this.listenTo(this, 'change:price', this.onPriceChange);
  },
  
  onPriceChange: function () {
    if (this.cart) {
      this.cart.updateSummary();
      this.cart.save();
    }
  },
  
  priceForOption: function (oid) {
    var option = this.options[oid];
  },
  
  // parse: function (res) {
  // },
  
});
