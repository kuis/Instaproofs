/*==========================================================================*\
  Main view for the lightbox photo viewer
\*==========================================================================*/
"use strict";

var BaseView = require('app/base/base-view');
var PhotoView = require('app/photo/photo');
var Player = require('app/util/music-player/music-player');
var SlideshowMixin = require('./slideshow-mixin');
var TouchMixin = require('./touch-mixin');

var app = require('app');
var fullscreen = require('app/util/fullscreen/fullscreen');
var keyboard = require('app/util/keyboard/keyboard');
var templates = require('app/templates');
var ua = require('app/util/ua/ua');

module.exports = BaseView.extend(SlideshowMixin, TouchMixin, {
  viewType: 'lightbox',
  dictionary: 'lightbox',
  template: templates.lightbox.lightbox,
  props: {
    player: 'state',
    
    favoritesEmpty: ['boolean', true, true], // event's favorites are empty
    
    audioReady: ['boolean', true, false], // audio is ready and playing
    slideshow: ['boolean', true, false], // whether slideshow is rolling 
    hasMusic: ['boolean', true, false], // whether current category has music
    music: ['boolean', true, false], // whether music is currently playing
    mouseRest: 'any', // no mouse or touch activity for a while
    mouseOverSlideshow: ['boolean', true, false], // mouse is over SH controls
    mouseOverTopRight: ['boolean', true, false], // mouse over top right block
    
    buyFormDisplayed: ['boolean', true, false], // whether buy form is displayed
    
    noArrows: ['boolean', true, false], // no left-right nav (only one photo)
    noCount: ['boolean', true, false], // no photo's number and total count
    
    // Prev and Next click areas get pointer-events:none;
    disabledArrows: ['boolean', true, false],
    
    // whether the UI should currently be hidden if in fullscreen
    noUI: ['boolean', true, false], 
    
    // whether we're currently preloading a photo
    preloading: ['boolean', true, false],
    
    // when set, whole lightbox is covered with a div with specified cursor
    cursor: ['string', true, ''],
    
    // whether colors selector is displayed on the current photo
    colorsSelector: ['boolean', true, false],
    
    // whether image names should be displayed if present
    namesDisplayed: ['boolean', true, false],
    
    appState: 'state',
  },
  // backTo: null, // page to go back to when closing 
  displayed: false, // whether the lightbox is currently displayed
  mouseLastPosition: null, // last registered cursor position
  mouseRestPosition: null, // position at which we entered 'no-input' mode
  mouseRestTimer: null,
  mouseRestSpeed: 1500, // time after which the mouse is considered inactive
  // noUI: false, // whether the UI is currently hidden
  noUITimer: null, // timer for hiding UI in fullscreen 
  
  initialize: function () {
    BaseView.prototype.initialize.apply(this, arguments);
    this.appState = app.state;
    this.render();
    document.body.insertBefore(this.el, document.getElementById('popup'));
    
    this.namesDisplayed = !!app.storage.displayNames;
    
    this.bindMethods('back', 'forward', 'close', 
                     'slideshowCallback','onMouseRest');
    
    if (ua.mobile) this.mouseRestSpeed = 5000;
    
    this.cacheElements({
      categoryEl: '.category', // current category title
      categoriesDropdown: '.categories', // dropdown with event's categories
      count: '.count', // current position in the list
      slides: '.slides', // container for the slides 
      prevButton: '.prev',
      nextButton: '.next',
      musicToggle: '.toggle-music',
      slideshowControlsEl: '.slideshow-controls',
      slideshowSpeedEl: '.slideshow-speed',
      slideshowSpeedFill: '.slideshow-speed .fill',
      slideshowSpeedNob: '.slideshow-speed .nob',
      slideshowSpeedText: '.slideshow-speed .text',
      topRightEl: '.top-right',
      
      cover: '#lightbox-cover',
    });
    
    this.mouseLastPosition = {
      x: null,
      y: null,
    };
    
    // number of previous and next photos to preload
    this.forwardPreloads = ua.desktop ? 10 : 3;
    this.backPreloads = ua.desktop ? 3 : 1;
    
    keyboard.bind('left', this.back);
    keyboard.bind('right', this.forward);
    keyboard.bind('esc', this.close);
    
    this.listenTo(app.state, 'resize', this.resize);
    this.listenTo(app.state, 'change:fullscreen', this.resize);
    
    this.setSlideshowSpeed(ua.desktop ? 3 : 3);
    
    this.player = new Player();
    
    this.prev = []; // queue of photo views to the left 
    this.next = []; // queue of photo views to the right
    
    if (ua.mobile) this.initTouch();
    
    // this.el.classList.add('cross-fade');
  },
  
  events: {
    'click .close': 'close',
    'click .next': 'forward',
    'click .prev': 'back',
    'click .toggle-music': 'toggleMusic',
    'click .toggle-slideshow': 'toggleSlideshow',
    'click .toggle-names': 'toggleImageNames',
    'click .toggle-fullscreen': 'toggleFullscreen',
    'click .category': 'toggleCategories',
    
    // 'wheel': 'onWheel',
    // 'mousewheel': 'onWheel',
    
    'mousemove': 'onMouseMove',
    'mouseup': 'onMouseUp',
    
    'mousedown .slideshow-speed': 'speedDown',
    
    'touchstart': 'onTouchStart',
    'touchmove': 'onTouchMove',
    'touchend': 'onTouchEnd',
    'touchcancel': 'onTouchEnd',
  },
  
  bindings: {
    'appState.fullscreen': {
      type: function (el, val) {
        this.query('.toggle-fullscreen .popover').innerHTML = val
            ? this.lz('Exit fullscreen')
            : this.lz('Enter fullscreen');
      },
    },
    cursor: {
      type: function (el, val) {
        if (!ua.desktop || !this.cover) return;
        this.cover.style.display = !!val ? 'block' : 'none';
        this.cover.className = val;
      },
    },
    'player.ready': {
      type: 'booleanClass',
      name: 'audio-ready',
    },
    
    favoritesEmpty: {
      type: 'booleanClass',
      name: 'favorites-empty',
    },
    slideshow: {
      type: 'booleanClass',
      name: 'slideshow',
    },
    music: {
      type: 'booleanClass',
      name: 'music-on',
    },
    hasMusic: {
      type: 'booleanClass',
      name: 'has-music',
    },
    mouseRest: {
      type: 'booleanClass',
      name: 'mouse-rest',
    },
    mouseOverSlideshow: {
      type: 'booleanClass',
      name: 'mouse-over-slideshow',
    },
    mouseOverTopRight: {
      type: 'booleanClass',
      name: 'mouse-over-top-right',
    },
    mouseOverActions: {
      type: 'booleanClass',
      name: 'mouse-over-actions',
    },
    namesDisplayed: {
      type: function (el, val) {
        this.el.classList.toggle('names-displayed', !!val);
        this.query('.toggle-names .popover').innerHTML = val 
            ? this.lz('Hide image names')
            : this.lz('Show image names');
      },
      // type: 'booleanClass',
      // name: 'names-displayed',
    },
    noUI: {
      type: 'booleanClass',
      name: 'no-ui',
    },
    noArrows: {
      type: 'booleanClass',
      name: 'no-arrows',
    },
    noCount: {
      type: 'booleanClass',
      name: 'no-count',
    },
    buyFormDisplayed: {
      type: 'booleanClass',
      name: 'buy-form-displayed',
    },
    disabledArrows: {
      type: 'booleanClass',
      name: 'disabled-arrows',
    },
    
    colorsSelector: {
      type: 'booleanClass',
      name: 'with-colors-selector',
    },
  },
  
  cleanup: function (notCurrent) { // clear the lightbox after hiding
    var i;
    
    this.buyFormDisplayed = false;
    
    for (i = 0; i < this.prev.length; i++) {
      this.prev[i].remove('now');
      this.prev[i].stopListening();
    }
    for (i = 0; i < this.next.length; i++) {
      this.next[i].remove('now');
      this.next[i].stopListening();
    }
    if (!notCurrent && this.current) {
      this.current.remove('now');
      this.current.stopListening();
    }
    this.prev = []; // queue of photo views to the left 
    this.next = []; // queue of photo views to the right
    if (!notCurrent) this.current = null; // view of the current photo
  },
  
  
  /*==========================================================================*\
    Reset the lightbox to a different list
  \*==========================================================================*/
  reset: function (ops) {
    // if (ops.backTo) this.backTo = ops.backTo;
    
    this.cleanup();
    
    if (this.event) {
      this.stopListening(this.event.favorites);
      this.stopListening(this.event.hides);
      this.stopListening(this.event.cart);
    }    
    
    this.event = ops.event;
    this.collection = ops.collection;
    
    // var photoModel = ops.photo || this.collection.at(0);
    // if (photoModel.locked) {
    //   this.hide();
    //   app.navigate('events/'+ this.event.id+ '/'+ this.collection.parent.id);
    //   return;
    // }
    
    // this.buyOnly = !!ops.buyForm || !!ops.crop;
    var params = app.history.latestConfig;
    this.buyOnly = !!(params.buy || params.crop);
    this.el.classList.toggle('buy-only', this.buyOnly);
    
    this.query('.top-right a.cart').href = '#events/'+ this.event.id +'/cart';
    this.listenTo(this.event.cart, 'change:is_empty', this.updateCartIcon);
    this.updateCartIcon();
    
    this.listenTo(this.event.favorites, 'change:mtime', function () {
      this.favoritesEmpty = !this.event.favorites.photos.length;
      this.updateCategories();
      this.updateCount();
      if (this.collection.parent === this.event.favorites) {
        this.cleanup(true);
        this.preloadMore();
      }
    });
    this.listenTo(this.event.hides, 'change:mtime', this.updateCount);
    
    this.current = new PhotoView({ 
      model: ops.photo || this.collection.at(0),
      parent: this,
      // buy: ops.backTo.substr(-5) === '/cart',
      // buy: ops.buyForm,
      // crop: ops.crop,
    });
    this.colorsSelector = this.current.model.pricing.colors_count > 1;
    this.preloading = true;
    
    // if (ops.backTo === '#cart') {
    //   this.current.showBuyForm();
    // }
    
    // preload current, prev and next slides
    if (!params.buy && !params.crop) {
      this.preloadMore({ inBackground: true });
      this.preloadMore({ inBackground: true });
      // this.preloadMore({ inBackground: true });
    }
    
    this.updateCount();
    this.updateDirectionalAreas();
    
    this.current.el.classList.add('current');
    this.updateSlides();
    
    
    this.updateMusic();
    
    
    this.after(100, this.updateCategories);
    // this.updateCategories();
    
    this.el.classList.remove('show-categories');
    
    if (ops.slideshow && !this.slideshow) {
      this.toggleSlideshow();
    }
    if (ops.slideshow && !app.state.fullscreen) {
      this.toggleFullscreen();
    }
  },
  
  toggleImageNames: function (e) {
    if (e && e.preventDefault) e.preventDefault();
    
    this.namesDisplayed = !this.namesDisplayed;
    app.storage.displayNames = this.namesDisplayed ? '1': '';
  },
  
  updateCategories: function () {
    var category = this.collection.parent;
    this.categoryEl.innerHTML = category.name;
    this.categoriesDropdown.innerHTML = templates.lightbox.categories({ 
      categories: category.event.categories.models,
      active: category,
      lightbox: this,
    });
    
    this.updateCategoriesPositioning();
  },
  updateCategoriesPositioning: function () {
    var categoryBox = this.categoryEl.getBoundingClientRect();
    var toRight = app.state.width - categoryBox.left;
    
    var spans = this.categoriesDropdown.querySelectorAll('span');
    var width = 0;
    var w;
    for (var i = 0; i < spans.length; i++) {
      w = spans[i].offsetWidth;
      if (w > width) width = w;
    }
    
    width += 48; // padding
    if (width > toRight) {
      this.categoriesDropdown.style.left = (toRight - width) +'px';
    }
    else {
      this.categoriesDropdown.style.left = 0;
    }
  },
  
  
  /*==========================================================================*\
    Update music player with current category's tracks
  \*==========================================================================*/
  updateMusic: function () {
    var category = this.collection.parent;
    this.hasMusic = !!category.music_tracks.length;
    if (this.hasMusic) {
      this.player.setTracks(category.music_tracks);
      if (this.music) this.player.play();
    }
    else {
      if (this.music) this.toggleMusic();
    }
  },
  
  
  /*==========================================================================*\
    Handle browser resize
  \*==========================================================================*/
  resize: function () {
    if (!this.displayed) return;
    var i;
    
    if (this.prev) { // update all currently handled slides
      for (i = 0; i < this.prev.length; i++) {
        this.prev[i].resize();
      }
      for (i = 0; i < this.next.length; i++) {
        this.next[i].resize();
      }
      this.current.resize();
    }
    
    this.updateDirectionalAreas();
    this.updateCategoriesPositioning();
  },
  
  
  
  /*==========================================================================*\
    Showing and hiding
  \*==========================================================================*/
  show: function () {
    if (this.displayed) return;
    this.displayed = true;
    this.el.classList.add('displayed');
    // this.current.showBuyForm();
  },
  hide: function () {
    if (!this.displayed) return;
    app.router.lightboxMode = false;
    app.state.lightboxMode = false;
    this.displayed = false;
    if (this.slideshow) this.toggleSlideshow();
    fullscreen.release();
    
    this.el.classList.remove('displayed');
  },
  close: function () {
    if (this.buyFormDisplayed) return;
    var params = app.history.latestConfig;
    console.log('close', params);
    if (params.buy || params.crop) {
      return app.navigate(app.history.getLatestPage().url);
    }
    
    // app.navigate(this.backTo);
    // var photo = this.current && this.current.model;
    var cid = this.current.model.cat_id;
    var eid = this.current.model.eid;
    app.navigate('events/'+ eid +'/'+ cid);
    
  },
  
  
  
  /*==========================================================================*\
    Navigating back and forward
  \*==========================================================================*/
  forward: function (options) {
    if (!this.displayed || this.noArrows) return;
    options = options || {};
    
    if (options.preventDefault) options.preventDefault();
    
    if (this.buyFormDisplayed) return;
    
    if (this.current.model.collection !== this.next[0].model.collection) {
      this.collection = this.next[0].model.collection;
      this.updateCategories();
      
      this.updateMusic();
      // app.navigate(this.next[0].model.app_url, { trigger: true });
      // return;
    }
    
    if (!options.crossFade) {
      this.el.classList.remove('cross-fade');
    }
    
    var oldFrame = this.current;
    
    if (!options.hide) {
      if (this.prev.length) {
        this.prev[this.prev.length-1].remove();
        this.prev.pop();
      }
      this.prev.unshift(this.current);
    }
    
    
    this.current = this.next.shift();
    this.colorsSelector = this.current.model.pricing.colors_count > 1;
    
    this.preloadMore();
    
    var newFrame = this.current;
    // if (options.crossFade) { // defer to make sure cross-fade is applied
    //   this.writeAfter(30, function () {
    //     oldFrame.el.classList.remove('current');
    //     newFrame.el.classList.add('current');
    //   });
    // }
    // else {
      oldFrame.el.classList.remove('current');
      newFrame.el.classList.add('current');
    // }
    
    
    this.updateCount();
    this.updateDirectionalAreas();
    
    app.router.navigate(this.current.model.app_url, { trigger: false });
    
    if (this.slideshow) {
      clearTimeout(this.slideshowTimer);
      this.slideshowTimer = setTimeout(this.slideshowCallback, 
          this.slideshowSpeed + (options.crossFade ? 1000 : 0));
    }
  },
  back: function (options) {
    if (!this.displayed || this.noArrows) return;
    options = options || {};
    if (options.preventDefault) options.preventDefault();
    
    if (this.buyFormDisplayed) return;
    
    if (this.current.model.collection !== this.prev[0].model.collection) {
      this.collection = this.prev[0].model.collection;
      this.updateCategories();
      
      this.updateMusic();
    }
  
    
    // this.el.classList[options.crossFade ? 'add' : 'remove']('cross-fade');
    this.current.el.classList.remove('current');
    
    if (this.next.length) {
      this.next[this.next.length-1].remove();
      this.next.pop();
    }
    this.next.unshift(this.current);
    
    this.current = this.prev.shift();
    this.colorsSelector = this.current.model.pricing.colors_count > 1;
    
    if (!this.prev.length) this.preloadMore();
    else this.updateSlides();
    
    this.current.el.classList.add('current');
    
    this.updateCount();
    this.updateDirectionalAreas();
    
    app.router.navigate(this.current.model.app_url, { trigger: false });
    
    if (this.slideshow) {
      clearTimeout(this.slideshowTimer);
      this.slideshowTimer = setTimeout(this.slideshowCallback, 
          this.slideshowSpeed + (options.crossFade ? 1000 : 0));
    }
  },
  
  
  /*==========================================================================*\
    Updating the DOM
  \*==========================================================================*/
  updateSlides: function () { // keep only 3 slides in the DOM 
    var i;
    for (i = 0; i < this.prev.length; i++) {
      if (i === 0 && !this.prev[i].el.parentNode) {
        this.slides.appendChild(this.prev[i].el);
      }
      else if (i > 0 && this.prev[i].el.parentNode) {
        this.slides.removeChild(this.prev[i].el);
      }
    }
    for (i = 0; i < this.next.length; i++) {
      if (i === 0 && !this.next[i].el.parentNode) {
        this.slides.appendChild(this.next[i].el);
      }
      else if (i > 0 && this.next[i].el.parentNode) {
        this.slides.removeChild(this.next[i].el);
      }
    }
    if (this.current && !this.current.el.parentNode) {
      this.slides.appendChild(this.current.el);
    }
    
    if (ua.mobile) {
      clearTimeout(this.mouseRestTimer);
      this.mouseRestTimer = setTimeout(this.onMouseRest, this.mouseRestSpeed);
    }
  },
  
  
  /*==========================================================================*\
    Photos Preloading
  \*==========================================================================*/
  preloadMore: function (options) { // preload a photo if needed
    options = options || {};
    if (!this.displayed && !options.inBackground) return;
    if (this.preloading && this.prev.length && this.next.length) {
      return this.updateSlides();
    }
    // var which = options.which || 'next';
    var which = !this.next.length || this.prev.length ? 'next' : 'prev';
    if (which === 'next' && (this.next.length >= 45 || 
        this.next.length >= this.collection.length - 1)) {
      this.preloading = false;
      return this.updateSlides();
    }
    this.preloading = true;
    
    var list = this[which];
    var farthest = list.length ? list[list.length-1] : this.current;
    var model = farthest.model[which === 'next' ? 
                                  'nextAroundVisible' : 'prevAroundVisible'];
    var photo = new PhotoView({
      model: model,
      parent: this,
    });
    list.push(photo);
    
    this.updateSlides();
    
    if (this.slideshow && this.slidePending) {
      this.slideshowCallback();
    }
  },
 
  
  
  
  /*==========================================================================*\
    UI Updates
  \*==========================================================================*/
  updateCartIcon: function () {
    var filled = this.event && !this.event.cart.is_empty;
    this.query('.top-right a.cart').classList.toggle('filled', filled);
  },
  updateCount: function () { // list counter
    // this.count.innerHTML = (this.collection.indexOf(this.current.model) + 1) +
    //     ' / '+ this.collection.length;
    // console.log('vis pos', this.current.model.position);
    this.count.innerHTML = (this.current.model.position + 1) +
        ' / '+ this.collection.parent.visible_count;
    
    this.noCount = !!this.current.model.hidden;
    this.noArrows = this.current.model.hidden ||
        (this.collection.parent === this.event.favorites || 
        this.event.categories.length === 1) && this.collection.length <= 1;
  },
  updateDirectionalAreas: function () { // update coverage of prev/next areas
    var prevWidth = (app.state.width - this.current.imageWidth) / 2;
    if (prevWidth < 43) prevWidth = 43;
    this.prevButton.style.right = (app.state.width - prevWidth) + 'px';
    this.nextButton.style.left = prevWidth + 'px';
  },
  
  
  
  /*==========================================================================*\
    Cover lightbox with transparent cover with a specific cursor type
  \*==========================================================================*/
  
  
  // render: function () {
  // },
});

