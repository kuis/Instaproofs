/*==========================================================================*\
  This root view holds all content that goes into <body>
  It's initialized and rendered right away on app load
  
  Note: scroll handling is present both here and in base-page.js.
  When transitions are enabled pages are overflow:auto, so scrolling is 
  handled by pages themselves.
\*==========================================================================*/
"use strict";

var app = require('app');
var BaseView = require('app/base/base-view');
var debounce = require('lodash.debounce');

var PageSwitcher = require('app/util/page-switcher/page-switcher');
var fs = require('app/util/fullscreen/fullscreen');
var ua = require('app/util/ua/ua'); 
var NavView = require('app/nav/nav');
var SplashView = require('app/splash/splash');
var LightboxNotices = require('app/notice/lightbox-notices');

require('fastclick')(document.body);

module.exports = BaseView.extend({
  viewType: 'main-view',
  
  scrollTop: 0, // currently handled scroll position
  newScrollTop: 0, // about to be handled scroll position
  scrollTimer: null, // timer for toggling scrolling/not-scrolling global class
  scrollRaf: null, // requestAnimationFrame ID for scroll handler
  
  props: {
    currentPage: 'state',
    
    dipslaySubscribeCheckbox: ['boolean', true, true],
    largeLogoVisible: ['boolean', true, true],
    // history: ['array', true], // navigation history 
  },
  
  handleEvent: function (e) {
    switch (e.type) {
      case 'scroll': 
        if (!this.scroll.pending) {
          this.scroll.pending = this.read(this.readScroll);
        }
        break;
    }
  },
  
  initialize: function () {
    BaseView.prototype.initialize.apply(this, arguments);

    this.cacheElements({
      pagesContainer: 'main',
      overlays: '#overlays'
    });
    
    this.lightboxNotices = new LightboxNotices();
    document.body.insertBefore(this.lightboxNotices.el, 
                               document.getElementById('splash'));
    
    
    this.dipslaySubscribeCheckbox = app.config.display_opt_in;
    this.listenTo(app.config, 'change:display_opt_in', function () {
      this.dipslaySubscribeCheckbox = app.config.display_opt_in;
    });



    this.scroll = {
      top: 0, // last registered or handled scroll position
      lastTop: 0, // previously handled scroll position
      bottom: 0, // last registered or handled scroll distance to bottom
      max: 0, // maximum amount of scroll possible with current content
      pending: null, // schedule ID if scroll read or handl is scheduled
      hiddenNav: false, // whether header and footer bars should be hidden
    };
    
    this.bindMethods('readScroll', 'handleScroll', 'removeScrollingClass', 
        'onScrollingAction');
    // this.readScroll = this.readScroll.bind(this);
    // this.handleScroll = this.handleScroll.bind(this);
    // this.removeScrollingClass = this.removeScrollingClass.bind(this);
    
    // var app = window.app;
    // this.el.classList.add(ua.className);
    this.el.classList.add.apply(this.el.classList, ua.classList);
    this.el.classList.toggle('fullscreen-available', fs.supported);
    // document.documentElement.className = ua.className;
    
    // init the fixed header
    this.nav = new NavView({ el: this.query('nav')});
    
    // init and configure our page switcher
    this.pageSwitcher = new PageSwitcher(this.pagesContainer);
    
    localStorage.removeItem('skipSplash');
    if (app.storage.skipSplash !== '1') {
      this.splashView = new SplashView({ el: this.query('#splash')});
      // localStorage.skipSplash = '';
    }
    
    // this marks the correct nav item selected
    this.listenTo(app.router, 'page', this.handleNewPage);
    
    if (app.storage.noTransitions !== '') {
      this.model.noTransitions = true;
    }
    else {
      this.model.noTransitions = ua.mobile || !!app.storage.noTransitions;
      // this.model.noTransitions = !!app.storage.noTransitions;
    }
    
    // this.model.noTransitions = false;
    if (this.model.noTransitions) {
      window.addEventListener('scroll', this, false);
    }
    
    // window.addEventListener('DOMMouseScroll', this.onScrollingAction, false);
    // window.onwheel = this.onScrollingAction; // modern standard
    // window.onmousewheel = document.onmousewheel = this.onScrollingAction;
    // // window.ontouchmove  = this.onScrollingAction; // mobile
    // document.onkeydown  = this.onScrollingAction;
    
    
    // this.model.darkMode = !!app.storage.darkMode;
    this.model.darkMode = false;
    
    this.handleNewNotices = debounce(this.handleNewNotices, 50);
    this.handleRemovedNotices = debounce(this.handleRemovedNotices, 50);
    
    this.listenTo(app.notices, 'add', this.handleNewNotices);
    this.listenTo(app.notices, 'remove', this.handleRemovedNotices);
    
    this.listenTo(app.config.photographer, 'change:name', this.updateTitle);

    // Set state.isHome to true on home page
    app.router.on('route', function (route, params) {
      app.state.isHome = route === 'home';
    });
  },
  
  events: {
    'click a[href]': 'onLinkClick',
    'click nav, #footer': 'onNavClick',
    // mousemove: 'onMouseMove',
  },
  
  bindings: {
    'model.pageTransition': { type: 'class' },
    'model.splashState': { type: 'class' },
    'model.hiddenNav': { 
      type: 'booleanClass',
      name: 'hidden-nav',
    },
    'model.noPointerEvents': { 
      type: 'booleanClass',
      name: 'no-pointer-events',
    },
    'model.noTransitions': { 
      type: 'booleanClass',
      yes: 'no-transitions',
      no: 'transitions-enabled',
    },
    'model.darkMode': { 
      type: 'booleanClass',
      yes: 'dark-mode',
      no: 'light-mode',
    },
    
    'model.scrolling': { 
      type: 'booleanClass',
      yes: 'scrolling',
      no: 'not-scrolling',
    },
    
    'model.fullscreen': { 
      type: 'booleanClass',
      name: 'fullscreen',
    },
    'model.currentEventId': { 
      type: 'booleanClass',
      name: 'inside-event',
    },
    'model.noticesPresent': { 
      type: 'booleanClass',
      name: 'notices-present',
    },
    'model.noticesDisplayed': { 
      type: 'booleanClass',
      name: 'notices-displayed',
    },
    'model.lightboxMode': { 
      type: 'booleanClass',
      name: 'lightbox-displayed',
    },

    'model.loading': {
      type: 'booleanClass',
      name: 'loading'
    },
    
    dipslaySubscribeCheckbox: {
      type: 'booleanClass',
      name: 'display-subscribe-checkbox',
    },
    largeLogoVisible: {
      type: 'booleanClass',
      name: 'large-logo-visible',
    },
  },
  
  handleNewNotices: function () {
    var i;
    var notice;
    var discarded = app.storage.discardedNotices;
    var display = false;
    discarded = discarded ? JSON.parse(discarded) : [];
    for (i = 0; i < app.notices.length; i++) {
      notice = app.notices.at(i);
      if (discarded.indexOf(notice.id) < 0) display = true;
    }
    this.model.noticesPresent = true;
    if (display) this.model.noticesDisplayed = true;
  },
  handleRemovedNotices: function () {
    this.model.noticesPresent = !!app.notices.length;
  },
  hideNotices: function () {
    var i;
    var notice;
    var discarded = app.storage.discardedNotices;
    discarded = discarded ? JSON.parse(discarded) : [];
    for (i = 0; i < app.notices.length; i++) {
      notice = app.notices.at(i);
      if (discarded.indexOf(notice.id) < 0) discarded.push(notice.id);
    }
    app.storage.discardedNotices = JSON.stringify(discarded);
    this.model.noticesDisplayed = false;
  },

  handleNewPage: function (view, id, url) {
    this.pageSwitcher.set(view);
  },
  
  updateTitle: function () {
    if (app.config.photographer.name) {
      app.title = app.config.photographer.name;
    }
    var pageTitle = this.currentPage && this.currentPage.pageTitle;
    var dictionary;
    if (this.currentPage && !this.currentPage.noTitleTranslation) {
      dictionary = this.currentPage.getDictionary();
    }
    app.setTitle(pageTitle, dictionary);
  },
  
  readScroll: function () {
    this.scroll.pending = false;
    if (this.model.lightboxMode) return;
    var top = window.pageYOffset;
    if (top === this.scroll.top) return;
    this.scroll.lastTop = this.scroll.top;
    this.scroll.top = top;
    this.scroll.max = document.body.scrollHeight - this.model.height;
    var bottom = this.scroll.bottom = this.scroll.max - top;
    this.scroll.hiddenNav = top > this.scroll.lastTop && top > 1 && bottom > 1
                            && top + bottom >= 1000;
                    
    var page = this.currentPage;
    
    page.scroll.top = this.scroll.top;
    page.scroll.lastTop = this.scroll.lastTop;
    page.scroll.bottom = this.scroll.bottom;
    page.scroll.max = this.scroll.max;
    
    if (page.onScroll || page.hasHeaderLogo || 
        page.onNearBottom && bottom <= page.nearBottomDistance || 
        this.scroll.hiddenNav !== app.state.hiddenNav) {
      this.scroll.pending = this.write(this.handleScroll, 'high');
    }
    
    this.model.scrolling = true;
    clearTimeout(this.scrollTimer);
    this.scrollTimer = setTimeout(this.removeScrollingClass, 250);
  },
  handleScroll: function () { // handle new scroll position
    this.scroll.pending = false;
    if (!this.currentPage) return;
    var page = this.currentPage;
    
    if (page.onNearBottom && this.scroll.bottom <= page.nearBottomDistance) {
      page.onNearBottom(this.scroll.bottom, this.scroll.top);
    } else {
      if (page.fixedFooter1 !== undefined)
        page.fixedFooter1.el.classList.remove('hidden');
    }



    app.state.hiddenNav = this.scroll.hiddenNav;
    if (page.onScroll) page.onScroll(this.scroll.top, this.scroll.lastTop);
    page.updateHeaderLogo();
    
    page.scroll.top = this.scroll.top;
  },
  removeScrollingClass: function () {
    this.model.scrolling = false;
  },
  
  restoreScroll: function (page) {
    if (!this.model.noTransitions) return;
    page = page || this.currentPage;
    var top = page.scroll.top || 0;
    document.documentElement.scrollTop = top;
    document.body.scrollTop = top;
  },
  
  
  /*==========================================================================*\
    Scroll to top when clicking an empty area on fixed header or footer
  \*==========================================================================*/
  onNavClick: function (e) {
    if (e.target.closest('a')) return;
    if (!app.state.noTransitions) {
      if (this.currentPage && this.currentPage.scroller) {
        this.currentPage.scroller.scrollTop = 0;
      }
    }
    else {
      document.documentElement.scrollTop = 0;
      document.body.scrollTop = 0;
    }
  },
  
  
  
  /*==========================================================================*\
    Handle internal links 
  \*==========================================================================*/
  onLinkClick: function (e) {
    var link = e.target;
    while (link && link.nodeName !== 'A') link = link.parentNode;
    if (!link) return;
    if (link.host !== window.location.host) return; // only use local URLs
    if (e.button === 1) return; // ignore middle-clicks 
    if (e.ctrlKey || e.shiftKey || e.altKey || e.metaKey) return; // no mods
    if (link.getAttribute('bypass')) return; // explicitly bypassed links 
    
    e.preventDefault();
    var hashIndex = link.href.indexOf('#');
    app.navigate(hashIndex > -1 ? link.href.substr(hashIndex+1) : '');
    return false;
  },
  
  onScrollingAction: function (e) {
    if (!e || !this.model.lightboxMode) return;
    
    var keys = {
      38: 1, // up
      40: 1, // down
      32: 1, // spacebar
      33: 1, // pagedown
      34: 1, // pageup
      35: 1, // end
      36: 1, // home
    };
    if (e.type === 'keydown') {
      if (keys[e.keyCode] && e.preventDefault) {
        e.preventDefault();
        e.returnValue = false;
      }
    }
    if (e.preventDefault) {
      e.preventDefault();
      e.returnValue = false; 
    }
  },
  
});
