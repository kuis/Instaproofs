"use strict";

var AmpersandModel = require('ampersand-model');
var BaseModel = require('./base-model');
var moment = require('moment');

var Model = BaseModel.extend({
  props: {
    name: 'string',
    birthday: ['moment', true],
  },
});

describe('Model', function () {
  beforeEach(function () {
    this.model = new Model({
      name: 'John Doe',
    });
  });
  
  it('extends ampersand-model', function () {
    expect(this.model).to.be.an.instanceof(AmpersandModel);
  });
  
  it('incorporates .bindMethods() helper', function () {
    expect(this.model.bindMethods).to.be.a('function');
  });
  
  it('rejects properties not defined in `props`, throwing a TypeError', 
                                                                  function () {
    var useUndefinedProp = function () {
      return new Model({ company_name: 'Fender' });
    };
    expect(useUndefinedProp).to.throw(TypeError);
  });
  
  describe('defines a `moment` data type that', function () {
    
    it('presents date/time values as moment.js instances', function () {
      this.model.birthday = '1942-11-27T20:30:32.334Z';
      expect(this.model.birthday._isAMomentObject).to.be.true;
    });
    
    it('can be set to `false` for no value', function () {
      this.model.birthday = false;
      expect(this.model.birthday).to.be.false;
    });
    
    it('defaults to `false` for no value', function () {
      expect(this.model.birthday).to.be.false;
    });
    
    it('is immutable', function () {
      this.model.birthday = '1942-11-27';
      this.model.birthday.date(20);
      expect(this.model.birthday.date()).to.equal(27);
      
      // moment's manipulations can be used as follows 
      this.model.birthday = this.model.birthday.date(20);
      expect(this.model.birthday.date()).to.equal(20);
    });
    
    it('can be set with a moment.js instance', function () {
      this.model.birthday = moment('1942-11-27');
      expect(this.model.birthday._isAMomentObject).to.be.true;
      expect(this.model.birthday.date()).to.equal(27);
    });
    
    it('can be set with unix time in milliseconds', function () {
      this.model.birthday = -855100800000; // 1942-11-27
      expect(this.model.birthday._isAMomentObject).to.be.true;
      expect(this.model.birthday.date()).to.equal(27);
    });
    
    it('can be set with ISO 8601 string', function () {
      this.model.birthday = '1942-11-27';
      expect(this.model.birthday._isAMomentObject).to.be.true;
      expect(this.model.birthday.date()).to.equal(27);
    });
  });
});
  
