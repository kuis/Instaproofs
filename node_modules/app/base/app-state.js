/*==========================================================================*\
  Global state of the app including stuff like dimensions
\*==========================================================================*/
"use strict";

var app = require('app');
var xhr = require('xhr');
var debounce = require('lodash.debounce');

module.exports = require('app/base/base-model').extend({
  props: {
    
    // set to true when global data such as config and photographer's info
    // has been loaded 
    bootstrapped: ['boolean', true, false],

    // set to true when home page
    isHome: ['boolean', true, false],
    
    width: 'number',
    height: 'number',
    contentWidth: 'number', // width of standard content blocks with width limit
    contentHeight: 'number', // window height minus nav height
    
    fullscreen: ['boolean', true, false], // the app is currently fullscreen
    
    hiddenNav: ['boolean', true, false], // whether fixed nav should be hidden
    
    scrolling: ['boolean', true, false], // whether user currently scrolling

    loading: ['boolean', true, false], // whether app is currently loading
    
    pageTransition: 'string', // kind of next page transition (back, fwd etc.)
    
    // pointer events are disabled (e.g. during scroll)
    noPointerEvents: ['boolean', true, false], 
    
    // a mode with no page transitions and a single global scroll
    noTransitions: ['boolean', true, false],
    
    // Dark nav bars mode
    darkMode: ['boolean', true, false], 
    
    splashState: 'string', // 'locked', 'unlocked', or '' 
    
    // list of URLs for images that has been already loaded 
    loadedImages: {
      type: 'object',
      default: function () { return {}; }
    },
    
    currentEventId: 'any',
    
    lightboxMode: ['boolean', true, false], // whether lightbox is displayed 
    
    // side-wide notices
    noticesPresent: ['boolean', true, false],
    noticesDisplayed: ['boolean', true, false],
    
    // currently active events search string
    eventsSearchString: ['string', true, ''],


    // whether user if offline. one of 3 values:
    //
    // false
    // 'browser-reported' - browsers says it's offline
    // 'detected' - detected by our own checks
    offline: ['any', true, false],
  },
  
  initialize: function () {
    window.addEventListener('resize', this.resize.bind(this));
    this.resize();

    this.reloadImages = debounce(this.reloadImages, 1000, {
      leading: true,
      trailing: false,
    });
    
    var self = this;
    if (window.MutationObserver) { // catch resizing on scrollbar show/hide
      var observer = new MutationObserver(function() {
        self.resize();
      });
      observer.observe(document.documentElement, {
        attributes: true,
        subtree: false,
        childList: false,
        characterData: false,
      });
    }


    // monitor connectivity status =============================================
    window.addEventListener('offline', function() {
      console.log('offline reported');
      var oldValue = self.offline;
      self.offline = 'browser-reported';
      if (oldValue === false) app.trigger('offline');
    }, false);
    window.addEventListener('online', function() {
      console.log('online reported');
      if (self.offline === 'browser-reported') self.offline = false;
    }, false);

    this.listenTo(this, 'change:offline', function () {
      console.log('change:offline', this.offline, arguments);
      if (!this.offline) {
        app.state.reloadImages();
        app.trigger('online');
      }
    });

    // check for connection if connectivity propblems detected
    setInterval(function () {
      if (self.offline) {
        xhr.get(app.apiUrl, function (err, resp, body) {
          if (!err && body) self.offline = false;
        });
      }
    }, 1000);
  },

  setOffline: function () {
    var oldValue = this.offline;
    this.offline = 'detected';
    if (oldValue === false) app.trigger('offline');
  },

  reloadImages: function () {
    app.trigger('reload-images');
  },
  
  resize: function () { // window resize handler
    var i, keys = ['width', 'height', 'contentWidth', 'contentHeight'];
    var oldValues = {};
    for (i = 0; i < keys.length; i++) {
      oldValues[keys[i]] = this[keys[i]];
    }
    
    this.width = document.documentElement.clientWidth;
    this.height = document.documentElement.clientHeight;
    this.contentHeight = this.height - 
        (this.width <= 750 || this.height <= 800 ? 44 : 80);
    this.contentWidth = this.width >= 1304 ? 1200 
                                           : Math.round(this.width * 0.92);
    
    for (i = 0; i < keys.length; i++) {
      if (oldValues[keys[i]] !== this[keys[i]]) {
        this.trigger('resize');
        break;
      }
    }
    
    return this;
  },
});
