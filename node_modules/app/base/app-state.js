/*==========================================================================*\
  Global state of the app including stuff like dimensions
\*==========================================================================*/
"use strict";

module.exports = require('app/base/base-model').extend({
  props: {
    
    // set to true when global data such as config and photographer's info
    // has been loaded 
    bootstrapped: ['boolean', true, false],

    // set to true when home page
    isHome: ['boolean', true, false],
    
    width: 'number',
    height: 'number',
    contentWidth: 'number', // width of standard content blocks with width limit
    contentHeight: 'number', // window height minus nav height
    
    fullscreen: ['boolean', true, false], // the app is currently fullscreen
    
    hiddenNav: ['boolean', true, false], // whether fixed nav should be hidden
    
    scrolling: ['boolean', true, false], // whether user currently scrolling

    loading: ['boolean', true, false], // whether app is currently loading
    
    pageTransition: 'string', // kind of next page transition (back, fwd etc.)
    
    // pointer events are disabled (e.g. during scroll)
    noPointerEvents: ['boolean', true, false], 
    
    // a mode with no page transitions and a single global scroll
    noTransitions: ['boolean', true, false],
    
    // Dark nav bars mode
    darkMode: ['boolean', true, false], 
    
    splashState: 'string', // 'locked', 'unlocked', or '' 
    
    // list of URLs for images that has been already loaded 
    loadedImages: {
      type: 'object',
      default: function () { return {}; }
    },
    
    currentEventId: 'any',
    
    lightboxMode: ['boolean', true, false], // whether lightbox is displayed 
    
    // side-wide notices
    noticesPresent: ['boolean', true, false],
    noticesDisplayed: ['boolean', true, false],
    
    // currently active events search string
    eventsSearchString: ['string', true, ''],
    photosSearchString: ['string', true, '']
  },
  
  initialize: function () {
    window.addEventListener('resize', this.resize.bind(this));
    this.resize();
    
    var self = this;
    if (window.MutationObserver) { // catch resizing on scrollbar show/hide
      var observer = new MutationObserver(function() {
        self.resize();
      });
      observer.observe(document.documentElement, {
        attributes: true,
        subtree: false,
        childList: false,
        characterData: false,
      });
    }
  },
  
  resize: function () { // window resize handler
    var i, keys = ['width', 'height', 'contentWidth', 'contentHeight'];
    var oldValues = {};
    for (i = 0; i < keys.length; i++) {
      oldValues[keys[i]] = this[keys[i]];
    }
    
    this.width = document.documentElement.clientWidth;
    this.height = document.documentElement.clientHeight;
    this.contentHeight = this.height - 
        (this.width <= 750 || this.height <= 800 ? 44 : 80);
    this.contentWidth = this.width >= 1304 ? 1200 
                                           : Math.round(this.width * 0.92);
    
    for (i = 0; i < keys.length; i++) {
      if (oldValues[keys[i]] !== this[keys[i]]) {
        this.trigger('resize');
        break;
      }
    }
    
    return this;
  },
});
