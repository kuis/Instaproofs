/*==========================================================================*\
  A photo's purchase option (size) in cart 
\*==========================================================================*/
"use strict";

var app = require('app');
var Parent = require('app/models/base-model');
var Addon = require('./cart-addon-model');

// var Addon = Parent.extend({
//   idAttribute: 'addon_id',
//   props: {
//     id: 'number', // ID of the addon
//     oid: 'number', // selected option ID
//   },
//   derived: {
//     addon: {
//       fn: function () {
//         return app.purchaseAddons.get(this.id);
//       },
//     },
//   },
// });

var Addons = require('app/models/base-collection').extend({
  model: Addon,
});

module.exports = Parent.extend({
  idAttribute: 'size_id',
  props: {
    size_id: 'number',
    qty: 'number',
    crop: 'object',
    // addons: 'object',
  },
  
  collections: {
    addons: Addons,
  },
  
  derived: {
    size: {
      fn: function () {
        return app.purchaseOptions.get(this.size_id);
      },
    },
    photo: {
      fn: function () { return this.cart_photo.photo; }
    },
    photo_option: {
      fn: function () {
        return this.photo.buyOptions.get(this.size_id +'-'+ 
                                         this.cart_photo.color_id);
      },
    },
    
    price: {
      deps: ['qty', 'addons'],
      cache: false,
      fn: function () {
        // var photo = this.cart_photo.photo;
        // var option = photo.buyOptions.get(this.size_id);
        var option = this.photo_option;
        var singlePrice = option.price;
        // var singlePrice = option.discounted_price;
        for (var i = 0; i < this.addons.length; i++) {
          singlePrice += this.addons.at(i).price;
        }
        return singlePrice * (this.size.no_qty ? 1 : this.qty);
      },
    },
    discounted_price: {
      deps: ['qty', 'addons'],
      cache: false,
      fn: function () {
        // var photo = this.cart_photo.photo;
        // var option = photo.buyOptions.get(this.size_id);
        var option = this.photo_option;
        // var singlePrice = option.price;
        var singlePrice = option.discounted_price;
        for (var i = 0; i < this.addons.length; i++) {
          singlePrice += this.addons.at(i).price;
        }
        return singlePrice * (this.size.no_qty ? 1 : this.qty);
      },
    },
    
    cart_photo: {
      fn: function () {
        return this.collection.parent;
      },
    },
    
    cart: {
      fn: function () {
        return this.cart_photo.cart;
      },
    },
    
    shipping_price: {
      deps: ['price'],
      cache: false,
      fn: function () {
        return this.size.shipping.get(this.cart.shipping_type).price;
      },
    },
  },
  
  initialize: function () {
    this.listenTo(this, 'change:price', this.onPriceChange);
  },
  
  onPriceChange: function () {
    if (this.cart) {
      this.cart.updateSummary();
      this.cart.save();
    }
  },
  
  priceForOption: function (oid) {
    var option = this.options[oid];
  },
  
  // parse: function (res) {
  // },
  
});
