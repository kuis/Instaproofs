/*==========================================================================*\
  Shopping Cart
\*==========================================================================*/
"use strict";

var app = require('app');
var Collection = require('app/models/base-collection');
var Parent = require('app/models/base-model');
var PhotosCollection = require('./cart-photos-collection');
var ProductsCollection = require('app/models/base-collection').extend({
  mainIndex: 'cart_item_id',
  indexes: ['pid'],
  model: require('./cart-product-model'),
});

var _ = require('underscore');

module.exports = Parent.extend({
  url: function () {
    var keychain = app.keychain.events.get(this.eid);
    
    var query = '?url=http://demo.instaproofs.com'+
        (keychain && keychain.email ? 
        '&email='+ encodeURIComponent(keychain.email) : '') +
        (keychain && keychain.password ? 
        '&password='+ encodeURIComponent(keychain.password) : '');
        
    return 'http://www.instaproofs.com/api/rest2/cart'+ 
           (this.isNew() ? '' : '/'+this.id) + query;
  },
  props: {
    id: 'number',
    eid: 'number',
    email: 'string',
    mtime: ['number', true, 0], // last modification time
    shipping_type: ['number', true, 1],
  },
  
  collections: {
    photos: PhotosCollection,
    products: ProductsCollection,
  },
  
  session: {
    event_name: 'string',
    subtotal: ['number', true, 0],
    discount: ['number', true, 0],
    shipping_total: ['number', true, 0],
    total: ['number', true, 0],
  },
  
  derived: {
    event: {
      fn: function () {
        return app.eventModels[this.eid];
      },
    },
    is_empty: {
      deps: ['mtime'],
      fn: function () {
        return !this.photos.length && !this.products.length;
      },
    },
    shipping: {
      deps: ['shipping_type'],
      fn: function () {
        return app.shipping.get(this.shipping_type);
      },
    },
  },
  
  initialize: function () {
    // list of all photo IDs in cart (including those addded to products)
    this.allPhotos = new Collection();
    // this.listenTo(this.allPhotos, 'all', function () {
    //   console.log('event', arguments);
    // });
    
    // this.listenTo(this.photos, 'add remove change', this.store);
    this.listenTo(this.event, 'change:complete', function () {
      this.event_name = this.event.name;
    });
    
    this.listenTo(app, 'storage:cart'+this.eid, this.storageCallback);
    
    this.listenTo(this.allPhotos, 'add', function (photo) {
      // console.log('add', photo);
      this.trigger('add:photo:'+ photo.id);
    });
    this.listenTo(this.allPhotos, 'remove', function (photo) {
      this.trigger('remove:photo:'+ photo.id);
    });
    
    // this.listenTo(this, 'change:mtime', function () {
    //   // this.updateSummary();
    //   console.log('CART UPDATED', this.toJSON());
    // });
    
    // this.listenTo(this, 'change', this.updateSummary);
    
    var storedData = app.storage['cart'+this.eid];
    if (storedData) this.set(JSON.parse(storedData));
    
    // this.products.reset();
    
    this.updatePhotosList();
    
    // this.store = _.throttle(this.store, 1000);
    this.save = _.throttle(this.save, 1000);
    
  },
  
  storageCallback: function (newData) {
    newData = JSON.parse(newData);
    if (newData.mtime > this.mtime) {
      this.set(newData);
    }
  },
  
  store: function () {
    // console.log('storing cart', 
    //     JSON.stringify(this.toJSON()).length * 2 + ' bytes');
    // console.log('storing cart', this.toJSON());
    
    this.mtime = Date.now();
    app.storage['cart'+this.eid] = JSON.stringify(this.toJSON());
  },
  
  save: function () {
    this.updateSummary();
    this.updatePhotosList();
    var self = this;
    
    console.log('save cart', this.products);
    
    // var data = this.toJSON()
    // Parent.prototype.save.apply(this, arguments);
    this.sync(this.isNew() ? 'create' : 'update', this, {
      url: this.url(),
      // data: this.toJSON(),
      success: function (resp) {
          if (+resp.status !== 200) return;
        var i, j, product, model, cartProduct, newProduct;
        self.id = resp.data.id;
        for (i = 0; i < resp.data.products.length; i++) {
          product = resp.data.products[i];
          cartProduct = self.products.get(product.cart_item_id);
          if (cartProduct) continue;
          
          newProduct = [];
          for (j = 0; j < self.products.length; j++) {
            model = self.products.at(j);
            if (model.pid === product.pid && model.oid === product.oid &&
                model.qty === product.qty && model.notes === product.notes &&
                model.photos.length === product.photos.length) {
              newProduct.push(model);
            }
          }
          
          // if we don't have a perfect fit - just reset all products 
          if (newProduct.length !== 1) {
            console.log('reset products');
            self.products.set(resp.data.products);
            break;
          }
          newProduct[0].set(product);
        }
      },
    });
    
    this.store();
  },
  
  getShippingCost: function () { // only called from updateSummary
    var finalCost = 0; // final shipping cost
    var i, j, k;
    var photo;
    var product;
    var size;
    var price;
    var maxSizeCost = 0; // max shipping cost for a size 
    var maxAnyCost = 0; // max shipping cost for a size/addon/product option
    var addonsCost = 0; // total addons shipping cost 
    var productsCost = 0; // total products shipping cost 
    
    for (i = 0; i < this.photos.length; i++) {
      photo = this.photos.at(i);
      for (j = 0; j < photo.options.length; j++) {
        size = photo.options.at(j);
        price = size.shipping_price;
        
        if (price > maxSizeCost) maxSizeCost = price;
        if (price > maxAnyCost) maxAnyCost = price;
        
        for (k = 0; k < size.addons.length; k++) {
          price = size.addons.at(k).shipping_price;
          addonsCost += price;
          if (price > maxAnyCost) maxAnyCost = price;
        }
      }
    }
    
    for (i = 0; i < this.products.length; i++) {
      product = this.products.at(i);
      price = product.shipping_price;
      
      if (price > maxAnyCost) maxAnyCost = price;
      
      productsCost += price;
    }
    
    // fixed cost set per shipping method relative to total
    var baseCost = this.shipping.criteria[0].shipping;
    
    var printsTotal = 0; 
    for (i = 0; i < this.photos.length; i++) {
      printsTotal += this.photos.at(i).subtotal;
    }
    for (i = 0; i < this.shipping.criteria; i++) {
      if (app.config.shipping_method === 'order_percent') {
        if (this.subtotal >= this.shipping.criteria[i].total) break;
      }
      else {
        if (printsTotal >= this.shipping.criteria[i].total) break;
      }
      baseCost = this.shipping.criteria[i].shipping;
    }
    
    switch (app.config.shipping_method) {
      case 'prints_ordered': finalCost = maxSizeCost + addonsCost +productsCost;
      break;
      case 'items_ordered': finalCost = maxAnyCost;
      break;
      case 'print_total': finalCost = baseCost + addonsCost + productsCost;
      break;
      case 'order_total': finalCost = baseCost;
      break;
      case 'print_percent': finalCost = printsTotal * baseCost;
        if (finalCost < this.shipping.min) finalCost = this.shipping.min;
        if (finalCost > this.shipping.max) finalCost = this.shipping.max;
        finalCost += addonsCost + productsCost;
      break;
      case 'order_percent': 
        finalCost = this.subtotal * baseCost;
        if (finalCost < this.shipping.min) finalCost = this.shipping.min;
        if (finalCost > this.shipping.max) finalCost = this.shipping.max;
      break;
    }
    
    
    
    return finalCost;
  },
  
  updatePhotosList: function () {
    var i, j, id;
    var photos = [];
    var index = {};
    for (i = 0; i < this.photos.length; i++) {
      id = this.photos.models[i].pid;
      if (!index[id]) {
        photos.push({ id: id });
        index[id] = true;
      }
    }
    for (i = 0; i < this.products.length; i++) {
      for (j = 0; j < this.products.models[i].photos.length; j++) {
        id = this.products.models[i].photos.models[j].pid;
        if (!index[id]) {
          photos.push({ id: id });
          index[id] = true;
        }
      }
    }
    
    this.allPhotos.set(photos);
  },
  
  updateSummary: function () {
    var i;
    var subtotal = 0; 
    for (i = 0; i < this.photos.length; i++) {
      subtotal += this.photos.at(i).subtotal;
    }
    for (i = 0; i < this.products.length; i++) {
      subtotal += this.products.at(i).price;
    }
    this.subtotal = subtotal;
    
    this.shipping_total = this.getShippingCost();
    this.total = subtotal - this.discount + this.shipping_total;
  },
  
  // parse: function (res) {
  //   // Parent.parse.apply(this, arguments);
  // },
  
});
