/*==========================================================================*\
  A Pricing Template
\*==========================================================================*/
"use strict";

var app = require('app');
var Parent = require('app/models/base-model');

module.exports = Parent.extend({
  extraProperties: 'ignore',
  idAttribute: 'pricing_id',
  props: {
    'pricing_id': ['number', true, 0],    
     
    // Indicates whether images associated with this 
    // template can be added to other products    
    'add_to_product': ['boolean', true, true], 
     
    // none|compound|fixed: determines the type of bulk pricing 
    // available with this pricing template
    'bulk_pricing_type': ['string', true, 'none'],
    
    'sizes': 'array',
      // array [
      //   {
      //     'size_id':      [int, true, 0],     // The size ID
      //     'variants':     array [
      //       {
      //         'color_id':     [int, true, 0],     // The color ID
      //         'price':        [int, true, 0],     //The price of the size/color combination, in cents
      //         'bulk_pricing'  array [
      //         {
      //           'qty':  [int, true, 0], // The qty to be purchased before the price quicks in
      //           'price' [int, true, 0], // The discounted price for purchasing in bulk, in cents
      //         }
      //     ],
      //   }
      // ]
  },
  
  collections: {
    // addons: AddonsCollection,
  },
  
  derived: {
    colors: {
      fn: function () {
        var i, j, size, variant;
        var colors = {};
        for (i = 0; i < this.sizes.length; i++) {
          size = this.sizes[i];
          for (j = 0; j < size.variants.length; j++) {
            variant = size.variants[j];
            if (!colors[variant.color_id]) colors[variant.color_id] = [];
            // var bp1 = Math.floor(variant.price * 0.8 / 100) * 100;
            // var bp2 = Math.floor(variant.price * 0.7 / 100) * 100;
            // if (bp1 === bp2) bp2 = bp1 - 50;
            // if (bp2 < 0) bp2 = 20;
            colors[variant.color_id].push({
              color_id: variant.color_id,
              size_id: size.size_id,
              price: variant.price,
              bulk_pricing: variant.bulk_pricing,
              // bulk_pricing: variant.bulk_pricing.length ? variant.bulk_pricing :
              //     [{
              //       "qty": 2,
              //       "price": bp1,
              //     },
              //     {
              //       "qty": 5,
              //       "price": bp2,
              //     }],
            });
          }
        }
        
        return colors;
      },
    },
    colors_count: {
      fn: function () {
        return Object.keys(this.colors).length;
      },
    }
  },
  
  // parse: function (data) {
  // },
  
});
