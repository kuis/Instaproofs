/*==========================================================================*\
  A product in cart 
\*==========================================================================*/
"use strict";

var app = require('app');
var Parent = require('app/models/base-model');
var _ = require('underscore');

var Options = require('app/models/base-collection').extend({
  mainIndex: 'size_id',
  model: require('./cart-option-model'),
});

var Photo = require('app/models/base-model').extend({
  idAttribute: 'pid',
  props: {
    cat_id: 'number',     //OPTIONAL value
    pid: 'number',         //photo ID
    color_id: 'number',
  },
  collections: {
    options: Options,
  },
  
  session: {
    
  },
  derived: {
    id: { fn: function () {
      return this.pid+'-'+this.color_id;
    }},
    cart: { fn: function () {
      return this.collection.parent.cart;
    }},
    photo: { fn: function () {
      return this.cart.event.categories.get(this.cat_id).photos.get(this.pid);
    }},
  },
});

var Photos = require('app/models/base-collection').extend({
  mainIndex: 'pid',
  indexes: ['id'],
  model: Photo,
});

module.exports = Parent.extend({
  idAttribute: 'cart_item_id',
  
  props: {
    
    // products must already have a cart_item_id when doing a full-cart update
    cart_item_id: 'number',
    
    pid: 'number', // product ID
    oid: 'number', // product option ID
    qty: 'number',
    notes: 'string',
    
    // options: {
    //   type: 'object',
    //   default: function () {
    //     return {};
    //   },
    // },
  },
  
  collections: {
    photos: Photos,
  },
  
  session: {
    spotsLeft: 'object',
    bootstrapped: ['boolean', true, false],
  },
  
  derived: {
    cart: {
      fn: function () {
        return this.collection.parent;
      },
    },
    product: {
      cache: false,
      fn: function () {
        return app.products.get(this.pid);
      },
    },
    option: {
      cache: false,
      fn: function () {
        return this.product.options.get(this.oid);
      },
    },
    
    capacity: {
      fn: function () {
        var sizes = {};
        var list = this.option.required_size_list.models;
        for (var i = 0; i < list.length; i++) {
          sizes[list[i].id] = list[i].qty;
        }
        return sizes;
      },
    },
    
    fulfilled: {
      cache: false,
      fn: function () {
        for (var i in this.spotsLeft) {
          if (this.spotsLeft[i]) return false;
        }
        return true;
      }
    },
    
    price: {
      deps: ['qty'],
      fn: function () {
        return this.qty * this.option.price;
      },
    },
    
    shipping_price: {
      deps: ['price'],
      cache: false,
      fn: function () {
        console.log(this.cart.shipping_type);
        return this.option.shipping.get(this.cart.shipping_type).price;
      },
    }
  },
  
  // prevent ampersand from sorting the collection 
  isNew: function () { return false; },
  
  initialize: function () {
    this.listenTo(this.cart, 'change:mtime', this.updateCounts);
    this.listenTo(app.state, 'change:bootstrapped', this.updateCounts);
    
    if (app.state.bootstrapped) this.updateCounts();
  },
  
  updateCounts: function () {
    this.bootstrapped = true;
    if (!this.product) return; // bootstrap data is not there yet 
    var spotsLeft = _.clone(this.capacity);
    var i, j, photo, option;
    for (i = 0; i < this.photos.length; i++) {
      photo = this.photos.at(i);
      for (j = 0; j < photo.options.length; j++) {
        option = photo.options.at(j);
        spotsLeft[option.size_id] -= 1;
      }
    }
    this.spotsLeft = spotsLeft;
  },
  
  // parse: function (res) {
  // },
  
});
