/*==========================================================================*\
  A model farvorite photos for an event
\*==========================================================================*/
"use strict";

var app = require('app');
var _ =  require('underscore');

var Photo = require('./photo-model').extend({
  // idAttribute: 'pid',
  // props: {
  //   pid: 'number',
  //   cat_id: 'number',
  // },
  
  // derived: {
  //   photo: { fn: function () { 
  //     return this.collection.parent.event.categories.get(this.cart_id)
  //            .photos.get(this.pid);
  //   }},
    
  //   id: { fn: function () { return this.photo.id; }},
  //   name: { fn: function () { return this.photo.name; }},
  //   img_url: { fn: function () { return this.photo.img_url; }},
  //   width: { fn: function () { return this.photo.width; }},
  //   height: { fn: function () { return this.photo.height; }},
  //   download_url: { fn: function () { return this.photo.download_url; }},
  //   pricing_id: { fn: function () { return this.photo.pricing_id; }},
    
  //   in_cart: { fn: function () { return this.photo.in_cart; }},
  //   in_favorites: { fn: function () { return this.photo.in_favorites; }},
    
  //   eid: { fn: function () { return this.photo.eid; }},
  //   event: { fn: function () { return this.photo.event; }},
  //   app_url: { fn: function () { return this.photo.app_url; }},
  //   buy_url: { fn: function () { return this.photo.buy_url; }},
  //   thumb_url: { fn: function () { return this.photo.thumb_url; }},
  //   micro_url: { fn: function () { return this.photo.micro_url; }},
  //   ratio: { fn: function () { return this.photo.ratio; }},
  //   next: { fn: function () { return this.photo.next; }},
  //   prev: { fn: function () { return this.photo.prev; }},
  //   nextAround: { fn: function () { return this.photo.nextAround; }},
  //   prevAround: { fn: function () { return this.photo.prevAround; }},
  //   pricing: { fn: function () { return this.photo.pricing; }},
  //   buyOptions: { fn: function () { return this.photo.buyOptions; }},
  // },
  
  parse: function (data, options) {
    // console.log('PARSE', arguments);
    if (data.pid) { // convert to photo model
      var collection = (options && options.collection) || this.collection;
      var event = collection.parent.event;
      var photo = event.categories.get(data.cat_id).photos.get(data.pid);
      return photo.toJSON();
    }
    return data;
  },
  toJSON: function () {
    return {
      pid: this.id,
      cat_id: this._cat_id,
    };
  },
});

var PhotosCollection = require('./base-collection').extend({
  // mainIndex: 'pid',
  model: Photo,
});

module.exports = require('app/models/base-model').extend({
  // extraProperties: 'ignore',
  props: {
    id: 'number',
    eid: 'number',
    mtime: ['number', true, 0], // last modification time
  },
  
  collections: {
    photos: PhotosCollection,
  },
  
  session: {
    isFavModel: ['boolean', true, true],
    event: 'state',
  },
  
  derived: {
    name: {
      fn: function () {
        return app.view.lz('Favorites');
      },
    },
    // event: {
    //   fn: function () {
    //     return app.eventModels[this.eid];  
    //   },
    // },
    music_tracks: {
      fn: function () {
        return this.event.music || [];  
      },
    },
    app_url: {
      fn: function () {
        return '#events/'+ this.eid +'/favorites';
      },
    },
  },
  
  initialize: function (data) {
    // this.store = _.throttle(this.store, 1000);
    this.save = _.throttle(this.save, 1000);
    this.event = data.event;
    
    this.listenTo(this.photos, 'add', function (model) {
      this.save();
      this.trigger('add:'+ model.id);
    });
    this.listenTo(this.photos, 'remove', function (model) {
      this.save();
      this.trigger('remove:'+ model.id);
    });
    
    this.listenTo(app, 'storage:favorites'+this.eid, this.storageCallback);
    
    if (this.event.complete) this.readStorage();
    else this.listenTo(this.event, 'change:complete', this.readStorage);
    
  },
  
  readStorage: function (){
    var storedData = app.storage['favorites'+this.eid];
    if (storedData) this.set(JSON.parse(storedData), { parse: true });
  },
  
  storageCallback: function (newData) {
    newData = JSON.parse(newData);
    if (newData.mtime > this.mtime) {
      this.set(newData);
    }
  },
  
  store: function () {
    // console.log('storing cart', 
    //     JSON.stringify(this.toJSON()).length * 2 + ' bytes');
    // console.log('storing cart', this.toJSON());
    
    this.mtime = Date.now();
    app.storage['favorites'+this.eid] = JSON.stringify(this.toJSON());
  },
  
  save: function () {
    // console.log('saving favs', this.photos.length);
    return this.store();
    
    var self = this;
    
    // var data = this.toJSON()
    // Parent.prototype.save.apply(this, arguments);
    this.sync(this.isNew() ? 'create' : 'update', this, {
      url: this.url(),
      // data: this.toJSON(),
      success: function (resp) {
          if (+resp.status !== 200) return;
        var i, j, product, model, cartProduct, newProduct;
        self.id = resp.data.id;
        for (i = 0; i < resp.data.products.length; i++) {
          product = resp.data.products[i];
          cartProduct = self.products.get(product.cart_item_id);
          if (cartProduct) continue;
          
          newProduct = [];
          for (j = 0; j < self.products.length; j++) {
            model = self.products.at(j);
            if (model.pid === product.pid && model.oid === product.oid &&
                model.qty === product.qty && model.notes === product.notes &&
                model.photos.length === product.photos.length) {
              newProduct.push(model);
            }
          }
          
          // if we don't have a perfect fit - just reset all products 
          if (newProduct.length !== 1) {
            console.log('reset products');
            self.products.set(resp.data.products);
            break;
          }
          newProduct[0].set(product);
        }
      },
    });
    
    this.store();
  },
  
});
