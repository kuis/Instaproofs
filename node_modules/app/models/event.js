/*==========================================================================*\
  Event Model
\*==========================================================================*/
"use strict";

var Model = require('app/models/base');
var CategoriesCollection = require('app/models/categories');

module.exports = Model.extend({
  urlRoot: '/api/events',
  props: {
    id: 'number',
    name: ['string', true, ''], // The name of the event
    img: ['string', true, ''], // The event's featured image's URL
    date: ['moment', true, null], // The date of the event
    exp_date: ['moment', true, null], // The expiration date for the event
    city: ['string', true, ''], // The city where the event was held
    state: ['string', true, ''], // state/province/county where the event was held
    country: ['string', true, ''], // The country where the event was held
    
    // The type of event (Wedding, Dance, Fashion, Engagement, etc.)
    type: ['string', true, ''],
    type_id: ['number', true, 0], // The event type's ID
    
    password: ['boolean', true, false], // password protected or not
    email: ['boolean', true, false], // requries an email address to enter it
    show: ['boolean', true, false], // whether the event should be listed
    
    // whether the event's image should be displayed 
    // in the event list and login page
    display_image: ['boolean', true, false], 
    
    // Custom value representing a single event.  
    // Used like this: http://proofs.mysite.com/eventAlias  
    alias: ['string', true, ''], 
    
    future: ['boolean', true, false], // event's date is sometime in the future
    showcase: ['boolean', true, false], // a "Showcased" event
    
    img_path: ['string', true, ''], // root path for images
    // categories: ['array', true], // list of categories 
  },
  collections: {
    categories: CategoriesCollection, // list of categories 
  },
  
  session: {
    complete: 'boolean',
  },
  
  derived: {
    
    cover_url: {
      deps: ['img_path', 'img'],
      fn: function () {
        return this.img_path + this.img;
      },
    },
    
    locked: {
      deps: ['password', 'email'],
      fn: function () {
        return this.password || this.email;
      },
    },
    
    // complete: {
    //   deps: ['categories'],
    //   fn: function () {
    //     var firstCategory = this.categories && this.categories.at(0);
    //     return !!(firstCategory && firstCategory.prod_list.length);
    //   },
    //   cache: false,
    // },
  },
  
  parse: function (res) {
    var data = (res.id && !res.data) ? res : res.data;
    if (data.categories && data.categories[0] && data.categories[0].prod_list
        && data.categories[0].prod_list.length) {
      data.complete = true;
    }
    return Model.prototype.parse.apply(this, arguments);
  },
});
