/*==========================================================================*\
  App config
\*==========================================================================*/
"use strict";

var app = require('app');

module.exports = require('app/models/base-model').extend({
  extraProperties: 'ignore',
    
  url: 'http://www.instaproofs.com/api/rest2/bootstrap?'+
       // 'url=http://demotest.instaproofs.com',
       'url=http://demo.instaproofs.com',
  props: {
    // grid|list|login: what the visitors see when they visit the homepage
    style: ['string', true, 'grid'],
    
    // date|name|type : Determines how the events are sorted by default
    sort: ['string', true, 'date'], 
    
    // current|future|all : Determines which events are displayed by default
    filter: ['string', true, 'all'], 
    
    // Boolean value that indicates whether the search area should be displayed
    display_search: ['boolean', true, false],
    
    // Boolean value that indicates whether the "Home" link should be displayed 
    display_home: ['boolean', true, false], 
    
    // Boolean value that indicates whether the "Home" link should be displayed
    display_custom: ['boolean', true, false], 
    
    // The text that should be displayed for the custom link
    display_custom_label: ['string', false, ''],
    
    // The URL that clicking the custom link should take the user to 
    display_custom_url: ['string', false, ''], 
    
    // whether clicking the logo should take visitor to the 
    // photographer's personal website
    link_to_company: ['boolean', true, false], 
    
    // indicates whether the products should be shown above (1) 
    // or below (0) the image categories within the event
    products_on_top: ['boolean', true, false], 
    
    // whether product names should be shown over the images in thumbnail view
    product_names: ['boolean', true, false],
    
    // none|view|custom|view_custom : Determines whether the visitor can 
    // select a crop for their ordered prints 
    custom_crop: ['string', true, ''],
    
    // whether the storefront is in vacation mode. When in vacation mode, 
    // visitors can view the homepage as normal, but when an event is 
    // tried to be entered the user is shown a vacation message, is asked 
    // for their email address, and cannot view the images within the event 
    vacation: ['boolean', true, false], 
    
    // The message to display when the storefront is in vacation mode and a 
    // person tries to enter an event
    vacation_message: ['string', true, ''], 
    
    // whether visitors can see the "Email Photo" option with the share links
    email_photo: ['boolean', true, false], 
    
    // Numeric value used to determine which sharing links 
    // (Facebook, Twitter, Digg, etc.) should be displayed with the images
    share_options: ['number', true, 0],
    
    // Displayed on the purchase page with options 
    // that have add-ons available for them 
    addon_label: ['string', true, ''],
    
    // The minimum order size allowed before the "Checkout" 
    // option should be displayed 
    min_order: ['number', true, 0], 
    
    // Determines whether American Express card 
    // will be accepted on large orders (<$2000)
    allow_amex: ['boolean', true, false], 
    
    // Message to display if a person enters an event that contains no images
    empty_message: ['string', true, ''], 
    
    // Message to display if a person enters an event that has expired
    expired_message: ['string', true, ''], 
    
    // Message displayed on the receipt after an order is placed
    receipt_message: ['string', true, ''], 
    
    // Description used in the <head> portion of the website
    meta_description: ['string', true, ''], 
    
    // Text to display in place of "Sales Tax" on the checkout and receipt pages
    tax_label: ['string', true, ''], 
    
    shipping_method: {
      type: 'string',
      require: true,
      values: ['prints_ordered', 'items_ordered', 'print_total', 
               'order_total', 'print_percent', 'order_percent'], 
    }
  },
  
  initialize: function () {
    this.listenTo(this, 'sync', function () {
      app.state.bootstrapped = true;
    });
  },
  
  parse: function (res) {
    var i;
    var data = res.data;
    if (data.photographer) app.photographer.set(data.photographer);
    if (data.sizes) {
      for (i = 0; i < data.sizes.length; i++) {
        if (data.sizes[i].img_url === null) {
          data.sizes[i].img_url = '';
        }
      }
      app.purchaseOptions.set(data.sizes);
    }
    
    if (data.colors) app.colors.set(data.colors);
    if (data.pricing_templates) {
      app.pricingTemplates.set(data.pricing_templates);
    }
    
    if (data.purchase_addons) {
      for (i = 0; i < data.purchase_addons.length; i++) {
        if (data.purchase_addons[i].description === null) {
          data.purchase_addons[i].description = '';
        }
      }
      app.purchaseAddons.set(data.purchase_addons);
      app.purchaseAddons.globalAddons = true;
    }
    
    if (data.shipping) {
      data.config.shipping_method = data.shipping.method;
      app.shipping.set(data.shipping.variants);
    }
    
    if (data.purchase_products) {
      // for (i = 0; i < data.purchase_products.length; i++) {
      //   if (data.purchase_products[i].img_url === 'http://images9.instaproofs'+
      //       '.com/8/product/original_large_100187176.jpg') {
      //     data.purchase_products[i].img_url = 'img/pics/products/album.jpg';
      //   }
      //   if (data.purchase_products[i].img_url === 'http://images9.instaproofs'+
      //       '.com/8/product/original_large_648401.jpg') {
      //     data.purchase_products[i].img_url = 'img/pics/products/gift.jpg';
      //   }
      // }
      app.products.set(data.purchase_products);
    }
    
    return data.config;
  },
  
});
