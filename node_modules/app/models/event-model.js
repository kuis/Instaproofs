/*==========================================================================*\
  Event Model
\*==========================================================================*/
"use strict";

var app = require('app');
var Parent = require('app/models/base-model');
var Cart = require('app/models/cart/cart-model');
var Favorites = require('app/models/favorites-model');
var Hides = require('app/models/hides-model');
var CategoriesCollection = require('app/models/categories-collection');
var ProductsCollection = require('app/models/product/products-collection');
var uid = 1;

module.exports = Parent.extend({
  extraProperties: 'ignore',
  // urlRoot: '/api/events',
  urlRoot: 'http://www.instaproofs.com/api/rest2/events/',
  url: function () {
    var keychain = app.keychain.events.get(this.id);
    return 'http://www.instaproofs.com/api/rest2/events/'+ this.id +
           // '?url=http://demotest.instaproofs.com'+
           '?url=http://demo.instaproofs.com'+
           (keychain && keychain.email ? 
              '&email='+ encodeURIComponent(keychain.email) : '') +
           (keychain && keychain.password ? 
              '&password='+ encodeURIComponent(keychain.password) : '');
           // '&email=adam@instaproofs.com'+
           // '&password=contest2015';
  },
  props: {
    id: 'number',
    name: ['string', true, ''], // The name of the event
    description: ['string', true, ''], // Event's description
    img_url: ['string', true, ''], // URL for event's title image
    
    // left top|center top|center center etc.
    img_position: ['string', true, ''], 
    
    date: ['moment', true, null], // The date of the event
    exp_date: ['moment', true, null], // The expiration date for the event
    city: ['string', true, ''], // The city where the event was held
    state: ['string', true, ''], // state/province/county where the event was 
    // country: ['string', true, ''], // The country where the event was held
    country: 'any', // The country where the event was held
    
    music: ['array', false], // list of music tracks 
    
    // The type of event (Wedding, Dance, Fashion, Engagement, etc.)
    type: ['string', true, ''],
    type_id: ['number', true, 0], // The event type's ID
    
    password: ['boolean', true, false], // password protected or not
    email: ['boolean', true, false], // requries an email address to enter it
    show: ['boolean', true, false], // whether the event should be listed
    
    // whether the event's image should be displayed 
    // in the event list and login page
    display_image: ['boolean', true, false], 
    
    // Custom value representing a single event.  
    // Used like this: http://proofs.mysite.com/eventAlias  
    alias: ['string', true, ''], 
    
    showcase: ['boolean', true, false], // a "Showcased" event
    
    addons: 'array',
    
    products: 'array',
  },
  collections: {
    categories: CategoriesCollection, // list of categories 
    products_list: ProductsCollection, // list of products
  },
  
  session: {
    complete: 'boolean', // all event's data has been fetched 
    fetching: 'boolean', // whether we're currently fetching the event's data 
  },
  
  derived: {
    
    cart: { // user's cart for this event 
      fn: function () {
        if (!app.eventCarts[this.id]) {
          app.eventCarts[this.id] = new Cart({
            eid: this.id,
            // event: this,
          });
        }
        return app.eventCarts[this.id];
      },
    },
    
    favorites: { // user's cart for this event 
      fn: function () {
        if (!app.favorites[this.id]) {
          app.favorites[this.id] = new Favorites({
            eid: this.id,
            event: this,
          });
        }
        return app.favorites[this.id];
      },
    },
    hides: { // user's cart for this event 
      fn: function () {
        if (!app.hides[this.id]) {
          app.hides[this.id] = new Hides({
            eid: this.id,
            event: this,
          });
        }
        return app.hides[this.id];
      },
    },
    
    cover_url: {
      deps: ['img_url'],
      fn: function () {
        return this.img_path + this.img_url;
      },
    },
    thumb_url: {
      deps: ['img_url'],
      fn: function () {
        return this.toThumbURL(this.img_url);
      },
    },
    thumb_blur_url: {
      deps: ['img_url'],
      fn: function () {
        return this.toBlurURL(this.toThumbURL(this.img_url));
      },
    },
    
    locked: {
      deps: ['password', 'email', 'complete'],
      cache: false,
      fn: function () {
        if (!this.email && !this.password) return false;
        var keychain = app.keychain.events.get(this.id);
        if (!keychain || !keychain.verified) return true;
        if (this.email && !keychain.email) return true;
        if (this.password && !keychain.password) return true;
        return false;
      },
    },
    
    // complete: {
    //   deps: ['categories'],
    //   fn: function () {
    //     var firstCategory = this.categories && this.categories.at(0);
    //     return !!(firstCategory && firstCategory.photos.length);
    //   },
    //   cache: false,
    // },
  },
  
  fetch: function (options) {
    if (this.fetching) return;
    options = options || {};
    var success = options.success;
    var error = options.error;
    options.success = function (model, res, options) {
      if (res.status !== 200) {
        if (res.status === 401) {
          app.keychain.removeEventKeys(model.id);
          app.view.splashView.showLoginForm(model);
        }
      }
      else {
        app.keychain.confirmKeys(model.id);
        // this.locked; // update `locked` so `change` is triggered 
        if (app.view.splashView.model === model) {
          app.view.splashView.hide();
        }
      }
      if (success) success.call(model, model, res, options);
    };
    options.error = function (model, res, options) {
      if (error) error.call(model, model, res, options);
      if (model.locked) app.router.login(model);
      else {
        model.fetch();
      }
    };
    return Parent.prototype.fetch.call(this, options);
  },
  
  initialize: function () {
    this.listenTo(this, 'request', function () {
      this.fetching = true;
    });
    this.listenTo(this, 'sync error', function () {
      this.fetching = false;
    });
    this.listenTo(app.keychain, 'change:mtime', function () {
      console.log('update locked', this.locked);
      return this.locked; // update locked value
    });
    
    this.listenTo(this, 'change:complete', function () {
      if (this.products_list.length) return;
      var products = [];
      for (var i = 0; i < this.products.length; i++) {
        products.push(app.products.get(this.products[i]));
      }
      this.products_list = new ProductsCollection(products);
    });
  },
  
  parse: function (res) {
    var data = (res.id && !res.data) ? res : res.data;
    if (res.status && res.status !== 200) {
      return Parent.prototype.parse.apply(this, [data]);
    }
    
    if (res.cart && res.cart.id) {
      this.cart.set(res.cart);
      // console.log('cart received', this.cart.toJSON());
    }
    if (res.favorites && res.favorites.id) {
      this.favorites.set(res.favorites);
    }
    if (res.hides && res.hides.id) {
      this.hides.set(res.hides);
    }
    
    // data.password = false;
    // data.email = false;
    if (!data.img_url) data.img_url = '/img/pics/img'+ (+data.id % 19 + 1) +'.jpg';
    
    var cat, img, landscape;
    var landscapePhotoRE = new RegExp("^(1|3|4|5|13|16|17|18|19|20|42)$");
    if (!data.categories) {
      console.log('no cat', data);
      console.trace();
    }
    for (var i = 0; i < data.categories.length; i++) {
      cat = data.categories[i];
      if (!cat.img_url) cat.img_url = "/img/pics/img" + (1 + (cat.id % 19)) +'.jpg?' + (uid++);
      // if (cat.photos) for (var j = 0; j < cat.photos.length; j++) {
      //   img = (70 + j) % 71 + 1;
      //   landscape = landscapePhotoRE.test(img);
      //   cat.photos[j].width = landscape ? 1280 : 941;
      //   cat.photos[j].height = landscape ? 941 : 1280;
      //   cat.photos[j].original_width = (landscape ? 1280 : 941) * 4;
      //   cat.photos[j].original_height = (landscape ? 941 : 1280) * 4;
      //   cat.photos[j].img_url = '/img/pics/events/1/img'+ img +'.jpg?'+ (uid++);
      //   cat.photos[j].download_url = img % 4 === 0 ? 
      //                                '/img/pics/events/1/img'+ img +'.jpg': '';
      // }
    }
    
    if (data.categories && data.categories[0] && data.categories[0].photos
        && data.categories[0].photos.length) {
      if (app.state.bootstrapped) {
        data.complete = true;
      }
      else {
        var self = this;
        app.state.on('change:bootstrapped', function () {
          var products = [];
          for (var i = 0; i < self.products.length; i++) {
            products.push(app.products.get(self.products[i]));
          }
          self.products_list = new ProductsCollection(products);
          self.complete = true;
        });
      }
    }
    return Parent.prototype.parse.apply(this, arguments);
  },
});
