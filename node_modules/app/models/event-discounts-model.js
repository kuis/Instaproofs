/*==========================================================================*\
  Event's Discounts
\*==========================================================================*/
"use strict";

var app = require('app');
var _ =  require('underscore');
var BaseModel = require('./base-model');

var Discount = BaseModel.extend({
  idAttribute: 'id',
  extraProperties: 'ignore',
  props: {
    discount: 'number',
    expires: 'moment',
    description: 'string',
    id: ['number', true, 0],
  },
  
  session: {
    expiration: 'any', // moment or number of ms left if less than 48 hrs
  },
  
  initialize: function () {
    BaseModel.prototype.initialize.apply(this, arguments);
    var diff = this.expires - app.clock;
    if (diff < 50 * 3600 * 1000) {
      this.listenTo(app.clock, 'change:seconds', this.updateExpiration);
    }
    else {
      this.listenTo(app.clock, 'change:hours', this.onHourChange);
    }
    
    this.updateExpiration();
  },
  
  onHourChange: function () {
    var diff = this.expires - app.clock;
    if (diff < 50 * 3600 * 1000) {
      this.stopListening(app.clock, 'change:hours', this.onHourChange);
      this.listenTo(app.clock, 'change:seconds', this.updateExpiration);
    }
  },
  updateExpiration: function () {
    var diff = this.expires - app.clock;
    if (diff <= 0) {
      this.discount = 0;
      this.expiration = 0;
      this.stopListening();
    }
    else if (diff < 48 * 3600 * 1000) {
      this.expiration = diff;
    }
    else {
      this.expiration = this.expires;
    }
  },
});

var SizeDiscounts = require('./base-collection').extend({
  mainIndex: 'id',
  model: Discount,
});

module.exports = BaseModel.extend({
  extraProperties: 'ignore',
  props: {
    eid: 'number',
    mtime: ['number', true, 0], // last modification time
    
    // allProducts: 'state',
    allSizes: 'state',
    
    general: 'array',
    size_override: 'array',
  },
  
  collections: {
    sizes: SizeDiscounts,
  },
  
  session: {
    isHidesModel: ['boolean', true, true],
    event: 'state',
  },
  
  derived: {
    allProducts: {
      deps: ['general', 'size_override'],
      fn: function () {
        return this.setData({
          general: this.general,
          size_override: this.size_override,
        });
      },
    },
  },
  
  initialize: function (data) {
    // this.setData(data);
  },
  
  setData: function (data) {
    var i;
    var maxProductDiscount = 0;
    var maxSizeDiscount = 0;
    var productsDiscount;
    var sizesDiscount;
    var maxSizeDiscounts = {};
    var sizeDiscounts = {};
    var now = Date.now();
    var discount;
    if (Array.isArray(data.general)) {
      for (i = 0; i < data.general.length; i++) {
        if (Date.parse(data.general[i].expires) <= now) continue;
        if (data.general[i].product_discount > maxProductDiscount) {
          productsDiscount = data.general[i];
          maxProductDiscount = data.general[i].product_discount;
        }
        if (data.general[i].size_discount > maxSizeDiscount) {
          sizesDiscount = data.general[i];
          maxSizeDiscount = data.general[i].size_discount;
        } 
      }
    }
    
    var allProducts = !productsDiscount ? undefined : new Discount({
      discount: productsDiscount.product_discount,
      expires: productsDiscount.expires,
      description: productsDiscount.description,
    });
    this.allSizes = !sizesDiscount ? undefined : new Discount({
      discount: sizesDiscount.size_discount,
      expires: sizesDiscount.expires,
      description: sizesDiscount.description,
    });
    
    if (Array.isArray(data.size_override)) {
      for (i = 0; i < data.size_override.length; i++) {
        discount = data.size_override[i];
        if (Date.parse(discount.expires) <= now) continue;
        if (!maxSizeDiscounts[discount.id]) {
          maxSizeDiscounts[discount.id] = 0;
        }
        if (discount.discount > maxSizeDiscounts[discount.id]) {
          sizeDiscounts[discount.id] = discount;
        }
      }
    }
    
    var sizeDiscountsArray = [];
    for (var id in sizeDiscounts) {
      sizeDiscountsArray.push(sizeDiscounts[id]);
    }
    this.sizes.set(sizeDiscountsArray);
    
    return allProducts;
  },
  
});
