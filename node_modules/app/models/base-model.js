/*==========================================================================*\
  Base model to be extended by all others
\*==========================================================================*/
"use strict";

var Model = require('ampersand-model');
var app = require('app');
var moment = require('moment');
var imgUrlRegExp = new RegExp("w=([0-9]+)&h=([0-9]+)");

module.exports = Model.extend({
  extraProperties: 'reject', // throw errors when setting unknown propery
  
  dataTypes: {
    
    // all dates are moments =================================================
    moment: {
      set: function (newVal) {
        var newType;
        if (newVal && newVal._isAMomentObject) {
          newType = 'moment';
          newVal = newVal.valueOf();
        }
        else {
          if (typeof newVal === 'number') {
            newVal = new Date(parseInt(newVal, 10));
            newVal = newVal.valueOf();
          }
          else if (!newVal || newVal === 'N/A') {
            newVal = false;
          }
          else {
            newVal = moment(newVal).valueOf();
          }
          newType = 'moment';
        }
        return {
          val: newVal,
          type: newType,
        };
      },
      get: function (val) {
        return moment(val);
      },
      default: function () {
        return moment();
      }
    },
    
    number: {
      set: function (newVal) {
        return {
          val: +newVal,
          type: 'number',
        };
      },
      get: function (val) {
        return val;
      },
      default: function () {
        return 0;
      }
    },
  },
  
  
  // fetch: function (options) {
  //   options = options || {};
  //   options.data = options.data || {};
    
  //   // request bootstrap data on first fetch since app was loaded ============
  //   if (!app.state.bootstrapped) {
  //     options.data.bootstrap = 1;
  //   }
    
  //   Model.prototype.fetch.call(this, options);
  // },
  
  
  
  parse: function (res) {
    if (res.id && !res.data) return res; // not a server response 
    
    
    // // parse boostrap data if it is present ==================================
    // if (res.config) {
    //   app.state.bootstrapped = true;
    //   app.config.set(res.config);
    // }
    // if (res.photographer) app.photographer.set(res.photographer);
    // if (res.purchase_addons) app.purchaseAddons.set(res.purchase_addons);
    // if (res.purchase_options) app.purchaseOptions.set(res.purchase_options, { 
    //   parse: true 
    // });
    
    
    // all model data is returned in a 'data' property
    return res.data;
  },
  
  toThumbURL: function (url) {
    var m = imgUrlRegExp.exec(url);
    if (m) {
      var width = m[1];
      var height = m[2];
      url = url.replace('w='+width, 'w=450')
               .replace('h='+height, 'h='+ Math.round(450 * height / width));
      return url;
    }
    
    // var dotIndex = url.lastIndexOf('.');
    // if (dotIndex < 0) dotIndex = url.length;
    // return url.substr(0, dotIndex) +'_thumb'+ url.substr(dotIndex);
    // return url;
    var i = url.lastIndexOf('/');
    return url.substr(0, i) +'/thumbs'+ url.substr(i);
  },
  toMicroURL: function (url) {
    var m = imgUrlRegExp.exec(url);
    if (m) {
      var width = m[1];
      var height = m[2];
      url = url.replace('h='+height, 'h=88')
               .replace('w='+width, 'w='+ Math.round(88 * width / height));
      return url;
    }
    var i = url.lastIndexOf('/');
    return url.substr(0, i) +'/thumbs'+ url.substr(i);
  },
  toBlurURL: function (url) {
    var i = url.lastIndexOf('/');
    return url.substr(0, i) +'/blur'+ url.substr(i);
  },
  
  formatMoney: function (val) {
    var $ = app.photographer.currency_symbol;
    if (!val) return $ +'0.00';
    if (val < 100) return $ +'0.'+ val;
    val = val + '';
    return $ + val.substr(0, val.length-2) +'.'+ val.substr(val.length-2);
  },
});
