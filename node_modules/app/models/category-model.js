/*==========================================================================*\
  Event Model
\*==========================================================================*/
"use strict";

var PhotosCollection = require('./photos-collection');

module.exports = require('app/models/base-model').extend({
  extraProperties: 'ignore',
  urlRoot: '/api/categories',
  props: {
    id: 'number',
    name: ['string', true, ''], // name of the category 
    img_url: ['string', true, ''], // URL for category's title image 
    img_count: ['number', true, 0], // number of photos in the category 
    music: ['array', false], // list of music tracks 
  },
  
  collections: {
    photos: PhotosCollection,
  },
  
  derived: {
    event: {
      fn: function () {
        return this.collection.parent;
      },
    },
    app_url: {
      fn: function () {
        return '#events/'+ this.event.id +'/'+ this.id;
      },
    },
    cover_url: {
      fn: function () {
        return this.event.img_path +'category'+ this.id +'.jpg';
      },
    },
    thumb_url: {
      deps: ['img_url'],
      fn: function () {
        return this.toThumbURL(this.img_url);
      },
    },
    
    music_tracks: {
      deps: ['img_url'],
      fn: function () {
        return this.music && this.music.length ? this.music 
            : (this.event.music || []);
      },
    },
    
    page_id: {
      fn: function () {
        return this.event.id +'_'+ this.id;
      },
    },
    
    next: {
      fn: function () {
        var index = this.collection.indexOf(this);
        return this.collection.at(index+1) || null;
      },
    },
    prev: {
      fn: function () {
        var index = this.collection.indexOf(this);
        return this.collection.at(index-1) || null;
      },
    },
    
    nextAround: {
      fn: function () {
        return this.next || this.collection.at(0);
      },
    },
    prevAround: {
      fn: function () {
        return this.prev || this.collection.last();
      },
    },
  },
});
