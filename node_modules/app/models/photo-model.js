/*==========================================================================*\
  A Photo
\*==========================================================================*/
"use strict";

module.exports = require('app/models/base-model').extend({
  props: {
    id: 'number',
    name: ['string', true, ''], // image title 
    
    // URL to the largest image to be displayed in the app (not 8Mpx orignal)
    img_url: ['string', true, ''],
    width: ['number', true, 0], // width of the image under img_url
    height: ['number', true, 0], // height of the image under img_url
    
    
    // if a photo can be downloaded by anybody or if current user has sufficient
    // permissions, this is the URL to the original, possibly very large, photo.
    download_url: ['string', true, ''],
  },
  
  derived: {
    app_url: {
      deps: ['img_url'],
      fn: function () {
        return '#events/'+ this.collection.parent.collection.parent.id +'/'+
               this.collection.parent.id +'/'+ this.id;
      },
    },
    thumb_url: {
      deps: ['img_url'],
      fn: function () {
        return this.toThumbURL(this.img_url);
      },
    },
    
    ratio: {
      deps: ['width', 'height'],
      fn: function () {
        return this.width / this.height;
      },
    },
    
    next: {
      fn: function () {
        var index = this.collection.indexOf(this);
        return this.collection.at(index+1) || null;
      },
    },
    prev: {
      fn: function () {
        var index = this.collection.indexOf(this);
        return this.collection.at(index-1) || null;
      },
    },
    
    nextAround: {
      fn: function () {
        var category = this.collection.parent;
        if (!this.next && category.collection && 
            category.collection.length > 1) {
          return category.nextAround.photos.at(0);
        }
        return this.next || this.collection.at(0);
      },
    },
    prevAround: {
      fn: function () {
        var category = this.collection.parent;
        if (!this.prev && category.collection && 
            category.collection.length > 1) {
          return category.prevAround.photos.last();
        }
        return this.prev || this.collection.last();
      },
    },
  },
  
  // session: {
  //   xPos: ['number', true, 0],
  //   yPos: ['number', true, 0],
  //   width: ['number', true, 0],
  //   height: ['number', true, 0],
  // },
  
});
