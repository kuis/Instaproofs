/*==========================================================================*\
  A Photo
\*==========================================================================*/
"use strict";
var app = require('app');
var AddonModel = require('app/models/cart/addon-model');
var AddonsCollection = require('app/models/cart/addons-collection');
var Parent = require('app/models/base-model');

// var BuyAddon = require('app/models/base-model').extend({
//   id: 'number',
//   derived {
    
//   },
// });

var BuyOption = require('app/models/base-model').extend({
  props: {
    size_id: 'number',
    price: ['number', true, 0],
    bulk_pricing: 'object',
  },
  
  session: {
    
  },
  
  derived: {
    event: {
      fn: function () {
        return this.collection.parent.event;
      },
    },
    size: {
      fn: function () {
        return app.purchaseOptions.get(this.size_id);
      },
    },
    addons: {
      deps: ['size_id', 'event'],
      fn: function () {
        var i;
        var addons = [];
        var addon;
        for (i = 0; i < this.event.addons.length; i++) {
          addon = app.purchaseAddons.get(this.event.addons[i]);
          if (addon && addon.sizes[this.size_id]) {
            addons.push(addon);
          }
        }
        var col = new AddonsCollection(addons, {
          parent: this,
        });
        return col;
      },
    },
  },
});

var BuyOptionsCollection = require('app/models/base-collection').extend({
  mainIndex: 'size_id',
  model: BuyOption,
});

module.exports = Parent.extend({
  extraProperties: 'ignore',
  BuyOptionsCollection: BuyOptionsCollection,
  props: {
    id: 'number',
    name: ['string', true, ''], // image title 
    
    // URL to the largest image to be displayed in the app (not 8Mpx orignal)
    img_url: ['string', true, ''],
    width: ['number', true, 0], // width of the image under img_url
    height: ['number', true, 0], // height of the image under img_url
    
    // original image dimensions 
    // original_width: ['number', true, 0],
    // original_height: ['number', true, 0],
    
    // if a photo can be downloaded by anybody or if current user has sufficient
    // permissions, this is the URL to the original, possibly very large, photo.
    download_url: ['string', true, ''],
    
    // The pricing template ID that the image is associated with
    pricing_id: ['number', true, 0],
  },
  
  session: {
    current_color_id: ['number', true, 1],
    in_cart: ['boolean', true, false],
    in_favorites: ['boolean', true, false],
    hidden: ['boolean', true, false],
  },
  
  derived: {
    eid: {
      fn: function () {
        return this.event.id;
      },
    },
    cat_id: {
      fn: function () {
        return this.collection.parent.id;
      },
    },
    event: {
      fn: function () {
        return this.collection.parent.event;
      },
    },
    
    app_url: {
      fn: function () {
        var catId = this.collection.parent.isFavModel ? 
            'favorites' : this.cat_id;
        return '#events/'+ this.event.id +'/'+ catId +'/'+ this.id;
      },
    },
    buy_url: {
      fn: function () {
        return '#events/'+ this.event.id +'/'+ this.cat_id +'/'+ this.id +'buy';
      },
    },
    
    thumb_url: {
      deps: ['img_url'],
      fn: function () {
        // console.log(this.img_url);
        return this.toThumbURL(this.img_url);
      },
    },
    micro_url: {
      deps: ['img_url'],
      fn: function () {
        return this.toMicroURL(this.img_url);
      },
    },
    
    ratio: {
      deps: ['width', 'height'],
      fn: function () {
        return this.width / this.height;
      },
    },
    
    next: {
      fn: function () {
        var index = this.collection.indexOf(this);
        return this.collection.at(index+1) || null;
      },
    },
    prev: {
      fn: function () {
        var index = this.collection.indexOf(this);
        return this.collection.at(index-1) || null;
      },
    },
    
    pricing: {
      deps: ['pricing_id'],
      fn: function () {
        return app.pricingTemplates.get(this.pricing_id);
      },
    },
    
    nextAround: {
      fn: function () {
        var category = this.collection.parent;
        if (!this.next && category.collection && 
            category.collection.length > 1) {
          return category.nextAround.photos.at(0);
        }
        return this.next || this.collection.at(0);
      },
    },
    prevAround: {
      fn: function () {
        var category = this.collection.parent;
        if (!this.prev && category.collection && 
            category.collection.length > 1) {
          return category.prevAround.photos.last();
        }
        return this.prev || this.collection.last();
      },
    },
    
    buyOptions: {
      deps: ['pricing_id', 'current_color_id'],
      fn: function () {
        var i;
        var tpl = this.pricing;
        var color = tpl.colors[this.current_color_id] || tpl.colors[0];
        if (!color) {
          for (i in tpl.colors) {
            color = tpl.colors[i];
            break;
          }
        }
        
        return new BuyOptionsCollection(color, { parent: this });
        
        // var event = this.event;
        
        // var option;
        // for (i = 0; i < color.length; i++) {
        //   option = color[i];
          
        // }
      },
    },
  },
  
  initialize: function () {
    Parent.prototype.initialize.apply(this, arguments);
    
    this.listenTo(this.event.cart, 'add:photo:'+this.id, this.onAddToCart);
    this.listenTo(this.event.cart, 'remove:photo:'+this.id, 
                  this.onRemoveFromCart);
    
    this.listenTo(this.event.favorites, 'add:'+this.id, this.onAddToFavorites);
    this.listenTo(this.event.favorites, 'remove:'+this.id, 
                  this.onRemoveFromFavorites);
    
    this.listenTo(this.event.hides, 'add:'+this.id, this.onHide);
    this.listenTo(this.event.hides, 'remove:'+this.id, this.onUnhide);
    
    this.in_cart = !!this.event.cart.allPhotos.get(this.id);
    this.in_favorites = !!this.event.favorites.photos.get(this.id);
    this.hidden = !!this.event.hides.photos.get(this.id);
    
    // var i, product;
    // for (i = 0; i < this.event.cart.products.length; i++) {
    //   product = this.event.cart.products.at(i);
    //   if (product.photos.get(this.id)) this.in_cart = true;
    // }
  },
  
  onAddToCart: function () {
    this.in_cart = true;
  },
  onRemoveFromCart: function () {
    this.in_cart = false;
  },
  onAddToFavorites: function () {
    this.in_favorites = true;
  },
  onRemoveFromFavorites: function () {
    this.in_favorites = false;
  },
  onHide: function () {
    console.log('onhide');
    this.hidden = true;
  },
  onUnhide: function (arg1) {
    console.log('onUnhide', this.id, arg1, this);
    // console.trace();
    
    this.hidden = false;
  },
  
  // session: {
  //   xPos: ['number', true, 0],
  //   yPos: ['number', true, 0],
  //   width: ['number', true, 0],
  //   height: ['number', true, 0],
  // },
  
});
