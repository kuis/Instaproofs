/*==========================================================================*\
  Event page with a list of categories 
\*==========================================================================*/
"use strict";

var BasePage = require('app/base/base-page');
var CategoriesView = require('app/category/categories');
var ProductsView = require('app/product/products');
var SalesView = require('app/sale/sales-info');
var FullDownloadPopup = require('app/misc-popup/fulldownload-popup');

var app = require('app');
var assign = require('lodash.assign');

module.exports = BasePage.extend({
  viewType: 'event-page',
  dictionary: 'event', // localization dictionary 
  pageTitle: '',
  pageType: 'event',
  hasHeaderLogo: true,
  
  template: require('app/templates').event['event-page'],
  
  props: {
    config: 'state',
    eventId: ['number', true, 0],
    noPhotos: ['boolean', true, false],
    // hasProducts: ['boolean', true, false],
  },
  
  events: {
    // 'click .sorting a': 'sort',
    'click .load-more > .label': 'loadMore',
    'click a.contact-us': 'showContactForm',
    'click a.full-download': 'showFullDownload',
  },
  
  bindings: {
    // 'config.logo_link': {
    //   type: function (el, val) {
    //     el.href = val;
    //     el.target = val !== '' && val.indexOf('instaproofs.com') < 0  
    //         ? '_blank' 
    //         : '_self';
    //   },
    //   selector: '.homepage-logo-link',
    // },
    
    'model.name': '[data-hook=event-name]',
    'model.description': {
      type: 'innerHTML',
      selector: '.event-description',
    },
    // hasProducts: {
    //   type: 'booleanClass',
    //   name: 'has-products',
    // },
    noPhotos: {
      type: 'booleanClass',
      name: 'no-photos',
    },
  },
  
  subviews: assign({}, BasePage.prototype.subviews, {
    categories: {
      container: '.categories',
      waitFor: 'model.name',
      prepareView: function (el) {

        this.categories = new CategoriesView({
          el: el,
          parent: this,
          collection: this.model.categories,
        });
        
        this.triggerReady();
        return this.categories;
      },
    },
    products: {
      container: '.products',
      waitFor: 'model.complete',
      prepareView: function (el) {
        if (this.model.products_list.length) {
          this.el.classList.add('has-products');
        }
        
        
        this.products = new ProductsView({
          el: el,
          parent: this,
          collection: this.model.products_list, 
        });
        return this.products;
      },
    },
    sales: {
      container: '.sales-info',
      waitFor: 'model.name',
      prepareView: function (el) {
        this.sales = new SalesView({
          el: el,
          parent: this,
          model: this.model.sales,
        });
        return this.sales;
      },
    },
  }),
  
  initialize: function (ops) {
    BasePage.prototype.initialize.apply(this, arguments);
    this.config = app.config;
    ops = ops || {};
    
    this.eventId = this.model.id;
    
    if (!this.model.locked) {
      if (!this.model.name || !this.model.complete) {
        this.model.fetch();
      } 
      else {
        this.triggerReady();
      }
    }

    this.setTitle(this.model.name, null, true);
    this.listenTo(this.model, 'change:name', function () {
    //  if (this.model.categories.length === 1 && !this.model.products.length) {
        this.setTitle(this.model.name, null, true);
    //  }
    });
    
    this.render();
    
    if (this.model.complete) { this.checkForPhotos(); this.checkForFullDownload(); }
    this.listenTo(this.model, 'change:complete', this.checkForPhotos);
    this.listenTo(this.model, 'change:complete', this.checkForFullDownload);
    this.listenTo(this.model, 'sync', this.checkForPhotos);
    this.listenTo(this.model, 'sync', this.checkForFullDownload);
  },
  
  checkForPhotos: function () {
    var self = this;
    
    var noPhotos = true;
    for (var i = 0; i < this.model.categories.models.length; i++) {
      if (this.model.categories.models[i].photos.models.length) {
        noPhotos = false;
      }
    }
    
    app.ready(function () {
      if (app.config.empty_message) {
        var message = app.config.empty_message;
        var hasContactLink = message.indexOf('[[CONTACT_US]]') > -1;
        message = message.replace('[[EVENT_NAME]]', self.model.name);
        if (hasContactLink) {
          message = message.replace('[[CONTACT_US]]', 
              '<a href="javascript:void(0);" class="contact-us">contact us</a>');
        }
        
        self.query('.event-empty-message h2').innerHTML = message;
        self.query('.event-empty-message').classList.toggle(
            'with-contact-button', !hasContactLink);
      }
    });
    
    this.noPhotos = noPhotos;
  },
  //If the user has permission to download a full event, display the link
  checkForFullDownload: function () {
    this.el.classList.toggle('download-allowed', this.model.allowedFullDownload);
  },
  
  showContactForm: function () {
    var nav = app.view.nav;
    if (!nav.menu) nav.initMenu();
    nav.menu.showContacts();
  },

  showFullDownload: function (e) {
    //console.log('Clicked full download link.');
    if (e && e.preventDefault) { e.preventDefault(); }
    this.popup(new FullDownloadPopup());
    return false;
  },
});



