/*==========================================================================*\
  List of events on the homepage
\*==========================================================================*/
"use strict";

var BaseView = require('app/base/base-view');
var EventsCollection = require('./events-collection');
var EventGroupView = require('./events-group');

var forEach = require('lodash.foreach');
var groupBy = require('lodash.groupby');

module.exports = BaseView.extend({
  viewType: 'events-list',
  displayedCount: 0, // number of displayed events 
  pendingDraws: false, // schedule ID for pending draw operation
  
  initialize: function (ops) {
    BaseView.prototype.initialize.apply(this, arguments);
    this.drawQueue = []; // queue of event groups to draw onto the page
    ops = ops || {};
    this.collection = new EventsCollection(null, ops);
    this.groupViews = [];
    this.listenTo(this.collection, 'reset', this.reset);
    this.listenTo(this.collection, 'more', this.addEvents);
  },
  
  
  // reset the page for another set of events (e.g. filtering chagned) =======
  reset: function () {
    var i, noChange = false;
    if (this.groupViews.length === 1 && this.collection.searchQuery &&
        this.groupViews[0].collection.length && 
        this.groupViews[0].collection.length === this.collection.length) {
      noChange = true;
      for (i = 0; i < this.groupViews[0].collection.length; i++) {
        if (this.groupViews[0].collection.at(i).id !== 
                                                     this.collection.at(i).id) {
          noChange = false;
          break;
        }
      }
    }
    if (noChange) return;
    
    this.groupViewsMap = {};
    if (this.groupViews && this.groupViews.length) { // cleanup old views 
      for (i = 0; i < this.groupViews.length; i++) {
        this.groupViews[i].remove(); 
        this.groupViews[i].stopListening();
      }
      this.groupViews = [];
    }
    this.displayedCount = 0;
    this.addEvents();
  },
  
  
  // add newly loaded events to the page =====================================
  addEvents: function () {
    // if (req.reset || req.data && !req.data.offset) return;
    var newModels = this.collection.takeRight(this.collection.length - 
                                         this.displayedCount);
    this.displayedCount += newModels.length;
    var self = this;
    var sortedBy = this.collection.sortedBy;
    var groups;
    if (sortedBy !== 'date' && !this.collection.searchQuery) {
      groups = groupBy(newModels, this.separators[sortedBy]);
    }
    else {
      groups = groupBy(newModels, this.separators.date);
      sortedBy = 'date';
      // groups = [newModels];
    }
    var newGroupViews = [];
    forEach(groups, function (group, key) {
      if (self.groupViewsMap[key]) {
        if (self.groupViewsMap[key].collection.length === 1
            || group.length === 1) {
          self.groupViewsMap[key].collection.add(group);
          self.groupViewsMap[key].updateLayout();
        }
        else {
          newGroupViews.push(new EventGroupView({ 
            collection: new EventsCollection(group, { sort: sortedBy }),
            sortedBy: sortedBy,
            key: key,
            parent: self,
            noHeader: true,
          }));
          self.groupViews.push(newGroupViews[newGroupViews.length-1]);
        }
      }
      else {
        newGroupViews.push(self.groupViewsMap[key] = new EventGroupView({ 
          collection: new EventsCollection(group, { sort: sortedBy }),
          sortedBy: sortedBy,
          parent: self,
          key: key,
        }));
        self.groupViews.push(newGroupViews[newGroupViews.length-1]);
      }
    });
    
    if (sortedBy === 'type') {
      newGroupViews.sort(function (a, b) {
        return a.collection.at(0).type.toUpperCase() -
               b.collection.at(0).type.toUpperCase();
      });
      // newGroupViews = _.sortBy(newGroupViews, function (a) {
      //   return a.collection.at(0).type.toUpperCase();
      // });
    }
    
    for (var i = 0; i < newGroupViews.length; i++) {
      newGroupViews[i].render();
      this.drawQueue.push(newGroupViews[i].el);
      if (!this.pendingDraws) {
        this.pendingDraws = this.write(this.drawEvents, 'normal', this);
      }
    }
  },
  
  
  // draw event groups one a time for better frame-rate ======================
  drawEvents: function () {
    this.pendingDraws = false;
    if (this.drawQueue.length) {
      this.el.appendChild(this.drawQueue[0]);
      this.drawQueue.shift();
    }
    if (this.drawQueue.length && !this.pendingDraws) {
      this.pendingDraws = this.write(this.drawEvents, 'normal', this);
    } 
  },
  
  
  // functions that separate events into groups ==============================
  separators: {
    date: function (event) {
      // return event.date.month() +'-'+ event.date.year();
      return 1; // no grouping
    },
    name: function (event) {
      return event.name.substr(0, 1).toUpperCase();
    },
    type: function (event) {
      return event.type.toUpperCase();
    },
  },

  setFilter: function (filter) {
    this.collection.filteredBy = filter;
  },

  setSort: function (sort) {
    this.collection.sortedBy = sort;
  },
});






