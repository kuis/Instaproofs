/*==========================================================================*\
  Fixed header navbar for an event 
\*==========================================================================*/
"use strict";

var app = require('app');
var NavContents = require('app/nav/nav-contents');

module.exports = NavContents.extend({
  dictionary: 'nav.event',
  viewType: 'event-nav',
  template: require('app/templates').event['event-nav'],
  
  props: {
    cartEmpty: ['boolean', true, true],
    backButtonDisplayed: ['boolean', true, false],
    backButtonHref: ['string', true, ''],
    backButtonText: ['string', true, ''],
    cartLength: ['number', true, 0],
    favoritesLength: ['number', true, 0],
    searchBar: ['boolean', true, false]
  },
  
  bindings: {
    backButtonDisplayed: {
      type: 'booleanClass',
      name: 'displayed',
      selector: 'a.back',
    },
    backButtonHref: {
      type: 'attribute',
      name: 'href',
      selector: 'a.back',
    },
    backButtonText: {
      type: function (el, val) {
        el.innerHTML = val;
      },
      // type: 'text',
      selector: 'a.back .inner',
    },
    cartLength: {
      type: 'text',
      selector: '.icon.cart span.badge'
    },
    favoritesLength: {
      type: 'text',
      selector: '.icon.favs span.badge'
    },
    searchBar: {
      type: 'booleanClass',
      name: 'hidden',
      selector: '.nav-contents a.icon.search'
    }
  },
  
  initialize: function () {
    NavContents.prototype.initialize.apply(this, arguments);
    this.listenTo(this.model.cart, 'change:is_empty', this.updateIcons);
    this.listenTo(this.model.cart, 'change:length', this.updateLength);
    this.listenTo(this.model.favorites, 'change:isEmpty', this.updateIcons);
    this.listenTo(this.model.favorites, 'change:visible_count', this.updateLength);
    this.listenTo(app.router, 'page', this.updateIcons);
    this.listenTo(app.history, 'update', this.updateBackButton);
  },
  
  switchNav: function (newView) { // show a nav view 
    this.viewSwitcher.set(newView);
  },
  
  onLinkClick: function (e) {
    e.stopPropagation();
  },
  
  render: function () {
    this.renderWithTemplate(this);
    this.cacheElements({
      backEl: '.back',
      backTextEl: '.back .inner',
      favsEl: '.favs',
      cartEl: '.cart',
      cartBadgeEl: '.icon.cart span.badge',
      favoritesBadgeEl: '.icon.favs span.badge',
      menuEl: '.menu',
    });
    this.updateIcons();
  },
  
  updateIcons: function () {
    this.cartEl.classList.toggle('filled', !this.model.cart.is_empty);
    this.cartEl.classList.toggle('filled', !this.model.cart.is_empty);
    this.cartBadgeEl.classList.toggle('hidden', this.model.cart.is_empty);
    this.favoritesBadgeEl.classList.toggle('hidden', this.model.favorites.isEmpty);
    this.favsEl.classList.toggle('filled', !this.model.favorites.isEmpty);
    
    var pageType = app.router.currentPage;
    if (pageType) {
      this.cartEl.classList.toggle('current', pageType === 'cart');
      this.favsEl.classList.toggle('current', pageType === 'favorites');
    }
  },

  updateLength: function () {
    this.cartLength = this.model.cart.length;
    this.favoritesLength = this.model.favorites.visible_count;
  },
  
  updateBackButton: function () {
    var item = app.history.getBackTo();
    if (!item || !item.shortTitle) {
      this.backButtonDisplayed = false;
    }
    else {
      this.backButtonDisplayed = true;
      var title = item.shortTitle;
      if (item.type === 'event') {
        this.backButtonText = this.lz('Back to Overview'); 
      }
      else if (item.type === 'lightbox') {
        this.backButtonText = this.lz('Back to Photos'); 
      }
      else {
        this.backButtonText = this.lz('Back to %s', title);
      }
      this.backButtonHref = '#'+ item.url;
    }
  },
});