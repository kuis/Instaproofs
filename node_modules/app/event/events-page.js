/*==========================================================================*\
  Homepage with a list of events
\*==========================================================================*/
"use strict";

var app = require('app');
var ua = require('app/util/ua/ua');

var BasePage = require('app/base/base-page');
var ListView = require('./events-list');

module.exports = BasePage.extend({
  dictionary: 'events', // localization dictionary 
  // pageTitle: 'Events',
  pageType: 'home',
  nearBottomDistance: 2000,
  template: require('app/templates').event['events-page'],
  
  props: {
    config: 'state',
    filteredBy: ['string', true, 'current'],
    sortedBy: ['string', true, 'date'],
    searchActive: ['boolean', true, false],
    noSelectorDropdowns: ['boolean', true, false],
    empty: ['boolean', true, false],
  },
  
  bindings: {
    'config.logo_url': {
      type: function (el, val) {
        el.src = val;
      },
      selector: '.homepage-logo',
    },
    'config.logo_link': {
      type: function (el, val) {
        el.href = val;
      },
      selector: '.homepage-logo-link',
    },
    filteredBy: {
      type: function () {
        this.query('.empty-message').innerHTML = this.filteredBy === 'all'
            ? this.lz('Sorry, there are no events listed yet.')
            : this.lz('Sorry, there are no %s events at the moment.', 
                      this.filteredBy);
        this.el.classList.toggle('filter-all', this.filteredBy === 'all');  
        this.el.classList.toggle('filter-showcased', 
                                 this.filteredBy === 'showcased');  
        this.el.classList.toggle('filter-current', 
                                 this.filteredBy === 'current');  
        this.el.classList.toggle('filter-upcoming', 
                                 this.filteredBy === 'upcoming');  
      },
    },
    sortedBy: {
      type: function () {
        this.el.classList.toggle('sort-date', this.sortedBy === 'date');  
        this.el.classList.toggle('sort-name', this.sortedBy === 'name');
        this.el.classList.toggle('sort-type', this.sortedBy === 'type');
      },
    },
    noSelectorDropdowns: {
      type: 'booleanClass',
      name: 'no-selector-dropdowns',
    },
    searchActive: {
      type: 'booleanClass',
      name: 'search-active',
    },
    empty: {
      type: function (el, val) {
        this.el.classList.toggle('empty', val);
        this.query('.empty-message').innerHTML = this.filteredBy === 'all'
            ? this.lz('Sorry, there are no events listed yet.')
            : this.lz('Sorry, there are no %s events at the moment.', 
                      this.filteredBy);
      },
      name: 'empty',
    },
  },
  
  events: {
    'click .load-more > .label': 'loadMore',
    'click .filter-option': 'hideSelectorDropdowns',
    'click .sort-option': 'hideSelectorDropdowns',
  },
  
  initialize: function (ops) {
    this.config = app.config;
    BasePage.prototype.initialize.apply(this, arguments);
    ops = ops || {};
    this.render();

    this.list = new ListView({ 
      filter: ops.filter || 'current',
      sort: ops.sort || 'date',
      el: this.query('.events-list'),
    });
    this.reset(ops).updateHeader();
    this.list.collection.fetch({ reset: true });
    
    this.listenTo(this.list.collection, 'reloading', function () {
      this.empty = false;
      this.write(function () {
        app.view.nav.searchLoading = true;
        this.el.classList.add('reloading');
      });
    });
    this.listenTo(this.list.collection, 'loading', function () {
      this.empty = false;
      this.write(function () {
        this.el.classList.add('loading');
      });
    });
    this.listenTo(this.list.collection, 'sync', function () {
      this.empty = this.list.collection.complete && 
                   !this.list.collection.length;
      this.write(function () {
        app.view.nav.searchLoading = false;
        this.el.classList.remove('reloading');
        this.el.classList.remove('loading');
      });
    });
    
    this.listenTo(this.list.collection, 'complete', function () {
      this.empty = this.list.collection.complete && 
                   !this.list.collection.length;
      this.write(function () {
        this.el.classList.add('complete');
      });
    });
    this.listenTo(this.list.collection, 'incomplete', function () {
      this.empty = false;
      this.write(function () {
        this.el.classList.remove('complete');
      });
    });
    
    this.listenTo(this.list.collection, 'reset', function () {
      this.empty = this.list.collection.complete && 
                   !this.list.collection.length;
      this.triggerReady();
    });
    
    this.listenTo(app.state, 'change:eventsSearchString', function () {
      var str = app.state.eventsSearchString;
      this.searchActive = !!str;
      console.log('change search', str);
      if (str) {
        this.list.collection.searchFor(str);
      }
      else {
        this.list.collection.updateSelector({ backFromSearch: true });
      }
    });
  },
  
  reset: function (ops) {
    this.list.collection.updateSelector({
      filter: ops.filter,
      sort: ops.sort,
    });
    // if (ops.sort) this.list.collection.sortBy(ops.sort);
    // if (ops.filter) this.list.collection.filterBy(ops.filter);
    this.updateHeader();
    // if (this.list.displayedCount > this.list.collection.perPage) {
    //   this.list.render();
    // }
    return this;
  },
  
  onShow: function () {
    this.updateNavLogo();
  },
  onScroll: function () {
    this.updateNavLogo();
  },
  updateNavLogo: function () {
    app.view.nav.noLogo = this.scroll.top < 100;
  },
  
  updateHeader: function () {
    this.filteredBy = this.list.collection.filteredBy;
    this.sortedBy = this.list.collection.sortedBy;
    var filter = '?show='+ this.list.collection.filteredBy;
    var sort = '&sort='+ this.list.collection.sortedBy;
    this.write(function () {
      this.query('.filter-option.all').href = '#events?show=all'+ sort;
      this.query('.filter-option.showcased').href='#events?show=showcased'+sort;
      this.query('.filter-option.current').href = '#events?show=current'+ sort;
      this.query('.filter-option.upcoming').href = '#events?show=upcoming'+sort;
      
      this.query('.sort-option.date').href = '#events'+ filter +'&sort=date';
      this.query('.sort-option.name').href = '#events'+ filter +'&sort=name';
      this.query('.sort-option.type').href = '#events'+ filter +'&sort=type';
    });
    return this;
  },
  
  hideSelectorDropdowns: function () {
    this.noSelectorDropdowns = true;
    this.after(400, function () {
      this.noSelectorDropdowns = false;
    });
  },
  
  // updateHeader: function () {
  //   var self = this;
  //   var filter = 'show='+ this.list.collection.filteredBy;
  //   var sort = 'sort='+ this.list.collection.sortedBy;
  //   var sortLinks = this.queryAll('.header .sorting a');
  //   var filterLinks = this.queryAll('.header .filters a');
  //   this.write(function () {
  //     sortLinks.forEach(function (aTag) {
  //       var val = aTag.getAttribute('data-sort');
  //       aTag.href = '#events?'+ filter +'&sort='+ val; 
  //       if (val === self.list.collection.sortedBy) aTag.classList.add('active');
  //       else aTag.classList.remove('active');
  //     });
  //     filterLinks.forEach(function (aTag) {
  //       var val = aTag.getAttribute('data-filter');
  //       aTag.href = '#events?show='+ val +'&'+ sort; 
  //       if (val === self.list.collection.filteredBy) {
  //         aTag.classList.add('active');
  //       }
  //       else aTag.classList.remove('active');
  //     });
  //   });
  //   return this;
  // },
  
  loadMore: function () {
    this.list.collection.loadMore();
    return this;
  },
  
  onNearBottom: function () {
    if (this.list.collection.complete || this.list.collection.request 
        || ua.mobile) return;
      
    this.loadMore();
    return this;
  },
  
});



