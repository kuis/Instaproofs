/*==========================================================================*\
  Homepage with a list of events
\*==========================================================================*/
"use strict";

var app = require('app');
var ua = require('app/util/ua/ua');

var BasePage = require('app/base/base-page');
var ListView = require('./events-list');

module.exports = BasePage.extend({
  dictionary: 'events', // localization dictionary 
  // pageTitle: 'Events',
  pageType: 'home',
  nearBottomDistance: 2000,
  template: require('app/templates').event['events-page'],
  
  props: {
    config: 'state',
    searchActive: ['boolean', true, false],
    noSelectorDropdowns: ['boolean', true, false],
    empty: ['boolean', true, false],
  },
  
  bindings: {
    'config.logo_url': {
      type: function (el, val) {
        el.src = val;
      },
      selector: '.homepage-logo',
    },
    'config.style': {
      type: function (el, val) {
        el.classList.toggle('list-style', val === 'list');
      },
    },
    'config.logo_link': {
      type: function (el, val) {
        el.href = val;
        el.target = val !== '' && val.indexOf('instaproofs.com') < 0  
            ? '_blank' 
            : '_self';
      },
      selector: '.homepage-logo-link',
    },
    'config.filter': {
      type: function (el, value) {
        // console.log('config.filter', value);
        this.query('.empty-message').innerHTML = value === 'all'
            ? this.lz('Sorry, there are no events listed yet.')
            : this.lz('Sorry, there are no %s events at the moment.', value);
        this.el.classList.toggle('filter-all', value === 'all');
        this.el.classList.toggle('filter-showcased', value === 'showcased');
        this.el.classList.toggle('filter-current', value === 'current');
        this.el.classList.toggle('filter-upcoming', value === 'upcoming');
      },
    },
    'config.sort': {
      type: function (el, value) {
        this.el.classList.toggle('sort-date', value === 'date');
        this.el.classList.toggle('sort-name', value === 'name');
        this.el.classList.toggle('sort-type', value === 'type');
      },
    },
    searchActive: {
      type: 'booleanClass',
      name: 'search-active',
    },
    empty: {
      type: function (el, val) {
        this.el.classList.toggle('empty', val);
        // console.log('empty', this.filter);
        // this.query('.empty-message').innerHTML = this.config.filter === 'all'
        //     ? this.lz('Sorry, there are no events listed yet.')
        //     : this.lz('Sorry, there are no %s events at the moment.', this.filter);
      },
      // name: 'empty',
    },
  },
  
  events: {
    'click .load-more > .label': 'loadMore',
    'click .filter-option': 'onFilterChange',
    'click .sort-option': 'onSortChange',
  },
  
  initialize: function () {
    BasePage.prototype.initialize.apply(this, arguments);

    this.config = app.config;
    this.render();

    // Create events list view
    this.list = new ListView({
      el: this.query('.events-list'),
    });

    // Register events
    this.registerEvents();
  },

  registerEvents: function () {

    // On bootstrap
    this.bootstrap(function () {
      if (app.config.style === 'login') {
        app.view.splashView.showHomeLoginForm();
        return;
      }
      
      // Load with sort and filter from config loaded after bootstrapped
      this.list.setSort(this.config.sort);
      this.list.setFilter(this.config.filter);
      
      this.loadData();
    }.bind(this));


    this.listenTo(this.list.collection, 'reloading', function () {
      this.empty = false;
      this.write(function () {
        app.view.nav.searchLoading = true;
        this.el.classList.add('reloading');
      });
    });
    this.listenTo(this.list.collection, 'loading', function () {
      this.empty = false;
      this.write(function () {
        this.el.classList.add('loading');
      });
    });
    this.listenTo(this.list.collection, 'sync', function () {
      this.empty = this.list.collection.complete &&
          !this.list.collection.length;
      this.write(function () {
        app.view.nav.searchLoading = false;
        this.el.classList.remove('reloading');
        this.el.classList.remove('loading');
      });
    });

    this.listenTo(this.list.collection, 'complete', function () {
      this.empty = !this.list.collection.length;
      this.write(function () {
        this.el.classList.add('complete');
      });
    });
    this.listenTo(this.list.collection, 'incomplete', function () {
      this.empty = false;
      this.write(function () {
        this.el.classList.remove('complete');
      });
    });

    this.listenTo(this.list.collection, 'reset', function () {
      this.empty = this.list.collection.complete &&
          !this.list.collection.length;
      this.triggerReady();
    });

    this.listenTo(app.state, 'change:eventsSearchString', function () {
      var str = app.state.eventsSearchString;
      this.searchActive = !!str;
      console.log('change search', str);
      if (str) {
        this.list.collection.searchFor(str);
      }
      else {
        this.list.collection.updateSelector({ backFromSearch: true });
      }
    });

    this.on('change:config.sort', function (model, value) {
      this.list.setSort(value);

      if (app.state.bootstrapped) {
        this.loadData();
      }
    });

    this.on('change:config.filter', function (model, value) {
      this.list.setFilter(value);

      if (app.state.bootstrapped) {
        this.loadData();
      }
    });
  },
  
  onShow: function () {
    this.updateNavLogo();
  },
  onScroll: function () {
    this.updateNavLogo();
  },
  updateNavLogo: function () {
    app.view.nav.noLogo = this.scroll.top < 100;
  },
  
  loadMore: function () {
    this.list.collection.loadMore();
    return this;
  },
  
  onNearBottom: function () {
    if (this.list.collection.complete || this.list.collection.request 
        || ua.mobile) return;
      
    this.loadMore();
    return this;
  },

  onFilterChange: function (e) {
    var filter = this.query(e.target).closest('a.filter-option').classList[1];

    this.config.filter = filter;
  },

  onSortChange: function (e) {
    var sort = this.query(e.target).closest('a.sort-option').classList[1];

    this.config.sort = sort;
  },

  loadData: function () {
    this.list.collection.updateSelector({
      filter: this.config.filter,
      sort: this.config.sort
    });
  }
});



