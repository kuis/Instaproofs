/*==========================================================================*\
  A base view for popups with FAQ, Contact form etc.
\*==========================================================================*/
"use strict";
var BaseView = require('app/base/base-view');

var app = require('app');

var Popup = BaseView.extend({
  viewType: 'modal-popup',
  // autoRender: true,
  template: require('app/templates')['modal-popup']['modal-popup'],
  
  initialize: function (attrs, options) {
    BaseView.prototype.initialize.apply(this, arguments);
    
    // if (options.type) this.type = options.type;
    // if (options.content) this.content = options.content;
    // if (options.okLabel) this.okLabel = options.okLabel;
    // if (options.cancelLabel) this.cancelLabel = options.cancelLabel;
    
    this.onOk = options.onOk;
    this.onCancel = options.onCancel;
    this.context = options.context;
    if (options.width) this.width = +options.width;
    
    this.listenTo(app.state, 'resize', this.updateHeight);
    
    this.render();
  },
  
  props: {
    type: ['string', true, 'alert'], // alert or confirm
    displayed: ['boolean', true, true],
    content: ['string', true, ''],
    okLabel: ['string', true, ''],
    cancelLabel: ['string', true, ''],
    width: ['number', true, 350],
  },
  
  events: {
    click: 'onClick',
  },
  
  bindings: {
    displayed: {
      type: 'booleanClass',
      name: 'displayed',
    },
    type: {
      type: function (el, val) {
        el.classList.toggle('alert-type', val === 'alert');
        el.classList.toggle('confirm-type', val === 'confirm');
      },
    },
    width: {
      type: function (el, val) {
        el.style.width = val +'px';
      },
      selector: '.box',
    },
  },
  
  onClick: function (e) {
    if (e && e.preventDefault) e.preventDefault();
    if (e.target.closest('.button.ok')) {
      return this.ok();
    }
    
    if (this.type === 'alert') return;
    
    if (!e.target.closest('.box') || e.target.closest('.close') ||
        e.target.closest('.cancel')) {
      this.cancel();
    }
  },
  
  hide: function () {
    this.displayed = false;
    this.after(400, function () {
      this.stopListening();
      this.remove();
    });
  },
  
  cancel: function () {
    if (typeof this.onCancel === 'function') this.onCancel.apply(this.context);
    this.hide();
  },
  ok: function () {
    if (typeof this.onOk === 'function') this.onOk.apply(this.context);
    this.hide();
  },
  
  render: function () {
    this.renderWithTemplate(this);
    
    this.after(50, function () {
      this.updateHeight();
    });
  },
  
  updateHeight: function () {
    var contentHeight = this.query('.modal-content').offsetHeight;
    this.query('.box').style.maxHeight = contentHeight + 74 + 'px';
  },
});

module.exports = {
  alert: function (options) {
    var popup = new Popup({
        type: 'alert',
        content: options.content || '',
        okLabel: options.okLabel || '',
      }, {
        onOk: options.onOk,
        context: options.context || null,
        width: options.width,
    });
    document.body.insertBefore(popup.el, document.getElementById('popup'));
  },
  confirm: function (options) {
    var popup = new Popup({
        type: 'confirm',
        content: options.content || '',
        okLabel: options.okLabel || '',
        cancelLabel: options.cancelLabel || '',
      }, {
        onOk: options.onOk,
        onCancel: options.onCancel,
        context: options.context || null,
        width: options.width,
    });
    document.body.insertBefore(popup.el, document.getElementById('popup'));
  },
};
