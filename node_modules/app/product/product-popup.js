/*==========================================================================*\
  A popup with product buy form 
\*==========================================================================*/
"use strict";

var BaseView = require('app/base/base-view');
var OptionView = require('./option/product-option');

var app = require('app');
var ua = require('app/util/ua/ua');

var rowHeight = 44;

module.exports = BaseView.extend({
  autoRender: true,
  template: require('app/templates').product['product-popup'],
  
  initialize: function (options) {
    this.eventId = options.eventId;
    BaseView.prototype.initialize.apply(this, arguments);
  },
  
  props: {
    eventId: 'number',
  },
  
  events: {
    click: 'onClick',
  },
  
  bindings: {
    'model.img_url': {
      type: 'booleanClass',
      yes: '',
      no: 'no-image',
    }
  },
  
  onClick: function (e) {
    if (!e.target.closest('.box') || e.target.closest('.close') ||
        e.target.closest('.cancel')) {
      this.hide();
    }
    if (e.target.closest('.button.save')) {
      this.save();
    }
  },
  
  hide: function () {
    this.el.classList.add('hidden');
    this.after(400, function () {
      this.stopListening();
      this.remove();
    });
  },
  
  save: function () {
    var event = app.eventModels[this.eventId];
    var products = [];
    var option;
    var time = Date.now();
    for (var i = 0; i < this.optionsView.views.length; i++) {
      option = this.optionsView.views[i];
      if (option.active) {
        products.push({
          // cart_item_id: time++,
          pid: this.model.id, // product ID
          oid: option.model.id, // product option ID
          qty: option.qty,
          notes: option.model.allow_notes ? option.query('textarea').value : '',
        });
        // products.push(new)
      }
    }
    
    event.cart.products.add(products);
    event.cart.save();
    
    this.hide();
  },
  
  render: function () {
    this.renderWithTemplate(this);
    this.cacheElements({
      options: '.options',
    });
    // this.optionsView = this.renderCollection(app.sizes, OptionView,
    //                                          this.query('.options'));
    var e = app.eventModels[this.eventId];
    this.optionsView = this.renderCollection(
        this.model.options, OptionView, this.options, 
        { viewOptions : { event: e }});
    if (this.model.options.length === 1) {
      this.optionsView.views[0].plus();
      if (ua.desktop && this.optionsView.views[0].model.allow_notes) {
        this.after(300, function () {
          this.optionsView.views[0].query('textarea').focus();
        });
      }
    }
    this.updatePositions();
    
    this.after(50, function () {
      var totalLeftHeight = 0;
      var totalRightHeight = 0;
      var option;
      if (this.model.img_url) {
        totalLeftHeight += this.query('.left .img').offsetHeight;
      }
      if (this.model.description) {
        totalLeftHeight += this.query('.product-description').offsetHeight;
      }
      for (var i = 0; i < this.optionsView.views.length; i++) {
        option = this.optionsView.views[i];
        totalRightHeight += rowHeight;
        if (option.doesUnwrap) totalRightHeight += option.wrap.offsetHeight;
      }
      this.query('.box').style.maxHeight = 
          Math.max(totalLeftHeight, totalRightHeight) + 135 + 'px';
    });
    
  },
  
  updatePrice: function () {
    
  },
  
  updatePositions: function () {
    // var height = 24;
    var height = 0;
    // var itemHeight = this.parent.buyFormFullscreen ? rowHeight * 2 : rowHeight;
    var itemHeight = rowHeight;
    var option;
    for (var i = 0; i < this.optionsView.views.length; i++) {
      option = this.optionsView.views[i];
      option.el.style[ua.css.transform] = 'translateY('+ height +'px)';
      height += itemHeight + 
          (option.active && option.doesUnwrap ? option.wrap.offsetHeight : 0);
    }
    this.options.style.height = height +'px';
  },
});
