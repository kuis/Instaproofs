/*==========================================================================*\
  A Purchase Addon Optionm, e.g. paper type
\*==========================================================================*/
"use strict";

var BaseModel = require('app/base/base-model');
var BaseCollection = require('app/base/base-collection');
var ShippingCollection = require('app/shipping/shipping-prices-collection');

var app = require('app');
var whRegExp = new RegExp("w=\\d+&h=\\d+", 'ig');

var Size = BaseModel.extend({
  props: {
    id: 'number', // The size ID
    
    // The qty of this size that should be added to the product
    qty: ['number', true, 0],
    type: ['string', true, 'exactly'],  // exactly|up-to
  },
  
  derived: {
    size: {
      fn: function () {
        return app.sizes.get(this.id);
      },
    },
    // lzString: {
    //   fn: function () {
    //     if (this.type === 'exactly') {
    //       return '%d '+ size.display_name;
    //     }
    //     else {
    //       return 'Up to %d';
    //     }
    //   },
    // }
  },
});
var SizesCollection = BaseCollection.extend({
  model: Size,
});

module.exports = BaseModel.extend({
  props: {
    id: 'number',
    name: ['string', true, ''], // name to display
    description: ['string', true, ''], // an optional description
    img_url: ['string', true, ''], // The URL for the option's image
    img_width: ['number', true, 0], // The width of the option's image
    img_height: ['number', true, 0], // The height of the option's image
    price: ['number', true, 0], // The price of the option, in cents
    allow_notes: ['boolean', true, false], // user can add notes to this option
    available_qty: ['number', true, -1], // -1 for unlimited.
  },
  
  collections: {
    shipping: ShippingCollection,
    required_size_list: SizesCollection,
  },
  
  derived: {
    display_price: {
      deps: ['price'],
      fn: function () {
        return this.formatMoney(this.price);
      },
    },
    discount: {
      cache: false,
      fn: function () {
        var e = this.event;
        return e.sales.sizes.get(this.size_id) || e.sales.allSizes;
      },
    },
    product: {
      fn: function () {
        return this.collection.parent;
      }
    },
  },
  
  getImgForWidth: function (width) {
    if (!this.img_url || !this.img_width || !this.img_height) return false;
    width = width || 150;
    var height = Math.round(this.img_height / this.img_width * width);
    return {
      width: width,
      height: height,
      url: this.img_url.replace(whRegExp, '') +'&w='+ width +'&h=' + height,
    };
  },
});
