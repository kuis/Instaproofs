/*==========================================================================*\
  A product option in the product popup
\*==========================================================================*/
"use strict";

var BaseView = require('app/base/base-view');
var NumberInput = require('app/number-input/number-input');

var popup = require('app/popup/popup');

module.exports = BaseView.extend({
  template: require('app/templates').product.option['product-option'],
  
  popupId: null, // ID of this view's currently displayed description popup
  
  props: {
    active: ['boolean', true, false],
    doesUnwrap: ['boolean', true, false],
    singlePrice: ['number', true, 0],
    price: ['number', true, 0],
    qty: ['number', true, 0],
    // photo: 'object',
    
    remainingQty: ['number', true, -1],
    
    // currently selected option (e.g. for displaying crop)
    selected: ['boolean', true, false], 
    
    // whether Plus and Minus buttons are displayed in mobile view 
    qtyInputMode: ['boolean', true, false],
    
    // whether buy form should span all of viewport without margins 
    buyFormFullscreen: ['boolean', true, true],
    
    crop: 'state', // crop state for this option
    cropIconWidth: ['number', true, 0], // width of a crop miniature
    
    qtyView: 'state',
  },
  
  derived: {
    productPopup: {
      fn: function () {
        return this.getParent('product-popup');
      },
    },
  },
  
  bindings: {
    // 'photo': function () {
    //   this.selected = this.photo.currentCrop === this.crop;
    // },
    
    'qtyView.inputMode': {
      type: 'booleanClass',
      name: 'qty-input-mode',
    },
    buyFormFullscreen: {
      type: function (el, val) {
        el.readOnly = !!val;
        el.disabled = !!val;
      },
      selector: '.qty input',
    },
    'crop.changed': {
      type: 'booleanClass',
      name: 'custom-crop',
    },
    active: {
      type: 'booleanClass',
      name: 'active',
    },
    doesUnwrap: {
      type: 'booleanClass',
      name: 'has-addons',
    },
    price: {
      type: function (el, val) {
        if (this.active) el.innerHTML = this.model.formatMoney(val);
        else el.innerHTML = this.model.formatMoney(this.singlePrice);
      },
      selector: '.head .price.final',
    },
    selected: {
      type: 'booleanClass',
      name: 'selected',
    },
    singlePrice: {
      type: function (el, val) {
        el.innerHTML = this.model.formatMoney(val);
      },
      selector: '.head .price.single',
    },
    
    'model.available_qty': {
      type: function (el, val) {
        el.classList.toggle('sold-out', val === 0);
        
      },
    },
    remainingQty: {
      type: function (el, val) {
        this.qtyView.max = val;
        
        if (val < 0) { // unlimited qty
          
        }
      },
      selector: '.head .availability',
    },
    
    // qty: {
    //   type: 'value',
    //   selector: '.qty input',
    // },
    // qtyInputMode: {
    //   type: 'booleanClass',
    //   name: 'qty-input-mode',
    // },
  },
  
  initialize: function (options) {
    BaseView.prototype.initialize.apply(this, arguments);
    this.event = options.event;
    this.doesUnwrap = !!(this.model.allow_notes || 
                         this.model.required_size_list.length);
    // this.hasAddons = !!this.model.addons.length;
    this.singlePrice = this.model.price;
    this.listenTo(this, 'change:active', this.updateFolding);
    this.listenTo(this.event.cart, 'change:mtime', this.updateAvailability);
  },
  
  events: {
    'click .head': 'onHeadClick',
    'click .checkbox': 'onCheckboxClick',
    'click .name .tip': 'showMainDescription',
    'click .info': 'showDescription',
    'click .sizes .tip': 'showSizesTip',
  },
  
  onHideControlsClick: function () {
     this.qtyInputMode = false;
  },
  onQtyClick: function () {
    if (!this.qty && !this.qtyInputMode) this.plus();
    if (this.buyFormFullscreen) {
      this.qtyInputMode = !this.qtyInputMode;
    }
    else {
      this.focusQty();
    }
  },
  onQtyKeyup: function (e) {
    if (e.keyCode === 10 || e.keyCode === 13) {
      this.qtyInput.blur();
      e.preventDefault();
    }
    this.qtyInput.value = this.qtyInput.value.replace(/[^\d]/g, '')
                                             .replace(/^0+/, '');
    if (!this.qtyInput.value) {
      this.qtyInput.value = '0';
      this.qtyInput.select();
    }
    this.updatePrice();
  },
  focusQty: function () {
    this.qtyInput.focus();
    this.qtyInput.select();
    var self = this;
    setTimeout(function () {
      self.qtyInput.focus();
      self.qtyInput.select();
      setTimeout(function () {
        if (self.qtyInput.scrollIntoView) {
          self.qtyInput.scrollIntoView(false);
        }
      });
    }, 100);
  },
  
  onHeadClick: function () {
    // if (!this.model.size.no_qty) return;
    // this.active = !this.active;
    // this.updatePrice();
  },
  onCheckboxClick: function () {
    if (!this.model.size.no_qty) return;
    this.active = !this.active;
    this.updatePrice();
  },
  
  render: function () {
    if (this.parent.collection) {
      this.renderWithTemplate();
      this.cacheElements({
        availabilityEl: '.availability',
        qtyInput: '.qty input',
        finalPrice: '.price.final',
        wrap: '.wrap',
        info: '.info',
        mainTip: '.name .tip',
        tip: '.sizes .tip',
      });
      this.qtyView = this.renderSubview(new NumberInput(), '.qty');
      this.listenTo(this.qtyView, 'change:value', this.updatePrice);
      
      var e = this.event;
      var discount = e.sales.allProducts;
      this.el.classList.toggle('discounted', !!discount);
      if (discount) this.query('.discount').innerHTML = 
                        '-'+ Math.round(discount.discount * 100) + '%';
                      
      this.updateAvailability();
    }
  },
  
  showMainDescription: function () {
    if (popup.displayedId && popup.displayedId === this.popupId) return;
    this.popupId = popup.show({
      title: this.model.name,
      content: this.model.description,
      image: null,
      targetEl: this.mainTip,
    });
  },
  
  showDescription: function (e) {
    // if (e && e.preventDefault) {
    //   e.preventDefault();
    //   e.stopPropagation();
    // }
    var id = +e.target.closest('tr').getAttribute('data-size-id');
    var size = this.model.required_size_list.get(id).size;
    // if (e && e.target && e.target.closest('.purchase-addon')) return;
    if (popup.displayedId && popup.displayedId === this.popupId) return;
    this.popupId = popup.show({
      title: size.long_name,
      content: size.description,
      image: size.img_url ? {
        src: size.img_url,
        width: size.img_width,
        height: size.img_height,
      } : null,
      targetEl: e.target,
    });
  },
  
  showSizesTip: function () {
    // if (e && e.preventDefault) {
    //   e.preventDefault();
    //   e.stopPropagation();
    // }
    // if (e && e.target && e.target.closest('.purchase-addon')) return;
    if (popup.displayedId && popup.displayedId === this.popupId) return;
    this.popupId = popup.show({
      // title: size.long_name,
      content: this.lz("When you add photos to your cart, "+
          "you will be able to add them to this product "+
          "instead of (or in addition to) "+
          "buying a photo separately."),
      targetEl: this.tip,
    });
  },
  
  updateFolding: function () { // fold or unfold the option
    this.productPopup.updatePositions();
  },
  
  updatePrice: function () {
    var singlePrice = this.model.price;
    var price;
    var qty;
    
    var e = this.event;
    var discount = e.sales.allProducts;
    this.el.classList.toggle('discounted', !!discount);
    if (discount) {
      singlePrice -= Math.round(this.model.price * discount.discount);
    }
    
    qty = Math.round(+this.qtyView.value || 0);
    // if (qty < 0) {
    //   qty = -qty;
    //   this.qtyInput.value = qty;
    // }
    this.qty = qty;
    this.active = qty > 0;
    
    if (this.addonsView) {
      var addons = this.addonsView.views;
      for (var i = 0; i < addons.length; i++) {
        if (addons[i].active || addons[i].model.options.length) {
          singlePrice += addons[i].price;
        }
      }
    }
    
    price = qty * singlePrice;
    
    this.singlePrice = singlePrice;
    this.price = price;
    this.active = !!price;
    
    this.getParent('product-popup').updatePrice();
    // this.parent.parent.updatePrice();
    
    // this.el.classList[!price ? 'remove' : 'add']('active');
  },
  
  updateAvailability: function () {
    if (!this.el) return;
    var available = this.model.available_qty;
    // available = 5;
    if (available < 0) return; // unlimited
    var remaining = this.getRemainingQty();
    // remaining = 0;
    
    this.qtyView.max = remaining;
    
    if (!available) {
      this.el.classList.add('sold-out');
    }
    else if (!remaining) {
      this.el.classList.add('maxed-out');
      this.availabilityEl.innerHTML = 
          this.lz('All remaining stock is already in your cart.');
    }
    else if (available === remaining) {
      this.availabilityEl.innerHTML = this.lz('In Stock: %d.', available);
    }
    else {
      this.availabilityEl.innerHTML = 
          this.lz('In Stock: %d. Already in cart: %d.', available, 
                                                     available - remaining);
    }
    
  },
  getRemainingQty: function () {
    if (this.model.available_qty < 0) return -1;
    if (this.model.available_qty === 0) return 0;
    
    var itemsInCart = this.event.cart.products.where({
      pid: this.model.product.id,
      oid: this.model.id,
    });
    var i;
    var inCartQty = 0;
    for (i = 0; i < itemsInCart.length; i++) {
      inCartQty += itemsInCart[i].qty;
    }
    
    var remaining = this.model.available_qty - inCartQty;
    if (remaining < 0) remaining = 0;
    return remaining;
  },

});
