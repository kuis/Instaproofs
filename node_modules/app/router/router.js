/*==========================================================================*\
  App routes
\*==========================================================================*/
"use strict";

var EventModel = require('app/event/event-model');
var EventNav = require('app/event/event-nav');
var Lightbox = require('app/lightbox/lightbox');
var NavContents = require('app/nav/nav-contents');
var NavContents = require('app/nav/nav-contents');
var OrderModel = require('app/cart/checkout/order-model');
var Router = require('ampersand-router');

var app = require('app');
var lightbox; // lightbox view
var pages = {}; // list of initialized page views
var navs = { // navbar views
  global: new NavContents(),
}; 

var views = {
  cart: require('app/cart/cart-page'),
  category: require('app/category/category-page'),
  checkout: require('app/cart/checkout/checkout-page'),
  confirmation: require('app/cart/checkout/confirmation-page'),
  favorites: require('app/favorites/favorites-page'),
  home: require('app/event/events-page'),
  event: require('app/event/event-page'),
};

function parseQuery(query) {
  if (!query) return {};
  var vars = query.split('&');
  var data = {};
  var pair;
  for (var i = 0; i < vars.length; i++) {
    pair = vars[i].split('=');
    data[pair[0]] = pair[1];
  }
  return data;
}

module.exports = Router.extend({
  
  currentParameters: null, // parameters for currently opened location 
  currentPage: null, // current type of page opened 
  enterSlideshow: false, // enter the slideshow on next lightbox display 
  
  encodeParams: function (data) {
    return '?json='+ encodeURIComponent(JSON.stringify(data));
  },
  decodeParams: function (str) {
    return JSON.parse(decodeURIComponent(str));
  },
  
  setNav: function (eid) { // sets navbar to global or event's one
    var view;
    if (!eid) view = navs.global;
    else if (navs['event'+eid]) view = navs['event'+eid];
    else {
      view = new EventNav({
        id: eid,
        model: app.eventModels[eid],
      });
      navs['event'+eid] = view;
    }
    
    app.state.currentEventId = eid || null;
    app.view.nav.setContents(view);
  },
  
  openPage: function (page, ops) {
    ops = ops || {};
    var id = ops.id ? page + ops.id : page;
    delete ops.id;
    var view = pages[id] ? pages[id].reset(ops) : new views[page](ops);
    pages[id] = view;
    
    this.currentPage = page;
    
    if (page !== 'home') {
      if (app.state.noTransitions) app.view.nav.noLogo = false;
      else setTimeout(function () {
        app.view.nav.noLogo = false;
      }, 400);
    }
    
    this.trigger('page', view, id);
    this.trigger('page:'+id, view, id);
      
    // app.keychain.clear();
  },
  showLightbox: function (eid, cid, pid, back, buy, crop) {
    var event = app.eventModels[eid]
        || (pages.home && pages.home.list.collection.get(eid));
    var collection = cid === 'favorites' ? event.favorites.photos
                                         : event.categories.get(cid).photos;
    var photo = collection.get(pid);
        
    if (!lightbox) {
      this.lightbox = lightbox = new Lightbox({ 
        // el: app.view.query('#lightbox') 
      });
    }
    
    lightbox.reset({
      event: event,
      collection: collection,
      photo: photo,
      backTo: back || (cid === 'favorites' ? '#events/'+eid+'/favorites'
                                           : '#events/'+eid+'/'+cid),
      slideshow: this.enterSlideshow,
      buyForm: buy,
      crop: crop,
    });
    lightbox.show();
    this.enterSlideshow = false;
  },
  
  // shows login form if needed and logs out from other events
  login: function (event) {
    var splash = app.view.splashView;
    app.keychain.clear(event.id);
    var keychain = app.keychain.events.get(event.id);
    if (event.name && event.locked) {
      if (!keychain || !keychain.verified || (event.email && !keychain.email) ||
          (event.password && !keychain.password) ) {
        if (app.state.bootstrapped) splash.showLoginForm(event);
        return false;
      }
    }
    return true;
  },
  
  initialize: function() {
    this.lightbox = {};
    this.productLightbox = {};
    
    // dev mode store switcher ===============================================
    this.route(/url=(.*)/, function (url) {
      if (window.localStorage) {
        window.localStorage.clear();
        console.log('local storage cleared');
      }
      app.storage.appUrl = url;
      app.url = url;
      app.navigate('events');
      window.location.reload();
    });
    
    // dev mode local storage wipe ===========================================
    this.route(/clear/, function () {
      if (window.localStorage) {
        window.localStorage.clear();
        console.log('local storage cleared');
      }
      app.navigate('events');
      window.location.reload();
    });
    
    // homepage ==============================================================
    this.route(/^events(?:\?(.*?))?$/, function (query) {
      if (lightbox) lightbox.hide();
      query = parseQuery(query);
      
      this.openPage('home', {
        sort: query.sort || 'date',
        filter: query.show || 'current',
      });
      this.setNav();
      
      app.keychain.clear();
    });
    
    // event page ============================================================
    this.route(/^events\/(\d+)$/, function (eid) {
      this.currentParameters = {};
      if (lightbox) lightbox.hide();
      eid = +eid;
      var model = app.eventModels[eid]
          || (pages.home && pages.home.list.collection.get(eid))
          || new EventModel({ id: eid });
      app.eventModels[eid] = model;
      this.login(model);
      this.openPage('event', {
        id: eid,
        model: model,
      });
      this.setNav(eid);
    });
    
    // event category page ===================================================
    this.route(/^events\/(\d+)\/(\d+)$/, function (eid, cid) {
      this.currentParameters = {};
      var lightboxDisplayed = !!this.lightbox.displayed;
      if (lightbox) lightbox.hide();
      
      eid = +eid;
      cid = +cid;
      var model = app.eventModels[eid]
          || (pages.home && pages.home.list.collection.get(eid))
          || new EventModel({ id: eid });
      app.eventModels[eid] = model;
      
      this.login(model);
      
      this.openPage('category', {
        id: eid+'_'+cid,
        cid: cid,
        model: model,
        showMore: lightboxDisplayed,
      });
      this.setNav(eid);
    });
    
    // event favorites page ====================================================
    this.route(/^events\/(\d+)\/favorites$/, function (eid) {
      this.currentParameters = {};
      var lightboxDisplayed = !!this.lightbox.displayed;
      if (lightbox) lightbox.hide();
      
      eid = +eid;
      var model = app.eventModels[eid]
          || (pages.home && pages.home.list.collection.get(eid))
          || new EventModel({ id: eid });
      app.eventModels[eid] = model;
      
      this.login(model);
      
      this.openPage('favorites', {
        id: eid,
        model: model,
        showMore: lightboxDisplayed,
      });
      this.setNav(eid);
    });

    // single photo ==========================================================
    // this.route(/^events\/(\d+)\/(\d+|favorites)\/(\d+)(?:(buy)|(crop)(\d+)(?::(\d+))?)?$/,
    //     function (eid, cid, pid, buy, crop, id1, id2) {
    this.route(/^events\/(\d+)\/(\d+|favorites)\/(\d+)(?:\?json=(.*))?$/,
        function (eid, cid, pid, json) {
      // if (cid === 'favorites') return app.navigate('events/'+eid+'/favorites');
      this.currentParameters = {};
      this.lightboxMode = true;
      app.state.lightboxMode = true;
      this.willShowLightbox = true;
      var self = this;
      eid = +eid;
      cid = cid === 'favorites' ? 'favorites' : +cid;
      pid = +pid;
      json = this.decodeParams(json);
      var event = app.eventModels[eid]
          || (pages.home && pages.home.list.collection.get(eid))
          || new EventModel({ id: eid });
      app.eventModels[eid] = event;
      
      this.currentParameters = json || {};
      
      this.login(event);
      
      // if (crop) { // sizeId or productId:sizeId
      //   crop = id2 ? [+id1, +id2] : +id1;
      // }
      // var mode = crop || buy;
      
      // if (buy || crop) { // these URLs are only for internal use 
      if (json) { // these URLs are only for internal use 
        this.navigate('events/'+eid+'/'+cid+'/'+pid, {
          trigger: false,
          replace: true,
        });
      }
      
      // if (!mode || this.currentPage !== 'cart') this.openPage('category', {
      if (!json) {
        if (cid === 'favorites') {
          this.openPage('favorites', {
            id: eid,
            model: event,
            showMore: false,
          });
        }
        else {
          this.openPage('category', {
            id: eid+'_'+cid,
            cid: cid,
            model: event,
            showMore: false,
          });
        }
      }
      this.setNav(eid);
      
      if (!app.isReady) {
        app.ready(function () {
          self.showLightbox(eid, cid, pid);
        });
      }
      else {
        this.showLightbox(eid, cid, pid, 
            json && this.currentPage === 'cart' && ('#events/'+eid+'/cart'));
      }
      
    });
    
    // cart page =============================================================
    this.route(/^events\/(\d+)\/cart$/, function (eid) {
      this.currentParameters = {};
      if (lightbox) lightbox.hide();
      
      // var cart = carts['event'+eid];
      // if (!cart) {
      //   cart = carts['event'+eid] = new CartModel({})
      // }
      var event = app.eventModels[eid]
          || (pages.home && pages.home.list.collection.get(eid))
          || new EventModel({ id: eid });
      app.eventModels[eid] = event;
      
      if (!event.complete && !event.fetching) {
        event.fetch();
      }
      
      this.login(event);
      
      this.openPage('cart', {
        id: eid,
        model: app.eventModels[eid].cart,
      });
      this.setNav(eid);
    });
    
    
    // checkout page =========================================================
    this.route(/^events\/(\d+)\/checkout$/, function (eid) {
      this.currentParameters = {};
      if (lightbox) lightbox.hide();
      
      var event = app.eventModels[eid]
          || (pages.home && pages.home.list.collection.get(eid))
          || new EventModel({ id: eid });
      app.eventModels[eid] = event;
      
      if (!event.complete && !event.fetching) {
        event.fetch();
      }
      
      this.login(event);
      
      this.openPage('checkout', {
        id: eid,
        model: app.eventModels[eid].cart,
      });
      this.setNav(eid);
    });
    
    
    // order confirmation page =================================================
    this.route(/^events\/(\d+)\/confirmation\/(\d+)$/, function (eid, oid) {
      this.currentParameters = {};
      if (lightbox) lightbox.hide();
      
      var order = app.orders[oid];
      if (!order) {
        var stored = app.storage['order'+ oid];
        if (stored) order = new OrderModel(JSON.parse(stored));
      }
      
      if (!order) return;
      if (!order) return this.navigate('events');
      console.log('confirm route', eid, oid);
      
      var event = app.eventModels[eid]
          || (pages.home && pages.home.list.collection.get(eid))
          || new EventModel({ id: eid });
      app.eventModels[eid] = event;
      
      if (!event.complete && !event.fetching) {
        event.fetch();
      }
      
      this.login(event);
      
      this.openPage('confirmation', {
        id: oid,
        model: order,
      });
      this.setNav(eid);
    });
    
  },
  
  routes: {
    '(*path)': function () { this.redirectTo('events'); },
  },
});
