/*==========================================================================*\
  A Purchase Addon Option, e.g. paper type
\*==========================================================================*/
"use strict";

var ShippingCollection = require('app/shipping/shipping-prices-collection');

module.exports = require('app/base/base-model').extend({
  extraProperties: 'ignore',
  props: {
    id: 'number',
    name: ['string', true, ''], // name to display
    description: ['string', true, ''], // an optional description
    img_url: ['string', true, ''], // URL to an option's image
    img_width: ['number', true, 0], // image width in pixels
    img_height: ['number', true, 0], // image height in pixels
    price: ['number', true, 0], // price of an option in cents
    selected: ['boolean', true, false], // whether the item a default one 
    
    sizes_shipping: 'array',
  },
  
  // collections: {
  //   sizes_shipping: 
  // },
  
  derived: {
    size_id: {
      cache: false,
      fn: function () {
        var size = this.collection.parent.collection.parent;
        // console.log(this.collection.parent);
        // if (size && !size.size_id) {
        //   console.log(size);
        // }
        return size ? size.size_id : null;
      },
    },
    sizes: {
      fn: function () {
        if (!this.sizes_shipping) return {};
        var size;
        var sizes = {};
        // if (!this.sizes_shipping) {
        //   console.log(require('app').purchaseddons.models);
        //   console.log('no sizes', this.collection.parent.id, this);
        //   console.trace();
        // }
        for (var i = 0; i < this.sizes_shipping.length; i++) {
          size = this.sizes_shipping[i];
          size.shipping = new ShippingCollection(size.shipping);
          sizes[size.id] = size;
          // if (!sizes[size.id]) sizes[size.id] = [];
          // sizes[size.id].push(size);
        }
        return sizes;
      },
    },
  },
  
  getPrice: function (sizeId) {
    if (!this.sizes_shipping || !sizeId) return 0; // pseudo 'None' option 
    // var size;
    if (!this.sizes[sizeId]) {
      console.log(sizeId, this.sizes);
    }
    return this.sizes[sizeId].price || 0;
    // for (var i = 0; i < this.sizes_shipping.length; i++) {
    //   size = this.sizes_shipping[i];
    //   if (size.id === sizeId) return size.price;
    // }
  },
});
