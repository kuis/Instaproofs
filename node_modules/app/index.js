/*============================================================================*\
  The app's main entry point
\*============================================================================*/
"use strict";

var events = require('ampersand-events');
var i;
require('dom-shims'); // classList, matches, closest etc.


// =============================================================================
// it's important to set the module reference as early as possible 
// so that cyclic references won't cause any trouble
var app = module.exports = events.createEmitter({
  version: 0.999,
  
  // cache: { // cache of instantiated models
    eventModels: {}, // index of fully loaded event models 
    eventCarts: {}, // index of event cart models
    favorites: {}, // list of favorite photo lists per event 
    hides: {}, // list of hidden photos lists per event 
    orders: {}, // list of completed orders
    buyPresets: {}, // buy-form configurations saved as default per event 
  // },
  
  apiUrl: 'https://secure.instaproofs.com/api/rest2/',
  // apiUrl: 'https://secure.instaproofs.com/api/rest2/',
  // currentPage: null, // set by page-switcher 
  isReady: false, // whether the initial page is ready
  loadedImages: {}, // list of URLs for loaded images 
  storage: window.localStorage || {},
  url: window.SITE_URL, // used as site ID for API requests
  // url: 'http://jonathan.instaproofs.com', // used as site ID for API requests
  // url: 'http://evantidephotography.instaproofs.com', // used as site ID for API requests
});

console.log('v'+ app.version);

if (app.storage.appUrl) app.url = app.storage.appUrl;

// clear local storage if it was set from outdated version
if (window.localStorage && window.localStorage.removeItem) {
  var storageVersion = +localStorage.storageVersion || 0;
  
  if (storageVersion < app.version) {
    var valsToKeep = ('appUrl locale lastUsedEmail '+
                      'saveShipping shippingAddress').split(' ');
    var backup = {};
    for (i = 0; i < valsToKeep.length; i++) {
      backup[valsToKeep[i]] = app.storage[valsToKeep[i]];
    }
    window.localStorage.clear();
    for (i = 0; i < valsToKeep.length; i++) {
      if (backup[valsToKeep[i]]) {
        app.storage[valsToKeep[i]] = backup[valsToKeep[i]];
      }
    }
  }
  
  app.storage.storageVersion = app.version;
}

var hash = window.location.hash;
if (hash.indexOf('url=') > -1) {
  var m = hash.match('url=([^&]+)');
  if (m && m[1]) {
    if (window.localStorage) {
      window.localStorage.clear();
      console.log('local storage cleared');
    }
    app.storage.appUrl = m[1];
    app.url = m[1];
    window.location.hash = '';
  }
}


// =============================================================================
// register callback for 'ready' or execute it right away 
app.ready = function (callback) {
  if (app.isReady) callback.apply(app);
  else app.once('ready', function () {
    callback.apply(app);
  });
};


// =============================================================================
// This is how you navigate around the app. 
// Main view calls this automatically when clicking <a> tags.
// It expects a URL without protocol or host, e.g. "events/25/cart".
app.navigate = function (page) {
  var url = page.replace(/^[#\/]+/, '');
  this.router.history.navigate(url, { trigger: true });
};

window.onerror = function () {
  console.log('global error handler', arguments);
  // window.location.reload();
};

app.on('event-logout', function (eid) { // cleanup local storage
  if (!window.localStorage || 
      typeof window.localStorage.removeItem !== 'function') {
    return;
  }
  
  var event = app.eventModels[eid];
  if (!event || event.email || event.password) {
    console.log('clear event storage', eid);
    window.localStorage.removeItem('eventData'+ eid);
    window.localStorage.removeItem('eventStorageTime'+ eid);
    window.localStorage.removeItem('cart'+ eid);
    window.localStorage.removeItem('favorites'+ eid);
    window.localStorage.removeItem('hides'+ eid);
    window.localStorage.removeItem('buyPreset'+ eid);
  }
});

app.blastoff = function () {
  
  app.sharing = require('app/social/sharing');
  
  // ===========================================================================
  // Global model instances
  app.clock    = new (require('app/util/clock/clock-model'))();
  app.config   = new (require('app/config/config-model'))();
  app.history  = new (require('app/history/history-model'))();
  app.i18n     = new (require('app/i18n/i18n-model'))();
  app.keychain = new (require('app/auth/keychain-model'))();
  app.state    = new (require('app/base/app-state'))();


  // ===========================================================================
  // Global collections 
  app.addons   = new (require('app/addon/addons-collection'))(); // photo addons
  app.colors   = new (require('app/color/colors-collection'))(); // e.g. sepia 
  app.notices  = new (require('app/notice/notices-collection'))(); 
  app.pricing  = new (require('app/pricing/pricing-collection'))();
  app.products = new (require('app/product/products-collection'))();
  app.shipping = new (require('app/shipping/shipping-collection'))();
  app.sizes    = new (require('app/size/sizes-collection'))(); // photo options


  // ===========================================================================
  // allow storage tracking 
  if (app.storage) { 
    window.addEventListener('storage', function (e) {
      app.trigger('storage:'+ e.key, e.newValue, e.oldValue, e.url || e.uri);
    }, false);
  }


  // ===========================================================================
  // fetch the bootstrap with all global data (config, addons, products etc.) 
  app.config.fetch();



  // ===========================================================================
  // init router and our main view 
  app.router = new (require('app/router/router'))();
  app.view = new (require('app/base/main-view'))({
    el: document.documentElement,
    model: app.state,
  });


  // ===========================================================================
  // start router and show the appropriate page 
  app.router.history.start({
    pushState: false, 
    root: '/',
  });
  
};
