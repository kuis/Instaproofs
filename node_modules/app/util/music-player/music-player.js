/*==========================================================================*\
  Plays a collection of music in the background 
\*==========================================================================*/
"use strict";

var BaseView = require('app/base/base-view');

module.exports = BaseView.extend({
  autoRender: true,
  template: '<audio loop></audio>',
  
  props: {
    currentTrack: 'object', // URL of the current track 
    length: ['number', true, 0], // number of tracks in current playlist
    singleTrack: ['boolean', true, false], // playlist has only 1 track 
    playing: ['boolean', true, false], // currently playing or trying to
    ready: ['boolean', true, false], // track is ready to play or playing 
  },
    
  events: {
    loadstart: 'handleEvent',
    canplay: 'handleEvent',
    playing: 'handleEvent',
    pause: 'handleEvent',
    ended: 'handleEvent',
  },
  handleEvent: function (e) {
    switch (e.type) {
      case 'loadstart': this.ready = false; break;
      case 'canplay': this.ready = true; break;
      case 'playing': this.playing = true; break;
      case 'pause': this.playing = false; break;
      case 'ended': if (!this.singleTrack) this.playNext(); break;
    }
  },
  
  bindings: {
    length: { type: function () {
      this.singleTrack = this.length === 1;
    }},
    singleTrack: { type: function () {
      if (this.singleTrack) this.el.setAttribute('loop', 'loop');
      else this.el.removeAttribute('loop');
    }},
  },
  
  playNext: function () {
    var i = this.getCurrentPosition();
    this.currentTrack = this.tracks[i+1] || this.tracks[0];
    this.el.setAttribute('src', this.currentTrack.url);
    this.play();
  },
  
  play: function (tracks) {
    if (tracks && tracks.length) this.setTracks(tracks);
    this.el.play();
    this.playing = true;
  },
  
  pause: function () {
    this.el.pause();
    this.playing = false;
  },
  
  setTracks: function (tracks) { // update playlist
    if (!tracks || !tracks.length) return;
    this.tracks = tracks;
    this.length = this.tracks.length;
    
    // we can keep playing current track if it is present in the new list
    if (!this.playing || this.getCurrentPosition() < 0) {
      this.el.setAttribute('src', this.tracks[0].url);
      this.currentTrack = this.tracks[0];
    }
  },
  
  reset: function (tracks) {
    this.tracks = tracks;
    this.pause();
  },
  
  getCurrentPosition: function () { // current position in the playlist 
    if (!this.currentTrack) return -1;
    for (var i = 0; i < this.tracks.length; i++) {
      if (this.currentTrack.url === this.tracks[i].url) return i;
    }   
    return -1;
  },
});
