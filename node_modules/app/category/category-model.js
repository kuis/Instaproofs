/*==========================================================================*\
  Event Model
\*==========================================================================*/
"use strict";

var PhotosCollection = require('app/photo/photos-collection');

var app = require('app');
var helpers = require('app/util/helpers/helpers');

module.exports = require('app/base/base-model').extend({
  extraProperties: 'ignore',
  urlRoot: '/api/categories',
  props: {
    id: 'number',
    name: ['string', true, ''], // name of the category 
    img_url: ['string', true, ''], // URL for category's title image 
    img_count: ['number', true, 0], // number of photos in the category 
    music: ['array', false], // list of music tracks 
    download: ['boolean', true, false],
    password: ['boolean', true, false], // category is password protected
    notes: ['string', true, '']
  },
  
  collections: {
    photos: PhotosCollection,
  },
  
  session: {
    locked: ['boolean', true, false],
  },
  
  derived: {
    event: {
      fn: function () {
        return this.collection.parent;
      },
    },
   
    app_url: {
      fn: function () {
        return '#events/'+ this.event.id +'/'+ this.id;
      },
    },
    thumb_url: {
      deps: ['img_url'],
      fn: function () {
        var width = 595;
        if (window.screen && window.screen.width < 610) {
          width = window.screen.width - 15;
        }
        return helpers.toThumbUrl(this.img_url, width);
      },
    },
    thumb_blur_url: {
      deps: ['thumb_url'],
      fn: function () {
        return helpers.toBlurUrl(this.thumb_url);
      },
    },
    
    visible_count: {
      cache: false,
      fn: function () {
        var n = 0;
        for (var i = 0; i < this.photos.length; i++) {
          if (!this.photos.at(i).hidden) n++;
        } 
        return n;
      },
    },
    
    music_tracks: {
      deps: ['img_url'],
      fn: function () {
        return this.music && this.music.length ? this.music 
            : (this.event.music || []);
      },
    },
    
    page_id: {
      fn: function () {
        return this.event.id +'_'+ this.id;
      },
    },
    
    next: {
      fn: function () {
        var index = this.collection.indexOf(this);
        return this.collection.at(index+1) || null;
      },
    },
    prev: {
      fn: function () {
        var index = this.collection.indexOf(this);
        return this.collection.at(index-1) || null;
      },
    },
    
    nextAround: {
      fn: function () {
        return this.next || this.collection.at(0);
      },
    },
    prevAround: {
      fn: function () {
        return this.prev || this.collection.last();
      },
    },
  },
  
  initialize: function () {
    this.listenTo(app.keychain, 'change:mtime', this.updateLock);
    this.updateLock();
  },
  
  getSlideshowUrl: function () {
    var photo;
    if (!this.photos.length) return '';
    for (var i = 0; i < this.photos.length; i++) {
      photo = this.photos.at(i);
      if (!photo.hidden) {
        return this.app_url +'/'+ photo.id;
      }
    }
    return '';
  },
  
  updateLock: function () {
    if (!this.password) return;
    
    var keychain = app.keychain.categories.get(this.id);
    
    this.locked = this.password && 
                 (!keychain || !keychain.verified || !keychain.password);
  },
});
