/*==========================================================================*\
  A single event category page
\*==========================================================================*/
"use strict";

var assign = require('lodash.assign');
var ua = require('app/util/ua/ua');
var Page = require('app/base/base-page');
var CategoryView = require('./category');
var FixedFooter = require('./category-footer');
var ProductsView = require('app/product/products');
var SalesView = require('app/sale/sales-info');

module.exports = Page.extend({
  dictionary: 'category', // localization dictionary 
  localNearBottomDistance: 800,
  pageType: 'event-category',
  template: require('app/templates').category['category-page'],
  complete: false, // whether all photos are displayed 
  
  props: {
    eventId: ['number', true, 0],
    categoryID: ['number', true, 0],
  },
  
  derived: {
    categoryModel: {
      deps: ['categoryID', 'model.complete'],
      fn: function () {
        return this.model.categories.get(this.categoryID);
      },
      cache: false
    },
    description: {
      deps: ['model.complete'],
      fn: function () {
        return (this.categoryModel && this.categoryModel.notes) ? this.categoryModel.notes : this.model.description;
      }
    }
  },

  session: {
    locked: ['boolean', true, false],
  },

  events: {
    // 'click .sorting a': 'sort',
    'click .load-more > .label': 'showMore',
    // 'scroll': 'onScroll',
  },

  bindings: {
    'model.name': '[data-hook=event-name]',
    'description': {
      type: 'innerHTML',
      selector: '.event-description',
    },
    'locked': {
      type: 'booleanClass',
      name: 'locked',
    },
  },

  subviews: assign({}, Page.prototype.subviews, {
    category: {
      container: '.categories',
      waitFor: 'model.complete',
      prepareView: function (el) {
        this.triggerReady();
        this.category = new CategoryView({
          el: el,
          parent: this,
          model: this.model.categories.get(this.categoryID),
        });
        this.fixedFooter.model = this.category.model;
        this.write(function () {
          this.queryByHook('category-name').innerHTML= this.category.model.name;
          this.fixedFooter.render();
        });
        return this.category;
      },
    },
    products: {
      container: '.products',
      waitFor: 'model.complete',
      prepareView: function (el) {
        if (this.model.products_list.length) {
          // Add to the nearBottomDistance setting to compensate for products
          // (TODO: this should be setup on a resize event)
          var divider = 3;
          if(document.documentElement.clientWidth <= 550)
            divider = 1;
          else if(this.model.products_list.length < 5 || 
              document.documentElement.clientWidth <= 769)
            divider = 2;
          this.nearBottomDistance = this.localNearBottomDistance+
              (Math.ceil((this.model.products_list.length)/divider)*280);

          this.el.classList.add('has-products');
        }
        this.products = new ProductsView({
          el: el,
          parent: this,
          collection: this.model.products_list,
        });
        return this.products;
      },
    },
    sales: {
      container: '.sales-info',
      waitFor: 'model.categories',
      prepareView: function (el) {
        this.sales = new SalesView({
          el: el,
          parent: this,
          model: this.model.sales,
        });
        return this.sales;
      },
    },
  }),


  compare: function (page) {
    if (this.category && this.category.model &&
        page.category && page.category.model &&
        this.model.categories === page.category.model.collection) {

      if (this.model.categories.indexOf(this.category.model) >
          page.category.model.collection.indexOf(page.category.model)){
        return 'right-transition';
      }
      else {
        return 'left-transition';
      }
    }
    return 'normal-transition';
  },

  initialize: function (ops) {
    Page.prototype.initialize.apply(this, arguments);
    // var self = this;
    ops = ops || {};

    this.eventId = this.model.id;
    this.categoryID = ops.cid;

    this.fixedFooter = new FixedFooter({
      parent: this
    });

    this.onModelComplete(function () {

      var catName = this.categoryModel.name;
      this.setTitle(catName +' - '+ this.model.name, catName);

      this.render();
    });
  },

  onModelComplete: function (callback) {
    var self = this;

    if (this.model.complete) {
      callback.apply(self);
    } else {
      this.model.fetch();

      this.model.once('change:complete', function () {
        callback.apply(self);
      });
    }
  },
  
  reset: function (ops) {
    if (ops.showMore && !this.category.photos.displayedCount) {
      this.category.showMore();
    }
    return this;
  },
  
  onNearBottom: function () {
    if (ua.mobile || this.complete) return;
    this.category.showMore();
    return this;
  },
  onShow: function () {
    if (this.category) this.category.onPageShow();
  },
  
  showMore: function () {
    if (!this.complete) this.category.showMore();
    return this;
  },
  
});



