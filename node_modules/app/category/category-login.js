"use strict";
var BaseView = require('app/base/base-view');

var app = require('app');
var xhr = require('xhr');

module.exports = BaseView.extend({
  template: require('app/templates').category['category-login'],
  
  initialize: function () {
    BaseView.prototype.initialize.apply(this, arguments);
  },
  
  props: {
    loggingIn: ['boolean', true, false],
  },
  
  bindings: {
    loggingIn: {
      type: function (el, val) {
        if (!this.rendered) return;
        this.submitEl.classList.toggle('loading', !!val);
      },
    },
  },
  
  events: {
    'click .back': 'goBack',
    'click .submit': 'login',
    'keypress input': 'onKeyPress',
  },
  
  goBack: function () {
    console.log(window.history.length);
    if (window.history.length > 1) {
      window.history.back();
    }
    else {
      app.navigate('events/'+ this.model.event.id);
    }
  },
  login: function () {
    var self = this;
    var password = this.passwordEl.value.trim();
    if (!password) {
      this.passwordEl.focus();
      return;
    }
    
    var id = this.model.id;
    var eid = this.model.event.id;
    
    app.keychain.saveCategory(id, eid, password);
    
    this.loggingIn = true;
    this.xhr = xhr({
      uri: app.apiUrl +'events/login/'+ eid +'/'+ id +
          '?url='+ encodeURIComponent(app.url) +
           '&password='+ encodeURIComponent(password),
    }, function (err, resp, body) {
      self.passwordEl.value = '';
      self.loggingIn = false;
      self.xhr = null;
      body = JSON.parse(body);
      console.log('resp', body);
      if (body.status === 200) {
        app.keychain.confirmCategory(id);
        console.log('locked', self.model.locked);
        self.model.locked; // trigger change
        self.model.trigger('change:locked');
      }
    });
    
    
  },
  onKeyPress: function (e) {
    this.wrongData = false;
    if (e.keyCode === 10 || e.keyCode === 13) {
      this.login();
    }
  },
  
  render: function () {
    BaseView.prototype.render.apply(this, arguments);
    this.cacheElements({
      passwordEl: '.password input',
      submitEl: '.button.submit',
    });
  }
});
