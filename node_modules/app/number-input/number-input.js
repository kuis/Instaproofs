/*==========================================================================*\
  Number inputs, e.g. quantity selector
\*==========================================================================*/
"use strict";

var app = require('app');
var BaseView = require('app/base/base-view');

module.exports = BaseView.extend({
  // autoRender: true,
  template: require('app/templates')['number-input']['number-input'],
  
  props: {
    value: ['number', true, 0],
    inputMode: ['boolean', true, false], // mobile input mode 
  },
  
  bindings: {
    value: {
      type: 'value',
      selector: 'input',
    },
    inputMode: {
      type: 'booleanClass',
      name: 'input-mode',
    },
  },
  
  events: {
    'click .plus': 'plus',
    'click .minus': 'minus',
    'click input': 'onInputClick',
    'click .hide-controls': 'onHideControlsClick',
    'focus input': 'focusInput',
    'keyup input': 'onQtyKeyup',
    'change input': 'readValue',
    'input input': 'readValue',
    'click .info': 'showDescription',
    'click .crop': 'toggleCropping',
  },
  
  initialize: function () {
    BaseView.prototype.initialize.apply(this, arguments);
    
  },
  
  render: function () {
    this.renderWithTemplate(this);
    this.cacheElements({
      inputEl: 'input',
    });
  },
  
  readValue: function () {
    if (!this.inputEl) return;
    this.value = +this.inputEl.value || 0;
  },
  
  plus: function (e) {
    // var old = Math.round(+this.inputEl.value || 0);
    var inc = 1;
    if (e && e.altKey) inc *= 10;
    if (e && e.shiftKey) inc *= 5;
    this.value += inc;
  },
  minus: function (e) {
    var inc = 1;
    if (e && e.altKey) inc *= 10;
    if (e && e.shiftKey) inc *= 5;
    
    this.value -= this.value - inc < 0 ? this.value : inc;
    if (!this.value && this.inputMode) {
      this.inputMode = false;
    }
  },
  
  focusInput: function () {
    this.inputEl.focus();
    this.inputEl.select();
    this.after(100, function () {
      this.inputEl.focus();
      this.inputEl.select();
      if (this.inputEl.scrollIntoView) {
        this.inputEl.scrollIntoView(false);
      }
    });
  },
  onHideControlsClick: function () {
     this.inputMode = false;
  },
  onInputClick: function () {
    if (!this.value && !this.inputMode) this.plus();
    if (this.parent.buyFormFullscreen) {
      this.inputMode = !this.inputMode;
    }
    else {
      this.focusInput();
    }
  },
  onQtyKeyup: function (e) {
    if (e.keyCode === 10 || e.keyCode === 13) {
      this.inputEl.blur();
      e.preventDefault();
    }
    this.inputEl.value = this.inputEl.value.replace(/[^\d]/g, '')
                                             .replace(/^0+/, '');
    if (!this.inputEl.value) {
      this.inputEl.value = '0';
      this.inputEl.select();
    }
    
    this.readValue();
  },
  
});

