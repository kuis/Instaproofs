/*==========================================================================*\
  Number inputs, e.g. quantity selector
\*==========================================================================*/
"use strict";

var app = require('app');
var BaseView = require('app/base/base-view');

module.exports = BaseView.extend({
  viewType: 'number-input',
  // autoRender: true,
  template: require('app/templates')['number-input']['number-input'],
  
  props: {
    value: ['number', true, 0],
    inputMode: ['boolean', true, false], // mobile input mode 
    max: ['number', true, -1], // maximum value allowed
    plusAvailable: ['boolean', true, true],
    minusAvailable: ['boolean', true, true],
    capacity: ['number', true, 0]
  },
  
  bindings: {
    value: {
      type: function (el, val) {
        if (this.max > -1 && val > this.max) return this.value = this.max;
        this.el.classList.toggle('maxed-out', val === this.max);
        el.value = val;
      },
      // type: 'value',
      selector: 'input',
    },
    inputMode: {
      type: 'booleanClass',
      name: 'input-mode',
    },
    max: {
      type: function (el, val) {
        if (val < 0) el.removeAttribute('max');
        else el.setAttribute('max', val);
        this.el.classList.toggle('maxed-out', val === this.value);
      },
      selector: 'input',
    },
    plusAvailable: {
      type: function(el, val) {
        el.classList.toggle('disabled', !val);
      },
      selector: '.plus'
    },
    minusAvailable: {
      type: function(el, val) {
        el.classList.toggle('disabled', !val);
      },
      selector: '.minus'
    }
  },

  derived: {
    sizeModel: {
      fn: function () {
        return this.parent.model;
      }
    }
  },

  events: {
    'click .plus': 'plus',
    'click .minus': 'minus',
    'click input': 'onInputClick',
    'click .hide-controls': 'onHideControlsClick',
    'focus input': 'focusInput',
    'keyup input': 'onQtyKeyup',
    'change input': 'readValue',
    'input input': 'readValue',
    //'click .info': 'showDescription',
    'click .crop': 'toggleCropping',
  },
  
  initialize: function (options) {
    debugger;
    BaseView.prototype.initialize.apply(this, arguments);
    this.listenTo(app.state, 'change:width', this.updateReadOnly);
    this.listenTo(this, 'change:value', this.checkProductAvailable);
    if (options.spotsLeft)
      this.spotsLeft = options.spotsLeft;
  },
  
  render: function () {
    this.renderWithTemplate(this);
    this.cacheElements({
      inputEl: 'input',
    });
    this.updateReadOnly();
    this.checkProductAvailable();
  },
  
  updateReadOnly: function () {
    if (!this.inputEl) return;
    // this.inputMode = app.state.width <= 550;
    this.inputEl.readOnly = app.state.width <= 550;
    this.inputEl.disabled = app.state.width <= 550;
  },
  
  readValue: function () {
    if (!this.inputEl) return;
    this.value = +this.inputEl.value || 0;
  },

  checkProductAvailable: function() {
    if (this.value >= this.capacity) {
      this.plusAvailable = false;
    } else {
      this.plusAvailable = true;
    }
    if (this.value > 0) {
      this.minusAvailable = true;
    } else {
      this.minusAvailable = false;
    }
  },

  plus: function (e) {
    // var old = Math.round(+this.inputEl.value || 0);
    if (this.max > -1 && this.value >= this.max) {
      this.trigger('overload');
      return;
    }
    var inc = 1;
    if (e && e.altKey) inc *= 10;
    if (e && e.shiftKey) inc *= 5;

    this.value += inc;
  },

  minus: function (e) {
    var inc = 1;
    if (e && e.altKey) inc *= 10;
    if (e && e.shiftKey) inc *= 5;

    this.value -= this.value - inc < 0 ? this.value : inc;
    if (!this.value && this.inputMode) {
      this.inputMode = false;
    }
  },
  
  focusInput: function () {
    this.inputEl.focus();
    this.inputEl.select();
    // this.after(100, function () {
    //   this.inputEl.focus();
    //   this.inputEl.select();
    //   if (this.inputEl.scrollIntoView) {
    //     this.inputEl.scrollIntoView(false);
    //   }
    // });
  },
  onHideControlsClick: function () {
     this.inputMode = false;
  },
  onInputClick: function () {
    if (!this.value && !this.inputMode) {
      this.plus();
      this.inputEl.value = this.value;
    }
    if (app.state.width <= 550) {
      this.inputMode = !this.inputMode;
    }
    else {
      this.focusInput();
    }
  },
  onQtyKeyup: function (e) {
    if (e.keyCode === 10 || e.keyCode === 13) {
      this.inputEl.blur();
      e.preventDefault();
    }
    this.inputEl.value = this.inputEl.value.replace(/[^\d]/g, '')
                                             .replace(/^0+/, '');
    if (!this.inputEl.value) {
      this.inputEl.value = '0';
      this.inputEl.select();
    }
    
    this.readValue();
  },
  
});

