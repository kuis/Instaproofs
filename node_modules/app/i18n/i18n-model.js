/*============================================================================*\
  Internatianlization module.
\*============================================================================*/
"use strict";

var BaseModel = require('app/base/base-model');

var app = require('app');
var vsprintf = require('sprintf-js').vsprintf;
var moment = require('moment');

// we need to mention all non-en moment locales for browserify to pick them up
require('moment/locale/de');//German
require('moment/locale/es');//Spanish
require('moment/locale/it');//Italian
require('moment/locale/ru');//Russian
require('moment/locale/fr');//French

var locales = {
  de: require('./de'),
  en: require('./en'),
  es: require('./es'),
  fr: require('./fr'),
  it: require('./it'),
  ru: require('./ru'),
};

module.exports = BaseModel.extend({
  props: {
    id: 'string', // ID of the current locale
    locales: 'object', // all supported locales 
    locale: 'object', // shortcut to the current locale 
  },
  
  // ===========================================================================
  initialize: function () {
    this.locales = locales;
    var id = app.storage.locale || window.navigator.userLanguage || 
             window.navigator.language || 'en';
    id = id.substr(0, 2).toLowerCase();
    if (!this.locales[id]) id = 'en';
    
    this.listenTo(app, 'storage:locale', function (newId) {
      this.select(newId);
    });
    
    this.select(id, { silent: true });
  },
  
  
  // ===========================================================================
  // get a dictionary or sub-dictionary
  getDictionary: function (dictPath, localeId, str) {
    if (!localeId) localeId = this.id;
    var dict, i, withTranslation;
    if (dictPath) {
      dictPath = dictPath.split('.');
      i = 0;
      dict = this.locales[localeId].dictionary;
      while (dict && i < dictPath.length) { 
        if (dict[str]) withTranslation = dict;
        dict = dict[dictPath[i]];
        i++;
      }
    }
    
    if (!dict) {
      dict = this.locales[localeId].dictionary.global;
    }
    
    // allow to fallback to translations higher in the tree
    if (!dict[str] && withTranslation) dict = withTranslation;
    
    return dict;
  },
  
  
  // ===========================================================================
  // takes an english string with optional arguments and translates 
  // it to the current locale
  localize: function (params) {
    var i;
    if (!params) {
      console.log();
      console.trace();
    }
    var dictionaryPath = params.dictionary;
    var str = params.str;
    var args = params.args || [];
    var viewType = params.view && params.view.viewType;
    
    // moment.js date
    // if (args[0] && args[0]._isAMomentObject && !dictionaryPath) {
    if (args[0] && args[0]._isAMomentObject) {
      return this.localizeDate(str, args[0]);
    }
    
    // dictionary to use
    var dict = this.getDictionary(dictionaryPath, this.id, str);
    
    // look in specified dictionary or global one 
    var item = dict[str] || this.locale.dictionary.global[str];
    
    if (!item) { // no match found - inform through console 
      if (this.id !== 'en') { // fallback to english 
        console.warn(this.id + (dictionaryPath ? '.'+ dictionaryPath : '') +
            ' dictionary doesn\'t have a translation of `'+ str +'`'+
            (viewType ? ' for view `'+ viewType +'`' : ''));
        console.trace('Translation Trace');
        dict = this.getDictionary(dictionaryPath, 'en', str);
      }
      item = dict[str] || this.locales.en.dictionary.global[str] || str;
    }
    
    // dictionary item should return a string for sprintf  
    var res = typeof item === 'function' ? item.apply(null, args) : item;
    
    return vsprintf(res, args);
  },
  
  
  // ===========================================================================
  localizeDate: function (format, moment) {
    if (moment.locale() !== this.id) moment.locale(this.id);
    return moment.format(format);
  },
  
  
  // ===========================================================================
  // Changes current locale and triggers 'select' event (if not silenced)
  select: function (id, options) {
    if (!this.locales[id]) console.warn('Requested language not found: '+ id);
    if (id === this.id || !this.locales[id]) return;
    
    this.id = id;
    moment.locale(id);
    this.locale = this.locales[this.id];
    app.storage.locale = id;
    if (!options || !options.silent) app.trigger('language-change');
  },
});
